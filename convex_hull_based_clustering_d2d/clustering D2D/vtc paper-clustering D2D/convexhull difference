{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"convexhull difference","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNXiCthTHTY/fVp7cAsRa5L"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"DCovxwzZ_oSl","executionInfo":{"status":"error","timestamp":1624088656944,"user_tz":-120,"elapsed":550,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"41fbdf85-c1fd-450b-b1a5-8f56e138ee5f"},"source":["#last test june 18th .............\n","#global csp: in test\n","from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","\n","#last updated: june 10\n","#mode3\n","#testing: june 14\n","# =================== 0. Definitions ====================\n","def loc_area(x1,y1,x2,y2):\n","  # random angle\n","  # aoa_est -+ aoa_confidence\n","  # vector on that angle\n","  area= abs(x1-x2)*abs(y1-y2)\n","  return area \n","\n","def global_csp(nbnode,final_time):\n","    final_timearr=[]\n","    all_sol_est1 = []\n","    nbnode = nbnode-1\n","    #global csp\n","    #run csp\n","    b = all_benchmark_est[nbnode]#data stored in the order of nbnode index\n","    print('nbnode','b',all_x_ids[nbnode],b)\n","    y = all_y_est[nbnode]\n","    print('y',all_x_ids[nbnode],y)\n","    theta =  all_theta_est[nbnode]\n","    print('theta',all_x_ids[nbnode],theta)\n","    heading = all_eh[nbnode]\n","    for i in range (0,len(y)): # for each range and bearing measurement\n","      alpha = cn.create_dom(Interval())\n","      d = cn.create_dom(IntervalVector(2))\n","      r = cn.create_dom(IntervalVector(2))   \n","      cn.add(ctc.dist, [r, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","      cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","      cn.add(ctc.polar, [d,y[i],alpha])   \n","      cn.add(ctc_minus, [b[i],r,d]) \n","    contraction_dt = cn.contract_during(iteration_dt)#contraction_dt = cn.contract_during(iteration_dt) #print(contraction_dt)\n","    #final_time +=contraction_dt        #print(final_time)\n","    #all_x_est[nbnode] = r #using solution update the estimated location of unknown node\n","    sol_est = r\n","    #if r.contains(all_x_truth[nbnode]) :\n","        #print('yes')\n","    area_est = loc_area(r[0][0],r[1][0],r[0][1],r[1][1])\n","    all_area_est.append(area_est)\n","    all_sol_est1.append(r)\n","    if (id_updategsp.get(all_x_ids[nbnode])is None):\n","        id_updategsp[all_x_ids[nbnode]] = 1 \n","        nodeid_locareagsp[all_x_ids[nbnode],';',df.loc[nbnode+1][12]] = area_est  \n","        nodeid_locarea[all_x_ids[nbnode]]= loc_area(r[0][0],r[1][0],r[0][1],r[1][1])\n","        nodeid_b[all_x_ids[nbnode]]= b\n","        nodeid_y[all_x_ids[nbnode]]= y\n","    elif id_updategsp.get(all_x_ids[nbnode]) >0: \n","        id_updategsp[all_x_ids[nbnode]] = 1+id_updategsp[all_x_ids[nbnode]]\n","        nodeid_locareagsp[all_x_ids[nbnode],';',df.loc[nbnode+1][12]] = area_est \n","        if area_est == nodeid_locarea.get(all_x_ids[nbnode]):\n","            print('nbnode','b',all_x_ids[nbnode],b,'earlier b', nodeid_b[all_x_ids[nbnode]])\n","            print('nbnode','y',all_x_ids[nbnode],y,'earlier y', nodeid_y[all_x_ids[nbnode]])\n","            print('nbnode','theta',all_x_ids[nbnode],theta)\n","            print(r)\n","        nodeid_b[all_x_ids[nbnode]]= b\n","        nodeid_y[all_x_ids[nbnode]]= y\n","        nodeid_locarea[all_x_ids[nbnode]]= loc_area(r[0][0],r[1][0],r[0][1],r[1][1]) \n","        nodeid_locareagsp[all_x_ids[nbnode],';',df.loc[nbnode+1][12],';',id_updategsp[all_x_ids[nbnode]]] = area_est \n","        #print(nbnode)\n","        #print(id_updategsp)\n","    x1 = float(all_x_truth[nbnode][0])\n","    x2 = float(all_x_truth[nbnode][1])\n","    #print(x1)\n","    if r.contains([x1,x2]) :\n","        print('yes')\n","    #else:\n","        #print('no') \n","    del r#refresh p \n","    #nbnode+=1\n","    #all_path_sol.append(all_sol_est)\n","    #print(all_x_ids[nbnode],all_sol_est1) \n","    #sum(final_timearr)\n","    return nbnode\n","\n","#csp with time constraints\n","df = pd. read_excel (r'csp.xlsx', sheet_name='gcsp')\n","rows = df.shape[0]\n","columns = df.shape[1]\n","rows=30\n","\n","# =================== 0. Parameters, truth and data ====================\n","#time data\n","dt = 1#time interval of csp problem update\n","iteration_dt = 0.2#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# =============== 1. Defining domains for our variables ================\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","e_y = Interval(-0.1,0.1)\n","e_g = Interval(-0.1,0.1)\n","e_t = Interval(-0.01,0.01)\n","all_area_est =[]\n","all_sol_est=[]\n","xgps_all={}\n","ygps_all={}\n","all_x_gps={}\n","all_gps_radius = {}\n","\n","# =========== global ===========\n","#input data checked\n","#get data from excel of all nodes\n","for i in range(1,rows):\n","    emerg_ids = df.loc[i][1] # emerg id\n","    x_ids = df.loc[i][2] # node id\n","    x_truth= [df.loc[i][3],df.loc[i][4],df.loc[i][11]] # (x,y,heading)#n1\n","    x1 = float(x_truth[0])\n","    x2 = float(x_truth[1])\n","    x_truth= [df.loc[i][3],df.loc[i][4],atan2(x2,x1)] # (x,y,heading)#n1\n","    angle = random.randrange(0, 6)\n","    gps_radius = random.randrange(0, 1000)*float(df.loc[i][10])\n","    x_gps = gps_radius*cos(angle)+x1\n","    y_gps = gps_radius*sin(angle)+x2\n","    if xgps_all.get(x_ids) is None:\n","        xgps_all[x_ids] = x_gps\n","        \n","        all_gps_radius[x_ids]=gps_radius\n","    if ygps_all.get(x_ids) is None:\n","        ygps_all[x_ids] = y_gps \n","    xy_gps = [Interval(xgps_all[x_ids]+e_g),Interval(ygps_all[x_ids]+e_g)]#gps locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    if all_x_gps.get(x_ids) is None:\n","        all_x_gps[x_ids]=(xy_gps)#estimated locations of nodes  #estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","all_theta_est = []\n","all_y_est =[]\n","\n","#benchmarks of each node\n","for j in range(1,rows):\n","    bench_ids = [df.loc[j][5],df.loc[j][2]]#gps measure is taken as the last benchmark\n","    theta_truth = [df.loc[j][9]]#theta\n","    theta1 = float(theta_truth[0])\n","    if theta1!=6.28:    \n","        theta_est = [Interval(theta1+e_t),Interval(0,6.28)]#estimated theta of bench nodes \n","    else:\n","        theta_est =[Interval(0,6.28),Interval(0,6.28)]#estimated theta of bench nodes\n","    all_theta_est.append(theta_est)  \n","    benchmark1_truth =  [df.loc[j][6],df.loc[j][7]] #benchmark locations\n","    bench1 = float(benchmark1_truth[0])\n","    bench2 = float(benchmark1_truth[1])\n","    b1 = [bench1-0.01,bench1+0.01]#estimated locations of bench nodes \n","    b2 = [bench2-0.01,bench2+0.01]#estimated locations of bench nodes \n","    g1 = all_x_gps[all_x_ids[j-1]]\n","    benchmark_est = [IntervalVector([b1,b2]),IntervalVector([g1[0],g1[1]])]\n","    y1_truth = [df.loc[j][8]]\n","    y1_est = Interval(float(df.loc[j][8])+e_y) \n","    y2_est = Interval(all_gps_radius[all_x_ids[j-1]]+e_y)\n","    y_est = (y1_est,y2_est)\n","    all_y_est.append(y_est)\n","    all_bench_ids.append(bench_ids)\n","    all_benchmark_est.append(benchmark_est)\n","\n","#heading of  each node\n","all_eh = []\n","for n in range(1,rows):\n","    x11 = xgps_all[all_x_ids[n-1]]\n","    x22 = ygps_all[all_x_ids[n-1]]\n","    heading_gps = atan2(x22,x11)\n","    e_h = Interval(heading_gps).inflate(0.01)\n","    all_eh.append(e_h)\n","\n","# =========== Defining contractors to deal with equations ===========\n","# We use the predefined contractor ctc.dist, no need to build it\n","ctc_plus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a+b-c\")) # a+b=c\n","ctc_minus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a-b-c\")) # a-b=c\n","\n","# =========== Contractor network ===========\n","cn = ContractorNetwork()\n","#input data: checked\n","tdomain = Interval(120,float(df.loc[rows-1][12])) # [t0,tf]\n","t = tdomain.lb()\n","prev_t_obs = 0\n","dt=0\n","jj=1#index where data starts\n","earlier_pathid = []\n","t_ub=120\n","time_path = []\n","all_time_path=[]\n","id_update = {}\n","id_updategsp = {}\n","nodeid_locarea = {}\n","nodeid_locareagsp = {}\n","nodeid_b = {}\n","nodeid_y = {}\n","\n","while float(df.loc[jj][12]) <= tdomain.ub():#while now is below the upper bound of time domain\n","    if float(df.loc[jj][12])<= t_ub: # new calculation update each 120 second\n","        if jj==1:  #initial arrived data index      \n","            all_sol_est = []\n","            final_time=0\n","            nbnode0=1\n","            tg =global_csp(nbnode0,final_time)\n","            #print(tg)\n","        else:      \n","            nbnode0 =tg+2\n","            all_sol_est = []\n","            final_time=0\n","            tg =global_csp(nbnode0,final_time)\n","            #print(tg)\n","        if (jj<=rows-1): jj+=1\n","    else:\n","        t_ub +=120       \n","    #final paths array\n","    nbnode0 = jj-2\n","    if (jj==rows):\n","        break\n","\n","cn.contract(True)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-a813629e5c4e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#last test june 18th .............\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m#global csp: in test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpyibex\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mcodac\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyibex'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"2goOBgCH_GSR","executionInfo":{"status":"error","timestamp":1624366374437,"user_tz":-120,"elapsed":836,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"891d943d-3662-43ab-e045-a3e06e1068fc"},"source":["#global csp: in test\n","from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","\n","#last tested: june 18\n","#mode2 gcsp\n","#paths during specific intervals\n","\n","# =================== 0. Definitions ====================\n","def loc_area(x1,y1,x2,y2):\n","  # random angle\n","  # aoa_est -+ aoa_confidence\n","  # vector on that angle\n","  area= abs(x2-x1)*abs(y2-y1)\n","  #print(x2,x1,';',y2,y1)\n","  return area \n","\n","def global_csp(nbnode,final_time):\n","    final_timearr=[]\n","    all_sol_est1 = []\n","    nbnode = nbnode-1\n","    #global csp\n","    #run csp\n","    b = all_benchmark_est[nbnode]#data stored in the order of nbnode index\n","    #print('nbnode','b',all_x_ids[nbnode],b)\n","    y = all_y_est[nbnode]\n","    #print('y',all_x_ids[nbnode],y)\n","    theta =  all_theta_est[nbnode]\n","    #print('theta',all_x_ids[nbnode],theta)\n","    heading = all_eh[nbnode]\n","    for i in range (0,len(y)): # for each range and bearing measurement\n","      alpha = cn.create_dom(Interval())\n","      d = cn.create_dom(IntervalVector(2))\n","      r = cn.create_dom(IntervalVector(2))   \n","      cn.add(ctc.dist, [r, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","      cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","      cn.add(ctc.polar, [d,y[i],alpha])   \n","      cn.add(ctc_minus, [b[i],r,d]) \n","    contraction_dt = cn.contract_during(iteration_dt)#contraction_dt = cn.contract_during(iteration_dt) #print(contraction_dt)\n","    #final_time +=contraction_dt        #print(final_time)\n","    #all_x_est[nbnode] = r #using solution update the estimated location of unknown node\n","    sol_est = r\n","    #if r.contains(all_x_truth[nbnode]) :\n","        #print('yes')\n","    area_est = loc_area(r[0][0],r[1][0],r[0][1],r[1][1])\n","    all_area_est.append(area_est)\n","    all_sol_est1.append(r)\n","    if (id_updategsp.get(all_x_ids[nbnode])is None):\n","        id_updategsp[all_x_ids[nbnode]] = 1 \n","        nodeid_locareagsp[all_x_ids[nbnode],';',df.loc[nbnode+1][12],';',1] = area_est  \n","        nodeid_locarea[all_x_ids[nbnode]]= loc_area(r[0][0],r[1][0],r[0][1],r[1][1])\n","        nodeid_b[all_x_ids[nbnode]]= b\n","        nodeid_y[all_x_ids[nbnode]]= y\n","    elif id_updategsp.get(all_x_ids[nbnode]) >0: \n","        id_updategsp[all_x_ids[nbnode]] = 1+id_updategsp[all_x_ids[nbnode]]\n","        print(all_x_ids[nbnode],';',nodeid_locarea.get(all_x_ids[nbnode]))\n","        if area_est == nodeid_locarea.get(all_x_ids[nbnode]):\n","            print('nbnode','b',all_x_ids[nbnode],b,'earlier b', nodeid_b[all_x_ids[nbnode]])\n","            print('nbnode','y',all_x_ids[nbnode],y,'earlier y', nodeid_y[all_x_ids[nbnode]])\n","            print('nbnode','theta',all_x_ids[nbnode],theta)\n","            print(r)\n","        nodeid_b[all_x_ids[nbnode]]= b\n","        nodeid_y[all_x_ids[nbnode]]= y\n","        nodeid_locarea[all_x_ids[nbnode]]= loc_area(r[0][0],r[1][0],r[0][1],r[1][1]) \n","        nodeid_locareagsp[all_x_ids[nbnode],';',df.loc[nbnode+1][12],';',id_updategsp[all_x_ids[nbnode]]] = area_est \n","        #print(nbnode)\n","        #print(id_updategsp)\n","    x1 = float(all_x_truth[nbnode][0])\n","    x2 = float(all_x_truth[nbnode][1])\n","    #print(x1)\n","    #if r.contains([x1,x2]) :\n","        #print('yes')\n","    #else:\n","        #print('no') \n","    del r#refresh p \n","    #nbnode+=1\n","    #all_path_sol.append(all_sol_est)\n","    #print(all_x_ids[nbnode],nodeid_locareagsp) \n","    #sum(final_timearr)\n","    return nbnode\n","\n","#csp with time constraints\n","df = pd. read_excel (r'csp.xlsx', sheet_name='Input')\n","rows = df.shape[0]\n","columns = df.shape[1]\n","rows = 20\n","\n","# =================== 0. Parameters, truth and data ====================\n","#time data\n","dt = 1#time interval of csp problem update\n","iteration_dt = 0.2#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# =============== 1. Defining domains for our variables ================\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","e_y = Interval(-0.01,0.01)\n","e_g = Interval(-0.01,0.01)\n","e_t = Interval(-0.01,0.01)\n","all_area_est =[]\n","all_sol_est=[]\n","xgps_all={}\n","ygps_all={}\n","all_x_gps={}\n","all_gps_radius = {}\n","\n","# =========== global ===========\n","#input data checked\n","#get data from excel of all nodes\n","for i in range(1,rows):\n","    emerg_ids = df.loc[i][1] # emerg id\n","    x_ids = df.loc[i][2] # node id\n","    x_truth= [df.loc[i][3],df.loc[i][4],df.loc[i][11]] # (x,y,heading)#n1\n","    x1 = float(x_truth[0])\n","    x2 = float(x_truth[1])\n","    x_truth= [df.loc[i][3],df.loc[i][4],atan2(x2,x1)] # (x,y,heading)#n1\n","    angle = random.randrange(0, 6)\n","    x_gps = gps_radius*cos(angle)+x1\n","    y_gps = gps_radius*sin(angle)+x2\n","    if xgps_all.get(x_ids) is None:\n","        xgps_all[x_ids] = x_gps\n","        gps_radius = random.randrange(1, 2)*float(df.loc[i][10])\n","        all_gps_radius[x_ids]=gps_radius\n","    if ygps_all.get(x_ids) is None:\n","        ygps_all[x_ids] = y_gps \n","    xy_gps = [Interval(xgps_all[x_ids]+e_g),Interval(ygps_all[x_ids]+e_g)]#estimated locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    if all_x_gps.get(x_ids) is None:\n","        all_x_gps[x_ids]=(xy_gps)#estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","all_theta_est = []\n","all_y_est =[]\n","\n","#benchmarks of each node\n","for j in range(1,rows):\n","    bench_ids = [df.loc[j][5],df.loc[j][2]]#gps measure is taken as the last benchmark\n","    theta_truth = [df.loc[j][9]]#theta\n","    theta1 = float(theta_truth[0])\n","    if theta1!=6.28:    \n","        theta_est = [Interval(theta1+e_t),Interval(0,6.28)]#estimated theta of bench nodes \n","    else:\n","        theta_est =[Interval(0,6.28),Interval(0,6.28)]#estimated theta of bench nodes\n","    all_theta_est.append(theta_est)  \n","    benchmark1_truth =  [df.loc[j][6],df.loc[j][7]] #benchmark locations\n","    bench1 = float(benchmark1_truth[0])\n","    bench2 = float(benchmark1_truth[1])\n","    b1 = [bench1-0.01,bench1+0.01]#estimated locations of bench nodes \n","    b2 = [bench2-0.01,bench2+0.01]#estimated locations of bench nodes \n","    #print(all_x_gps[all_x_ids[j-1]])\n","    g1 = all_x_gps[all_x_ids[j-1]]\n","    benchmark_est = [IntervalVector([b1,b2]),IntervalVector([g1[0],g1[1]])]\n","    y1_truth = [df.loc[j][8]]\n","    y1_est = Interval(float(df.loc[j][8])+e_y) \n","    y2_est = Interval(all_gps_radius[all_x_ids[j-1]]+e_y)\n","    y_est = (y1_est,y2_est)\n","    all_y_est.append(y_est)\n","    all_bench_ids.append(bench_ids)\n","    all_benchmark_est.append(benchmark_est)\n","\n","#heading of  each node\n","all_eh = []\n","for n in range(1,rows):\n","    x11 = xgps_all[all_x_ids[n-1]]\n","    x22 = ygps_all[all_x_ids[n-1]]\n","    heading_gps = atan2(x22,x11)\n","    e_h = Interval(heading_gps).inflate(0.01)\n","    all_eh.append(e_h)\n","\n","# =========== Defining contractors to deal with equations ===========\n","# We use the predefined contractor ctc.dist, no need to build it\n","ctc_plus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a+b-c\")) # a+b=c\n","ctc_minus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a-b-c\")) # a-b=c\n","\n","# =========== Contractor network ===========\n","cn = ContractorNetwork()\n","#input data: checked\n","tdomain = Interval(120,float(df.loc[rows-1][12])) # [t0,tf]\n","t = tdomain.lb()\n","prev_t_obs = 0\n","dt=0\n","jj=1#index where data starts\n","earlier_pathid = []\n","t_ub=120\n","time_path = []\n","all_time_path=[]\n","id_update = {}\n","id_updategsp = {}\n","nodeid_locarea = {}\n","nodeid_locareagsp = {}\n","nodeid_b = {}\n","nodeid_y = {}\n","\n","while float(df.loc[jj][12]) <= tdomain.ub():#while now is below the upper bound of time domain\n","    if float(df.loc[jj][12])<= t_ub: # new calculation update each 120 second\n","        current_pathid = df.loc[jj][14]\n","        if jj==1:  #initial arrived data index      \n","            all_sol_est = []\n","            final_time=0\n","            nbnode0=1\n","            tg =global_csp(nbnode0,final_time)\n","            #print(tg)\n","        else:\n","            #earlier_pathid==current_pathid:#first node       \n","            nbnode0 =tg+2\n","            all_sol_est = []\n","            final_time=0\n","            tg =global_csp(nbnode0,final_time)\n","            #print(tg)\n","        if (jj<=rows-1): jj+=1\n","    else:\n","        #print('yes')\n","        #nbnode = len(path)-nbnode\n","        #all_time_path.append(time_path)\n","        #time_path =[]\n","        t_ub +=120       \n","    #final paths array\n","    nbnode0 = jj-2\n","    if (jj==rows):\n","        break\n","\n","cn.contract(True)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-1a11657efbc1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#global csp: in test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpyibex\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mcodac\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyibex'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n5bVrim3aIUC","executionInfo":{"status":"ok","timestamp":1624366394069,"user_tz":-120,"elapsed":2864,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"44808295-da93-421b-bbcb-2de96826635a"},"source":["pip install pyibex"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pyibex in /usr/local/lib/python3.7/dist-packages (1.9.2)\n","Requirement already satisfied: vibes in /usr/local/lib/python3.7/dist-packages (from pyibex) (0.2.2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mlI-cx9FfWf-","executionInfo":{"status":"ok","timestamp":1624366388016,"user_tz":-120,"elapsed":10924,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"8247f995-b280-4db6-a027-3e223e83443f"},"source":["pip install tubex_lib"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting tubex_lib\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c1/cd/63c0421ca1f9d6007616b0f46c71316fcf92c2de6bb89d29dd2b851987d6/tubex_lib-3.1.1-cp37-cp37m-manylinux2010_x86_64.whl (32.6MB)\n","\u001b[K     |████████████████████████████████| 32.6MB 90kB/s \n","\u001b[?25hCollecting pyibex>=1.9.2\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/8e/4c/d8b0211d903a272e63baa8ae4ef1e7d229a953da49fd841357893e5f9497/pyibex-1.9.2-cp37-cp37m-manylinux2010_x86_64.whl (4.3MB)\n","\u001b[K     |████████████████████████████████| 4.3MB 23.9MB/s \n","\u001b[?25hRequirement already satisfied: pip>=19.0.0 in /usr/local/lib/python3.7/dist-packages (from tubex_lib) (19.3.1)\n","Collecting vibes\n","  Downloading https://files.pythonhosted.org/packages/20/3a/c19179d02310793aae928682a6435f97fe57e892f057048f1624b3675474/vibes-0.2.2.tar.gz\n","Building wheels for collected packages: vibes\n","  Building wheel for vibes (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for vibes: filename=vibes-0.2.2-py2.py3-none-any.whl size=7152 sha256=9d9237f09630c9c4b9c74a1ab23c667f578082c9950b3c740a0c76e3d27f94f2\n","  Stored in directory: /root/.cache/pip/wheels/77/15/2c/f9b26a6b5097b46ab68b2494a1275288f776ebdb0951864301\n","Successfully built vibes\n","Installing collected packages: vibes, pyibex, tubex-lib\n","Successfully installed pyibex-1.9.2 tubex-lib-3.1.1 vibes-0.2.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bJS3fJdfaNzb","executionInfo":{"status":"ok","timestamp":1624366391207,"user_tz":-120,"elapsed":3195,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"a55e1f7b-4fc9-4f6f-c7b5-a2cf23b6fe3d"},"source":["pip install codac"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting codac\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/4c/c6/81e9c2049f72248b0f9c8d9b8dc7e07d6827a13878cae222d39ee5da5417/codac-0.1.3-cp37-cp37m-manylinux2010_x86_64.whl (1.7MB)\n","\r\u001b[K     |▏                               | 10kB 15.4MB/s eta 0:00:01\r\u001b[K     |▍                               | 20kB 21.2MB/s eta 0:00:01\r\u001b[K     |▋                               | 30kB 23.6MB/s eta 0:00:01\r\u001b[K     |▊                               | 40kB 20.1MB/s eta 0:00:01\r\u001b[K     |█                               | 51kB 9.1MB/s eta 0:00:01\r\u001b[K     |█▏                              | 61kB 10.4MB/s eta 0:00:01\r\u001b[K     |█▎                              | 71kB 9.8MB/s eta 0:00:01\r\u001b[K     |█▌                              | 81kB 10.6MB/s eta 0:00:01\r\u001b[K     |█▊                              | 92kB 11.2MB/s eta 0:00:01\r\u001b[K     |██                              | 102kB 9.5MB/s eta 0:00:01\r\u001b[K     |██                              | 112kB 9.5MB/s eta 0:00:01\r\u001b[K     |██▎                             | 122kB 9.5MB/s eta 0:00:01\r\u001b[K     |██▌                             | 133kB 9.5MB/s eta 0:00:01\r\u001b[K     |██▋                             | 143kB 9.5MB/s eta 0:00:01\r\u001b[K     |██▉                             | 153kB 9.5MB/s eta 0:00:01\r\u001b[K     |███                             | 163kB 9.5MB/s eta 0:00:01\r\u001b[K     |███▎                            | 174kB 9.5MB/s eta 0:00:01\r\u001b[K     |███▍                            | 184kB 9.5MB/s eta 0:00:01\r\u001b[K     |███▋                            | 194kB 9.5MB/s eta 0:00:01\r\u001b[K     |███▉                            | 204kB 9.5MB/s eta 0:00:01\r\u001b[K     |████                            | 215kB 9.5MB/s eta 0:00:01\r\u001b[K     |████▏                           | 225kB 9.5MB/s eta 0:00:01\r\u001b[K     |████▍                           | 235kB 9.5MB/s eta 0:00:01\r\u001b[K     |████▋                           | 245kB 9.5MB/s eta 0:00:01\r\u001b[K     |████▊                           | 256kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████                           | 266kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████▏                          | 276kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 286kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 296kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████▊                          | 307kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████                          | 317kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████                          | 327kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████▎                         | 337kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 348kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████▋                         | 358kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 368kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████                         | 378kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 389kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 399kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 409kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████▉                        | 419kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████                        | 430kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 440kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████▍                       | 450kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████▌                       | 460kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 471kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████                       | 481kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 491kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████▎                      | 501kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 512kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████▊                      | 522kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 532kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████                      | 542kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████▎                     | 552kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████▌                     | 563kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 573kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████▉                     | 583kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████                     | 593kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 604kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 614kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████▋                    | 624kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 634kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████                    | 645kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 655kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 665kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 675kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 686kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 696kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 706kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 716kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████▌                  | 727kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████▊                  | 737kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████▉                  | 747kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 757kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 768kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 778kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████▋                 | 788kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 798kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 808kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 819kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 829kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████▋                | 839kB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 849kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████                | 860kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████▏               | 870kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 880kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 890kB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████▊               | 901kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 911kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 921kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 931kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 942kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 952kB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 962kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 972kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████▎             | 983kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 993kB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 1.0MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 1.0MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 1.0MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████▏            | 1.0MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████▍            | 1.0MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████▋            | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 1.1MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████▌          | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████▊          | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████▍         | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████▋         | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 1.2MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 1.3MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▎      | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▌      | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▍     | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▉     | 1.4MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▍    | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▊    | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▎   | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▊   | 1.5MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▎  | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 1.6MB 9.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 1.7MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 1.7MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 1.7MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 1.7MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▋| 1.7MB 9.5MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 1.7MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.7MB 9.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.7MB 9.5MB/s \n","\u001b[?25hRequirement already satisfied: pip>=19.0.0 in /usr/local/lib/python3.7/dist-packages (from codac) (19.3.1)\n","Requirement already satisfied: pyibex>=1.9.2 in /usr/local/lib/python3.7/dist-packages (from codac) (1.9.2)\n","Requirement already satisfied: vibes in /usr/local/lib/python3.7/dist-packages (from pyibex>=1.9.2->codac) (0.2.2)\n","Installing collected packages: codac\n","Successfully installed codac-0.1.3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"1YzvtcnK3Fr8","executionInfo":{"elapsed":713,"status":"error","timestamp":1623913355398,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"1fdfb6bc-0619-43f1-8e88-bd89e7ccdd0a"},"source":["#simple case: three nodes\n","from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","\n","df = pd.read_excel (r'csp.xlsx', sheet_name='Input')\n","# =========== CREATING DATA ===========\n","dt =0.5#time interval of csp problem update\n","iteration_dt = 0.2#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# Initial pose x0=(0,0,2)\n","x_truth = [df.loc[10][3] ,df.loc[10][4],df.loc[10][11]]\n","x2_truth = [df.loc[11][3] ,df.loc[11][4],df.loc[11][11]]\n","x3_truth = [df.loc[12][3] ,df.loc[12][4],df.loc[12][11]]\n","all_truth = [x_truth,x2_truth,x3_truth]\n","\n","x = TubeVector(tdomain, dt, 2) \n","heading = Interval(float(x_truth[2])).inflate(0.01) # measured heading\n","\n","# Set of landmarks initial\n","v_m = [(6,12), (-2,-5), (-3,20), (3,4)]\n","e_x =Interval(-0.01,0.01)\n","\n","x1 = float(x_truth[0])\n","x2 = float(x_truth[1])\n","print(type(float(x1)))\n","\n","# Set of landmarks\n","b = [IntervalVector([[410,410],[150,150]]), \\\n","    IntervalVector([Interval(x1+e_x),Interval(x2+e_x)])]#n0,n1 \n","e_y0 = Interval(-0.01,0.01)\n","\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","e_y = Interval(-0.9,0.9)\n","e_g = Interval(-5,5)\n","e_t = Interval(-0.9,0.9)\n","all_area_est =[]\n","all_sol_est=[]\n","\n","#get data from excel of all nodes\n","for i in range(5,21):\n","    emerg_ids = df.loc[i][1] # emerg id\n","    x_ids = df.loc[i][2] # node id\n","    x_truth= [df.loc[i][3],df.loc[i][4],df.loc[i][11]] # (x,y,heading)#n1\n","    x1 = float(x_truth[0])\n","    x2 = float(x_truth[1])\n","    x_est = [Interval(x1+e_g),Interval(x2+e_g)]#estimated locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    all_x_est.append(x_est)#estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","all_theta_est = []\n","all_y_est =[]\n","\n","#benchmarks of each node\n","for j in range(5,rows-5):\n","    bench_ids = [df.loc[j][5],df.loc[j][2]]#gps measure is taken as the last benchmark\n","    theta_truth = [df.loc[j][9],6.28]#theta\n","    theta1 = float(theta_truth[0])\n","    theta2 = float(theta_truth[1])\n","    if theta_truth[0]!=6.28 and theta_truth[1]==6.28:   \n","        theta_est = [Interval(theta1+e_t),Interval(0,6.28)]#estimated theta of bench nodes \n","    elif theta_truth[0]==6.28 and theta_truth[1]!=6.28:   \n","        theta_est = [Interval(0,6.28),Interval(theta1+e_t)]#estimated theta of bench nodes\n","    else:\n","        theta_est =[Interval(0,6.28),Interval(0,6.28)]#estimated theta of bench nodes\n","    all_theta_est.append(theta_est)  \n","    benchmark1_truth =  [float(df.loc[j+5][6]),float(df.loc[j+5][7])] #benchmark locations\n","    bench1 = (benchmark1_truth[0])\n","    bench2 = (benchmark1_truth[1])\n","    b1 = [bench1-0.01,bench1+0.01]#estimated locations of bench nodes \n","    b2 = [bench2-0.01,bench2+0.01]#estimated locations of bench nodes \n","    g1 = all_x_est[j][0]\n","    g2 = all_x_est[j][1] \n","    benchmark_est = [IntervalVector([b1,b2]),IntervalVector([g1,g2])]\n","    y1_truth = [df.loc[j+5][8]]\n","    y1_est = Interval(float(df.loc[j+5][8])+e_y) \n","    y2_est = Interval(float(df.loc[j+5][10]))+e_y\n","    y_est = (y1_est,y2_est)\n","    all_y_est.append(y_est)\n","    all_bench_ids.append(bench_ids)\n","    all_benchmark_est.append(benchmark_est)\n","\n","print(all_theta_est)\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-5b70f77e2d8f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#simple case: three nodes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpyibex\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mcodac\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyibex'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fXwrT3LX4RSb","executionInfo":{"elapsed":1081,"status":"ok","timestamp":1623915945929,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"1817812f-ca0d-43a2-ae68-80b8ddacd99e"},"source":["from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","\n","#last updated: june 10\n","#time constraints\n","#mode1\n","#testing june 15\n","# =================== 0. Definitions ====================\n","def loc_area(x1,y1,x2,y2):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  # vector on that angle\n","  area= abs(x1-x2)*abs(y1-y2)\n","  return area \n","\n","def forward_tracking(nbnode,final_time):\n","    final_timearr=[]\n","    print('nbnode',nbnode)\n","    nbnode = nbnode-1\n","    #for nbpaths in range(0,len(all_paths)):#for each path in n paths  \n","    #for iter in range(0,len(all_paths[nbpaths])):#for each n node in the n path  \n","    b = all_benchmark_est[nbnode]#data stored in the order of nbnode index\n","    y = all_y_est[nbnode]\n","    theta =  all_theta_est[nbnode]\n","    heading = all_eh[nbnode]\n","    for i in range (0,len(y)): # for each range and bearing measurement\n","        alpha = cn.create_dom(Interval())\n","        d = cn.create_dom(IntervalVector(2))\n","        p = cn.create_dom(IntervalVector(2))   \n","        cn.add(ctc.dist, [p, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","        cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","        cn.add(ctc.polar, [d,y[i],alpha])   \n","        cn.add(ctc_minus, [b[i],p,d]) \n","    contraction_dt = cn.contract_during(iteration_dt)#print(contraction_dt)\n","    final_timearr.append(contraction_dt)#print(final_time)\n","    cn.contract(True)\n","    all_x_est[nbnode] = p #using solution update the estimated location of unknown node\n","    sol_est = p #if receive this id for second or more time, then update the localization using a routine schedule\n","    all_sol_est.append(p)\n","    area_est = loc_area(p[0][0],p[1][0],p[0][1],p[1][1])\n","    all_area_est.append(area_est)\n","    if (id_update.get(all_x_ids[nbnode])is None):\n","        id_update[all_x_ids[nbnode]] = 1 \n","        nodeid_locarea[all_x_ids[nbnode],';',df.loc[nbnode+1][12]] = area_est  \n","    elif id_update.get(all_x_ids[nbnode]) >0: \n","        id_update[all_x_ids[nbnode]] = 1+id_update[all_x_ids[nbnode]]\n","        nodeid_locarea[all_x_ids[nbnode],';',df.loc[nbnode+1][12]] = area_est #print(nodeid_locarea) \n","        #print(nodeid_locarea)\n","    for h in range(0,len(all_bench_ids)):#for all bench_ids\n","        if all_bench_ids[h][0] ==(all_x_ids[nbnode]):\n","            all_benchmark_est[h][0]=p#update the x locations in benchmark array with the estimated location    \n","    #print('p',p) \n","    x1 = float(all_x_truth[nbnode][0])\n","    x2 = float(all_x_truth[nbnode][1])\n","    if p.contains([x1,x2]) :\n","        print('yes')\n","    else:\n","        print('no') \n","    p = None#refresh p \n","    #nbnode+=1\n","    #all_path_sol.append(all_sol_est)\n","    print(all_x_ids[nbnode],all_sol_est) \n","    #sum(final_timearr)\n","    return nbnode\n","\n","def back_tracking(nbnode,final_time):\n","    print('backtrack starts')\n","    final_timearr=[]\n","    backnode = nbnode-1\n","    #nth path in reverse\n","    b = all_benchmark_est[backnode]#data stored in the order of nbnode index\n","    y = all_y_est[backnode]\n","    theta =  all_theta_est[backnode]\n","    heading = all_eh[backnode]\n","    for i in range (0,len(y)): # for each range and bearing measurement\n","        alpha = cn.create_dom(Interval())\n","        d = cn.create_dom(IntervalVector(2))\n","        p = cn.create_dom(IntervalVector(2))   \n","        cn.add(ctc.dist, [p, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","        cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","        cn.add(ctc.polar, [d,y[i],alpha])   \n","        cn.add(ctc_minus, [b[i],p,d]) \n","    contraction_dt = cn.contract_during(iteration_dt)#print(contraction_dt)\n","    final_timearr.append(contraction_dt)#print(final_time)\n","    cn.contract(True)\n","    all_x_est[backnode] = p #using solution update the estimated location of unknown node\n","    sol_est = p #if receive this id for second or more time, then update the localization using a routine schedule\n","    all_sol_est.append(p)\n","    area_est = loc_area(p[0][0],p[1][0],p[0][1],p[1][1])\n","    all_area_est.append(area_est)\n","    if (id_update.get(all_x_ids[backnode])is None):\n","        id_update[all_x_ids[backnode]] = 1 \n","        nodeid_locarea[all_x_ids[backnode],';',df.loc[nbnode+1][12]] = area_est  \n","    elif id_update.get(all_x_ids[backnode]) >0: \n","        id_update[all_x_ids[backnode]] = 1+id_update[all_x_ids[backnode]]\n","        nodeid_locarea[all_x_ids[backnode],';',df.loc[nbnode+1][12]] = area_est #print(nodeid_locarea) \n","        #print(nodeid_locarea)\n","    for h in range(0,len(all_bench_ids)):#for all bench_ids\n","        if all_bench_ids[h][0] ==(all_x_ids[backnode]):\n","            all_benchmark_est[h][0]=p#update the x locations in benchmark array with the estimated location    \n","    #print('p',p) \n","    x1 = float(all_x_truth[backnode][0])\n","    x2 = float(all_x_truth[backnode][1])\n","    if p.contains([x1,x2]) :\n","        print('yes')\n","    else:\n","        print('no') \n","    p = None#refresh p \n","    #nbnode+=1\n","    #all_path_sol.append(all_sol_est)\n","    print(all_x_ids[backnode],all_sol_est) \n","    #sum(final_timearr)\n","    return backnode   \n","\n","#csp with time constraints\n","df = pd. read_excel (r'csp.xlsx', sheet_name='Input')\n","rows = df.shape[0]\n","columns = df.shape[1]\n","rows=20\n","\n","# =================== 0. Parameters, truth and data ====================\n","#time data\n","dt = 1#time interval of csp problem update\n","iteration_dt = 0.2#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# =============== 1. Defining domains for our variables ================\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","e_y = Interval(-0.9,0.7)\n","e_g = Interval(1.5,4)\n","e_t = Interval(-0.01,0.01)\n","all_area_est =[]\n","all_sol_est=[]\n","\n","# =========== global ===========\n","#input data checked\n","#get data from excel of all nodes\n","for i in range(1,rows):\n","    emerg_ids = df.loc[i][1] # emerg id\n","    x_ids = df.loc[i][2] # node id\n","    x_truth= [df.loc[i][3],df.loc[i][4],df.loc[i][11]] # (x,y,heading)#n1\n","    x1 = float(x_truth[0])\n","    x2 = float(x_truth[1])\n","    x_est = [Interval(x1+e_g),Interval(x2+e_g)]#estimated locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    all_x_est.append(x_est)#estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","\n","#print(all_x_est)\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","all_theta_est = []\n","all_y_est =[]\n","\n","#benchmarks of each node\n","for j in range(1,rows):\n","    bench_ids = [df.loc[j][5],df.loc[j][2]]#gps measure is taken as the last benchmark\n","    theta_truth = [df.loc[j][9]]#theta\n","    theta1 = float(theta_truth[0])\n","    if theta1!=6.28:    \n","        theta_est = [Interval(theta1+e_t),Interval(0,6.28)]#estimated theta of bench nodes \n","    else:\n","        theta_est =[Interval(0,6.28),Interval(0,6.28)]#estimated theta of bench nodes\n","    all_theta_est.append(theta_est)  \n","    benchmark1_truth =  [df.loc[j][6],df.loc[j][7]] #benchmark locations\n","    bench1 = float(benchmark1_truth[0])\n","    bench2 = float(benchmark1_truth[1])\n","    b1 = [bench1-0.01,bench1+0.01]#estimated locations of bench nodes #need modification\n","    b2 = [bench2-0.01,bench2+0.01]#estimated locations of bench nodes \n","    g1 = all_x_est[j-1][0]\n","    g2 = all_x_est[j-1][1]\n","    b11  = [Interval(bench1+e_g),Interval(bench2+e_g)]\n","    benchmark_est = [IntervalVector(b11),IntervalVector([g1,g2])]\n","    y1_truth = [df.loc[j][8]]\n","    y1_est = Interval(float(df.loc[j][8])+e_y) \n","    y2_est = Interval(float(df.loc[j][10])+e_y)#need test: the distance from estimate location to actual location\n","    y_est = (y1_est,y2_est)\n","    all_y_est.append(y_est)\n","    all_bench_ids.append(bench_ids)\n","    all_benchmark_est.append(benchmark_est)\n","\n","#heading of  each node\n","all_eh = []\n","for n in range(1,rows):\n","    e_h = Interval(float(df.loc[n][11])).inflate(0.01)\n","    all_eh.append(e_h)\n","\n","# =========== Defining contractors to deal with equations ===========\n","# We use the predefined contractor ctc.dist, no need to build it\n","ctc_plus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a+b-c\")) # a+b=c\n","ctc_minus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a-b-c\")) # a-b=c\n","\n","# =========== Contractor network ===========\n","cn = ContractorNetwork()\n","#input data: checked\n","tdomain = Interval(120,float(df.loc[rows-1][12])) # [t0,tf]\n","t = tdomain.lb()\n","prev_t_obs = 0\n","dt=0\n","jj=1#index where data starts\n","earlier_pathid = []\n","t_ub=120\n","time_path = []\n","all_time_path=[]\n","id_update = {}\n","nodeid_locarea = {}\n","\n","while float(df.loc[jj][12]) <= tdomain.ub():#while now is below the upper bound of time domain\n","    if float(df.loc[jj][12])<= t_ub: # new calculation update each 120 second\n","        current_pathid = df.loc[jj][14]\n","        if jj==1:  #initial arrived data index      \n","            all_sol_est = []\n","            final_time=0\n","            nbnode0=1\n","            tg =forward_tracking(nbnode0,final_time)\n","            #tn =back_tracking(tg,final_time)\n","            #print(tg)\n","        else:\n","            #earlier_pathid==current_pathid:#first node       \n","            nbnode0 =tg+2\n","            all_sol_est = []\n","            final_time=0\n","            tg =forward_tracking(nbnode0,final_time)\n","            #tn =back_tracking(tg,final_time)\n","            #print(tg)\n","        if (jj<=rows-1): jj+=1\n","    else:\n","        #print('yes')\n","        #nbnode = len(path)-nbnode\n","        #all_time_path.append(time_path)\n","        #time_path =[]\n","        t_ub +=120       \n","    #final paths array\n","    nbnode = jj-2\n","    if (jj==rows): \n","        break"],"execution_count":null,"outputs":[{"output_type":"stream","text":["nbnode 1\n","yes\n","820.0 [([822.2738249377631, 827.94661087057] ; [201.2500080215216, 206.9227939543285])]\n","nbnode 2\n","yes\n","924.0 [([819.4910511975768, 825.3755239367014] ; [211.4381249694282, 217.3225977085527])]\n","nbnode 3\n","yes\n","184.0 [([821.5167021269051, 827.168842960057] ; [175.5985695282518, 181.2507103614036])]\n","nbnode 4\n","yes\n","184.0 [([821.5167021269051, 827.168842960057] ; [175.5985695282518, 181.2507103614036])]\n","nbnode 5\n","yes\n","920.0 [([678.8614664737484, 684.4505147657034] ; [203.527786213525, 209.1168345054799])]\n","nbnode 6\n","yes\n","634.0 [([743.9339830479691, 749.4626892576712] ; [196.7865517334421, 202.3152579431441])]\n","nbnode 7\n","yes\n","1036.0 [([778.6859429628808, 784.2086909824035] ; [325.3046610056455, 330.8274090251681])]\n","nbnode 8\n","yes\n","267.0 [([759.0619994910382, 764.8485964041309] ; [154.4526107786376, 160.2392076917302])]\n","nbnode 9\n","no\n","218.0 [([207.4062171895618, 212.1104505204091] ; [393.8642207890304, 398.5684541198777])]\n","nbnode 10\n","no\n","218.0 [([207.4062171895618, 212.1104505204091] ; [393.8642207890304, 398.5684541198777])]\n","nbnode 11\n","no\n","218.0 [([207.4062171895618, 212.1104505204091] ; [393.8642207890304, 398.5684541198777])]\n","nbnode 12\n","no\n","218.0 [([207.4062171895618, 212.1104505204091] ; [393.8642207890304, 398.5684541198777])]\n","nbnode 13\n","no\n","218.0 [([207.4062171895618, 212.1104505204091] ; [393.8642207890304, 398.5684541198777])]\n","nbnode 14\n","no\n","186.0 [([496.0608432456479, 500.0540615564755] ; [300.5025362540235, 304.4957545648511])]\n","nbnode 15\n","no\n","338.0 [([492.5848065972442, 497.4043738581442] ; [468.0429598497706, 472.8625271106707])]\n","nbnode 16\n","no\n","165.0 [([357.7608830902128, 362.4421583670268] ; [463.0112597077905, 467.6925349846045])]\n","nbnode 17\n","no\n","331.0 [([224.2663064170189, 228.9100418749197] ; [409.4085616905906, 414.0522971484913])]\n","nbnode 18\n","no\n","583.0 [([338.5679134729115, 343.1701999894971] ; [347.8622662228745, 352.4645527394601])]\n","nbnode 19\n","no\n","350.0 [([500.4257463739388, 504.5134540964139] ; [300.182027177669, 304.2697349001441])]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"hum_aOgjSLw_","executionInfo":{"elapsed":364,"status":"ok","timestamp":1623862454732,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"1ac7b4e6-2187-4c4c-8c26-610e721637ca"},"source":["import matplotlib.pyplot as plt\n","from matplotlib.patches import Rectangle\n","\n","#define Matplotlib figure and axis\n","fig, ax = plt.subplots()\n","\n","#create simple line plot\n","ax.plot([200,200],[210, 210])\n","\n","[823.8602179041665, 826.3602179041666], [202.836400987925, 205.3364009879251]\n","plt.gca().add_patch(Rectangle((823.8602179041665,202.836400987925),(826.3602179041666-823.8602179041665),205.3364009879251-202.836400987925,\n","                    edgecolor='blue',\n","                    facecolor='none',\n","                    lw=4))\n","#add rectangle\n","plt.gca().add_patch(Rectangle((821.9738249377631,200.9500080215216),(828.24661087057-821.9738249377631),207.2227939543285-200.9500080215216,\n","                    edgecolor='red',\n","                    facecolor='none',\n","                    lw=4))\n","#218\n","#[([207.1062171895617, 212.4104505204091] ; [393.5642207890304, 398.8684541198777])]\n","#add rectangle\n","plt.gca().add_patch(Rectangle((207.1062171895617,393.5642207890304),(212.4104505204091-207.1062171895617),398.8684541198777-393.5642207890304,\n","                    edgecolor='red',\n","                    facecolor='none',\n","                    lw=4))\n","plt.annotate(\"n1\",(207.1062171895617,393.5642207890304) )\n","plt.annotate(\"n2\",(207.00833385498532,393.46633745445394))\n","\n","#display plot\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"POgwCOrwK7DR"},"source":["import xlwt\n","\n","x=1\n","y=2\n","z=3\n","\n","list1=[2.34,4.346,4.234]\n","\n","book = xlwt.Workbook(encoding=\"utf-8\")\n","\n","sheet1 = book.add_sheet(\"Sheet 1\")\n","\n","sheet1.write(0, 0, \"Display\")\n","sheet1.write(1, 0, \"Dominance\")\n","sheet1.write(2, 0, \"Test\")\n","\n","sheet1.write(0, 1, x)\n","sheet1.write(1, 1, y)\n","sheet1.write(2, 1, z)\n","\n","sheet1.write(4, 0, \"Stimulus Time\")\n","sheet1.write(4, 1, \"Reaction Time\")\n","\n","i=4\n","\n","for n in list1:\n","    i = i+1\n","    sheet1.write(i, 0, n)\n","\n","\n","\n","book.save(\"trial.xls\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JB_XSo74VuW2","executionInfo":{"elapsed":225,"status":"ok","timestamp":1623926144410,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"b565c363-73f3-419d-e1fc-01480a0f09a6"},"source":["import random\n","\n","# random number of length 4\n","num1 = random.randint(1000, 9999)\n","# random number of length 4 with step 2\n","num2 = random.randrange(1000, 10000, 2)\n","print(num1, num2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3780 3728\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":374},"id":"6ko8YpgqYdi4","executionInfo":{"elapsed":558,"status":"error","timestamp":1623741603828,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"304b42d2-f168-42e1-eac9-dc7404fca044"},"source":["from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","#last working with backtrack: june 9th\n","\n","def loc_area(x1,y1,x2,y2):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  # vector on that angle\n","  area= abs(x1-x2)*abs(y1-y2)\n","  return area \n","\n","df = pd. read_excel (r'Sample Excel File.xlsx', sheet_name='Input')\n","rows = df.shape[0]\n","columns = df.shape[1]\n","\n","# =================== 0. Parameters, truth and data ====================\n","#time data\n","dt = 1#time interval of csp problem update\n","iteration_dt = 100#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","e_y = Interval(-0.01,0.01)\n","all_area_est =[]\n","all_sol_est=[]\n","earlier_pathid = []\n","\n","#get data from excel of all nodes\n","for i in range(5,rows):\n","    emerg_ids = df.loc[i][1] # emerg id\n","    x_ids = df.loc[i][2] # node id\n","    x_truth= [df.loc[i][3],df.loc[i][4],df.loc[i][13]] # (x,y,heading)#n1\n","    x_est = [x_truth[0]-0.01,x_truth[0]+0.01],[x_truth[1]-0.01,x_truth[1]+0.01]#estimated locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    all_x_est.append(x_est)#estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","    current_pathid =  df.loc[i][14]\n","    if earlier_pathid == []:\n","        path.append(df.loc[i][2])\n","        earlier_pathid = current_pathid\n","    elif earlier_pathid==current_pathid:#first node\n","        path.append(df.loc[i][2])\n","        earlier_pathid = current_pathid\n","    else:\n","        all_paths.append(path)#previous path append to all paths before starting a new path\n","        path = []\n","        path.append(df.loc[i][2])\n","        earlier_pathid = current_pathid\n","all_paths.append(path) #final paths array   \n","\n","# =============== 1. Defining domains for our variables ================\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","all_theta_est = []\n","all_y_est =[]\n","\n","#benchmarks of each node\n","for j in range(5,rows):\n","    bench_ids = [df.loc[j][5],df.loc[j][2]]#gps measure is taken as the last benchmark\n","    theta_truth = [df.loc[j][9],3.14]#theta\n","    e_t = Interval(-0.01,0.01)\n","    if theta_truth[0]!=3.14 and theta_truth[1]==3.14:   \n","        theta_est = [Interval(theta_truth[0]+e_t),Interval(0,3.14)]#estimated theta of bench nodes \n","    elif theta_truth[0]==3.14 and theta_truth[1]!=3.14:   \n","        theta_est = [Interval(0,3.14),Interval(theta_truth[0]+e_t)]#estimated theta of bench nodes\n","    else:\n","        theta_est =[Interval(0,3.14),Interval(0,3.14)]#estimated theta of bench nodes\n","    all_theta_est.append(theta_est)  \n","    benchmark1_truth =  [df.loc[j][6],df.loc[j][7]] #benchmark locations\n","    b1 = [benchmark1_truth[0]-0.01,benchmark1_truth[0]+0.01]#estimated locations of bench nodes \n","    b2 = [benchmark1_truth[1]-0.01,benchmark1_truth[1]+0.01]#estimated locations of bench nodes \n","    g1 = all_x_est[j-5][0]\n","    g2 = all_x_est[j-5][1] \n","    benchmark_est = [IntervalVector([b1,b2]),IntervalVector([g1,g2])]\n","    y1_truth = [df.loc[j][8]]\n","    y1_est = Interval(df.loc[j][8]+e_y) \n","    y2_est = Interval(df.loc[j][10])+e_y\n","    y_est = (y1_est,y2_est)\n","    all_y_est.append(y_est)\n","    all_bench_ids.append(bench_ids)\n","    all_benchmark_est.append(benchmark_est)\n","\n","x = TubeVector(tdomain, dt, 2) #not sure whether this is used\n","all_eh = []\n","\n","#heading of  each node\n","for n in range(5,rows):\n","    e_h = Interval(df.loc[n][11]).inflate(0.01)\n","    all_eh.append(e_h)\n","#print(all_eh)\n","#print(all_x_est)\n","\n","t = [0.3, 1.5, 2.0, 2.5]   #set of time stamps of measures\n","\n","# =========== 2. Defining contractors to deal with equations ===========\n","# We use the predefined contractor ctc.dist, no need to build it\n","ctc_plus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a+b-c\")) # a+b=c\n","ctc_minus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a-b-c\")) # a-b=c\n","\n","# =============== 3. Adding the contractors to a network ===============\n","t = tdomain.lb()\n","prev_t_obs = t\n","iter = 0;\n","\n","#find n1 location, p\n","cn = ContractorNetwork()\n","nbnode=0\n","#2 minute time constraint{#consider this last\n","# =========== FORWARDTRACKING ===========\n","#computing total nbnodes\n","for nbpaths in range(0,len(all_paths)):#for each path in n paths  \n","    for iter in range(0,len(all_paths[nbpaths])):#for each n node in the n path  \n","        b = all_benchmark_est[nbnode]#data stored in the order of nbnode index\n","        y = all_y_est[nbnode]\n","        theta =  all_theta_est[nbnode]\n","        heading = all_eh[nbnode]\n","        for i in range (0,len(y)): # for each range and bearing measurement\n","            alpha = cn.create_dom(Interval())\n","            d = cn.create_dom(IntervalVector(2))\n","            p = cn.create_dom(IntervalVector(2))   \n","            cn.add(ctc.dist, [p, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","            cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","            cn.add(ctc.polar, [d,y[i],alpha])   \n","            cn.add(ctc_minus, [b[i],p,d]) \n","        cn.contract(True)\n","        all_x_est[nbnode] = p #using solution update the estimated location of unknown node\n","        sol_est = p\n","        area_est = loc_area(p[0][0],p[1][0],p[0][1],p[1][1])\n","        all_area_est.append(area_est)\n","        all_sol_est.append(p)\n","        for h in range(0,len(all_bench_ids)):#for all bench_ids\n","                y =  round(all_x_ids[nbnode])\n","                if all_bench_ids[h][0] == str(round(all_x_ids[nbnode])):\n","                    all_bench_ids[h][0]=p#update the x locations in benchmark array with the estimated location\n","        #print('p',p) \n","        #if p.contains(all_x_truth[nbnode]) :\n","            #print('yes')\n","        #else:\n","            #print('no') \n","        p = None#refresh p \n","        nbnode+=1\n","print(nbnode)\n","# =========== BACkTRACKING ===========\n","backnode = nbnode-1\n","#nth path in reverse\n","for nbpaths in range(len(all_paths)-1,0,-1):#for each path in n paths \n","    for iter in range(len(all_paths[nbpaths])-1,0,-1):#for each n node in the n path  \n","        #run csp\n","        b = all_benchmark_est[backnode]#data stored in the order of nbnode index\n","        y = all_y_est[backnode]\n","        theta =  all_theta_est[backnode]\n","        heading = all_eh[backnode]\n","        for i in range (0,len(y)): # for each range and bearing measurement\n","            alpha = cn.create_dom(Interval())\n","            d = cn.create_dom(IntervalVector(2))\n","            pb = cn.create_dom(IntervalVector(2))   \n","            cn.add(ctc.dist, [pb, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","            cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","            cn.add(ctc.polar, [d,y[i],alpha])   \n","            cn.add(ctc_minus, [b[i],pb,d]) \n","        cn.contract(True)\n","        #if pb.contains(all_x_truth[backnode]) :\n","            #print('yes')\n","        if pb is not None:\n","            b_area_est = loc_area(pb[0][0],pb[1][0],pb[0][1],pb[1][1])\n","            if (all_area_est[backnode]> b_area_est):\n","                all_area_est[backnode] = b_area_est   \n","                print(all_area_est)   \n","                all_sol_est[backnode] =pb#update with the least loc area solution for unknown position \n","            for hh in range(0,len(all_bench_ids)):#for all bench_ids\n","                yb =  round(all_x_ids[backnode])\n","                if all_bench_ids[hh][0] == str(round(all_x_ids[backnode])):\n","                    all_bench_ids[hh][0]=pb#update the x locations in benchmark array with the estimated location   \n","# =========== SOLUTION ===========\n","#cn.contract(True) # lets the solver run the remaining contractions\n","\n","#2 minute time constraint}\n","# =========== RESULTS ===========\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-dfdd7c1e7cf9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0marea\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mread_excel\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34mr'Sample Excel File.xlsx'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msheet_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Input'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0mrows\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    294\u001b[0m                 )\n\u001b[1;32m    295\u001b[0m                 \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFutureWarning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36mread_excel\u001b[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, mangle_dupe_cols)\u001b[0m\n\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 304\u001b[0;31m         \u001b[0mio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    305\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m         raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path_or_buffer, engine)\u001b[0m\n\u001b[1;32m    865\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstringify_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    866\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 867\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engines\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_io\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    868\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    869\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__fspath__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_xlrd.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0merr_msg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Install xlrd >= 1.0.0 for Excel support\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mimport_optional_dependency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"xlrd\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextra\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    352\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 353\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    354\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    355\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_xlrd.py\u001b[0m in \u001b[0;36mload_workbook\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_contents\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xlrd/__init__.py\u001b[0m in \u001b[0;36mopen_workbook\u001b[0;34m(filename, logfile, verbosity, use_mmap, file_contents, encoding_override, formatting_info, on_demand, ragged_rows)\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile_contents\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mpeeksz\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m             \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpeeksz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpeek\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34mb\"PK\\x03\\x04\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# a ZIP file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'Sample Excel File.xlsx'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":374},"id":"bwfmBFbZ--wz","executionInfo":{"elapsed":587,"status":"error","timestamp":1623572363960,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"25996a96-687e-445e-9759-d2dc4d8756cf"},"source":["#globalcsp2\n","from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","#last updated: june 10\n","#time constraints\n","# =================== 0. Definitions ====================\n","def loc_area(x1,y1,x2,y2):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  # vector on that angle\n","  area= abs(x1-x2)*abs(y1-y2)\n","  return area \n","  \n","def global_csp(start_node,nbnodes_time_interval,final_time):\n","    #global csp\n","    for nbnode in range(start_node,nbnodes_time_interval):\n","        #run csp\n","        b = all_benchmark_est[nbnode]#data stored in the order of nbnode index\n","        y = all_y_est[nbnode]\n","        theta =  all_theta_est[nbnode]\n","        heading = all_eh[nbnode]\n","        for i in range (0,len(y)): # for each range and bearing measurement\n","            alpha = cn.create_dom(Interval())\n","            d = cn.create_dom(IntervalVector(2))\n","            r = cn.create_dom(IntervalVector(2))   \n","            cn.add(ctc.dist, [r, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","            cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","            cn.add(ctc.polar, [d,y[i],alpha])   \n","            cn.add(ctc_minus, [b[i],r,d]) \n","        contraction_dt = cn.contract_during(iteration_dt)\n","        #print(contraction_dt)\n","        final_time +=contraction_dt\n","        #print(final_time)\n","        if iteration_dt>contraction_dt:\n","            time.sleep(iteration_dt-contraction_dt) # iteration delay\n","        all_x_est[nbnode] = r #using solution update the estimated location of unknown node\n","        sol_est = r\n","        #if r.contains(all_x_truth[nbnode]) :\n","            #print('yes')\n","        area_est = loc_area(r[0][0],r[1][0],r[0][1],r[1][1])\n","        all_area_est.append(area_est)\n","        all_sol_est.append(r)\n","    print(all_sol_est)\n","    return final_time\n","\n","#csp with time constraints\n","df = pd. read_excel (r'globalcsp.xlsx', sheet_name='Input')\n","rows = df.shape[0]\n","columns = df.shape[1]\n","\n","# =================== 0. Parameters, truth and data ====================\n","#time data\n","dt = 1#time interval of csp problem update\n","iteration_dt = 0.2#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# =============== 1. Defining domains for our variables ================\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","e_y = Interval(-0.01,0.01)\n","e_g = Interval(-0.9,0.9)\n","all_area_est =[]\n","all_sol_est=[]\n","\n","# =========== global ===========\n","#get data from excel of all nodes\n","for i in range(5,rows):\n","    emerg_ids = df.loc[i][1] # emerg id\n","    x_ids = df.loc[i][2] # node id\n","    x_truth= [df.loc[i][3],df.loc[i][4],df.loc[i][13]] # (x,y,heading)#n1\n","    x_est = [ Interval(x_truth[0]+e_g) ,Interval(x_truth[1]+e_g)]#estimated locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    all_x_est.append(x_est)#estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","all_theta_est = []\n","all_y_est =[]\n","\n","#benchmarks of each node\n","for j in range(5,rows):\n","    bench_ids = [df.loc[j][5],df.loc[j][2]]#gps measure is taken as the last benchmark\n","    theta_truth = [df.loc[j][9],3.14]#theta\n","    e_t = Interval(-0.01,0.01)\n","    if theta_truth[0]!=3.14 and theta_truth[1]==3.14:   \n","        theta_est = [Interval(theta_truth[0]+e_t),Interval(0,3.14)]#estimated theta of bench nodes \n","    elif theta_truth[0]==3.14 and theta_truth[1]!=3.14:   \n","        theta_est = [Interval(0,3.14),Interval(theta_truth[0]+e_t)]#estimated theta of bench nodes\n","    else:\n","        theta_est =[Interval(0,3.14),Interval(0,3.14)]#estimated theta of bench nodes\n","    all_theta_est.append(theta_est)  \n","    benchmark1_truth =  [df.loc[j][6],df.loc[j][7]] #benchmark locations\n","    b1 = [benchmark1_truth[0]-0.01,benchmark1_truth[0]+0.01]#estimated locations of bench nodes \n","    b2 = [benchmark1_truth[1]-0.01,benchmark1_truth[1]+0.01]#estimated locations of bench nodes \n","    g1 = all_x_est[j-5][0]\n","    g2 = all_x_est[j-5][1] \n","    benchmark_est = [IntervalVector([b1,b2]),IntervalVector([g1,g2])]\n","    y1_truth = [df.loc[j][8]]\n","    y1_est = Interval(df.loc[j][8]+e_y) \n","    y2_est = Interval(df.loc[j][10])+e_y\n","    y_est = (y1_est,y2_est)\n","    all_y_est.append(y_est)\n","    all_bench_ids.append(bench_ids)\n","    all_benchmark_est.append(benchmark_est)\n","\n","#heading of  each node\n","all_eh = []\n","for n in range(5,rows):\n","    e_h = Interval(df.loc[n][11]).inflate(0.01)\n","    all_eh.append(e_h)\n","\n","# =========== Defining contractors to deal with equations ===========\n","# We use the predefined contractor ctc.dist, no need to build it\n","ctc_plus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a+b-c\")) # a+b=c\n","ctc_minus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a-b-c\")) # a-b=c\n","\n","# =========== Contractor network ===========\n","cn = ContractorNetwork()\n","\n","tdomain = Interval(120,3100) # [t0,tf]\n","t = tdomain.lb()\n","prev_t_obs = 0\n","dt=0\n","jj=5#index where data starts\n","earlier_pathid = []\n","t_ub=120\n","time_path = []\n","all_time_path=[]\n","\n","while float(df.loc[jj][12]) < tdomain.ub():\n","    if float(df.loc[jj][12])<= t_ub: # new observation each 120 second\n","        #print(float(df.loc[jj][12]))\n","        #find paths during this specfic interval\n","        #print(float(df.loc[jj][12])<120)\n","        current_pathid = df.loc[jj][14]\n","        if jj==5:  #initial index of data      \n","            time_path.append(df.loc[jj][2])\n","            path.append(df.loc[jj][2])\n","            earlier_pathid = current_pathid\n","        elif earlier_pathid==current_pathid:#first node       \n","            time_path.append(df.loc[jj][2])\n","            path.append(df.loc[jj][2])\n","            earlier_pathid = current_pathid\n","        else:\n","            all_paths.append(path)#previous path append to all paths before starting a new path\n","            path = []\n","            path.append(df.loc[jj][2])\n","            time_path.append(df.loc[jj][2])\n","            earlier_pathid = current_pathid\n","        if (jj<=rows-1): jj+=1\n","    else:\n","        #print('yes')\n","        all_time_path.append(time_path)\n","        time_path =[]\n","        t_ub +=120       \n","     #final paths array\n","    nbnode = jj-5\n","    if (jj==rows): \n","        break\n","all_paths.append(path)\n","\n","print(len(all_time_path))\n","start_node=0\n","for hh in range(0,len(all_time_path)):\n","    all_sol_est = []\n","    final_time=0\n","    print((all_time_path[hh]))\n","    nbnodes_time_interval=len(all_time_path[hh])+start_node\n","    tn = global_csp(start_node,nbnodes_time_interval,final_time)\n","    print('normal',tn)\n","    start_node+=len(all_time_path[hh])"],"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-22759a8e157b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;31m#csp with time constraints\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mread_excel\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34mr'globalcsp.xlsx'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msheet_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Input'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m \u001b[0mrows\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    294\u001b[0m                 )\n\u001b[1;32m    295\u001b[0m                 \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFutureWarning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36mread_excel\u001b[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, mangle_dupe_cols)\u001b[0m\n\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 304\u001b[0;31m         \u001b[0mio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    305\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m         raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path_or_buffer, engine)\u001b[0m\n\u001b[1;32m    865\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstringify_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    866\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 867\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engines\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_io\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    868\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    869\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__fspath__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_xlrd.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0merr_msg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Install xlrd >= 1.0.0 for Excel support\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mimport_optional_dependency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"xlrd\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextra\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    352\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 353\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    354\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    355\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_xlrd.py\u001b[0m in \u001b[0;36mload_workbook\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_contents\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xlrd/__init__.py\u001b[0m in \u001b[0;36mopen_workbook\u001b[0;34m(filename, logfile, verbosity, use_mmap, file_contents, encoding_override, formatting_info, on_demand, ragged_rows)\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile_contents\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mpeeksz\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m             \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpeeksz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpeek\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34mb\"PK\\x03\\x04\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# a ZIP file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'globalcsp.xlsx'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wj1aMIxqOFbI","executionInfo":{"elapsed":768,"status":"ok","timestamp":1623342697153,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"3063c5d9-786b-4412-aea4-f3d3d6887e58"},"source":["#global csp \n","from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","\n","df = pd. read_excel (r'Sample Excel File.xlsx', sheet_name='Input')\n","rows = df.shape[0]\n","columns = df.shape[1]\n","\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","e_y = Interval(-0.01,0.01)\n","all_area_est =[]\n","all_sol_est=[]\n","#get data from excel of all nodes\n","earlier_pathid = []\n","\n","for i in range(5,rows):\n","    emerg_ids = df.loc[i][1] # emerg id\n","    x_ids = df.loc[i][2] # node id\n","    x_truth= [df.loc[i][3],df.loc[i][4],df.loc[i][13]] # (x,y,heading)#n1\n","    x_est = [x_truth[0]-0.01,x_truth[0]+0.01],[x_truth[1]-0.01,x_truth[1]+0.01]#estimated locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    all_x_est.append(x_est)#estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","    current_pathid =  df.loc[i][14]\n","    if earlier_pathid == []:\n","        path.append(df.loc[i][2])\n","        earlier_pathid = current_pathid\n","    elif earlier_pathid==current_pathid:#first node\n","        path.append(df.loc[i][2])\n","        earlier_pathid = current_pathid\n","    else:\n","        all_paths.append(path)#previous path append to all paths before starting a new path\n","        path = []\n","        path.append(df.loc[i][2])\n","        earlier_pathid = current_pathid\n","all_paths.append(path) #final paths array   \n","\n","# =============== 1. Defining domains for our variables ================\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","all_theta_est = []\n","all_y_est =[]\n","\n","#benchmarks of each node\n","for j in range(5,rows):\n","    bench_ids = [df.loc[j][5],df.loc[j][2]]#gps measure is taken as the last benchmark\n","    theta_truth = [df.loc[j][9],3.14]#theta\n","    e_t = Interval(-0.01,0.01)\n","    if theta_truth[0]!=3.14 and theta_truth[1]==3.14:   \n","        theta_est = [Interval(theta_truth[0]+e_t),Interval(0,3.14)]#estimated theta of bench nodes \n","    elif theta_truth[0]==3.14 and theta_truth[1]!=3.14:   \n","        theta_est = [Interval(0,3.14),Interval(theta_truth[0]+e_t)]#estimated theta of bench nodes\n","    else:\n","        theta_est =[Interval(0,3.14),Interval(0,3.14)]#estimated theta of bench nodes\n","    all_theta_est.append(theta_est)  \n","    benchmark1_truth =  [df.loc[j][6],df.loc[j][7]] #benchmark locations\n","    b1 = [benchmark1_truth[0]-0.01,benchmark1_truth[0]+0.01]#estimated locations of bench nodes \n","    b2 = [benchmark1_truth[1]-0.01,benchmark1_truth[1]+0.01]#estimated locations of bench nodes \n","    g1 = all_x_est[j-5][0]\n","    g2 = all_x_est[j-5][1] \n","    benchmark_est = [IntervalVector([b1,b2]),IntervalVector([g1,g2])]\n","    y1_truth = [df.loc[j][8]]\n","    y1_est = Interval(df.loc[j][8]+e_y) \n","    y2_est = Interval(df.loc[j][10])+e_y\n","    y_est = (y1_est,y2_est)\n","    all_y_est.append(y_est)\n","    all_bench_ids.append(bench_ids)\n","    all_benchmark_est.append(benchmark_est)\n","\n","#global csp\n","for nbnode in range(0,rows-5):\n","    #run csp\n","    b = all_benchmark_est[nbnode]#data stored in the order of nbnode index\n","    y = all_y_est[nbnode]\n","    theta =  all_theta_est[nbnode]\n","    heading = all_eh[nbnode]\n","    for i in range (0,len(y)): # for each range and bearing measurement\n","        alpha = cn.create_dom(Interval())\n","        d = cn.create_dom(IntervalVector(2))\n","        r = cn.create_dom(IntervalVector(2))   \n","        cn.add(ctc.dist, [r, b[i], y[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","        cn.add(ctc_plus, [theta[i], heading, alpha])#theta = x3+y2\n","        cn.add(ctc.polar, [d,y[i],alpha])   \n","        cn.add(ctc_minus, [b[i],r,d]) \n","    cn.contract(True)\n","    all_x_est[nbnode] = r #using solution update the estimated location of unknown node\n","    sol_est = r\n","    #if r.contains(all_x_truth[nbnode]) :\n","        #print('yes')\n","    area_est = loc_area(r[0][0],r[1][0],r[0][1],r[1][1])\n","    all_area_est.append(area_est)\n","    all_sol_est.append(r)\n","print(all_sol_est)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[([396.29011309507, 396.8185665701264] ; [79.28039832908019, 79.60944155067536]), ([329.0460965133353, 330.1893570389648] ; [116.3541191970363, 117.1490112580835]), ([328.1882714389994, 329.1190913835198] ; [141.1868242591383, 141.8718920908429]), ([386.9288223999904, 387.0916316494119] ; [100.8708513318102, 100.9822255704967]), ([385.0143192757639, 385.2740405699384] ; [49.14944946237584, 49.30599026982175]), ([416.3139483693291, 417.7861401100012] ; [207.3580172459599, 208.4898738009723]), ([312.0871789291443, 312.7525710154551] ; [192.547708970663, 193.1006052817567]), ([418.6143058429728, 419.9633926311782] ; [174.6267323722349, 175.6081889132081]), ([494.2490305724529, 495.725559559569] ; [304.3995358756311, 305.6215569766416]), ([430.7767115096391, 431.6039967526194] ; [257.3213611399617, 258.0000174135574]), ([499.6532152050531, 499.7387165602134] ; [247.9891329647057, 248.0591908378193]), ([361.3876830498587, 363.1383028659287] ; [360.3460398423803, 362.0940602071132]), ([430.7767115096391, 431.6039967526194] ; [257.3213611399617, 258.0000174135574]), ([201.3955281731116, 202.7047954867424] ; [357.1529422106436, 358.7849474047056]), ([201.3955281731116, 202.7047954867424] ; [357.1529422106436, 358.7849474047056]), ([202.2082808509632, 203.2785266364041] ; [247.642261702018, 248.8022023745986]), ([251.2347323406199, 252.5302187591925] ; [220.4187581021246, 221.6477115870695]), ([318.8691509008984, 319.4643960667674] ; [154.3688562256697, 154.8249847463988]), ([318.8691509008984, 319.4643960667674] ; [154.3688562256697, 154.8249847463988]), ([251.2347323406199, 252.5302187591925] ; [220.4187581021246, 221.6477115870695]), ([251.2347323406199, 252.5302187591925] ; [220.4187581021246, 221.6477115870695]), ([318.8691509008984, 319.4643960667674] ; [154.3688562256697, 154.8249847463988]), ([407.8776875636348, 409.2342178096823] ; [304.9753406573898, 306.1834305062282]), ([407.8776875636348, 409.2342178096823] ; [304.9753406573898, 306.1834305062282]), ([418.6143058429728, 419.9633926311782] ; [174.6267323722349, 175.6081889132081]), ([446.8011618224425, 447.5928855113077] ; [80.41288253060439, 80.89382602895833]), ([409.1102513514084, 410.3118802598146] ; [106.9198386984055, 107.6968943477344]), ([201.3955281731116, 202.7047954867424] ; [357.1529422106436, 358.7849474047056]), ([201.3955281731116, 202.7047954867424] ; [357.1529422106436, 358.7849474047056]), ([202.2082808509632, 203.2785266364041] ; [247.642261702018, 248.8022023745986]), ([202.2082808509632, 203.2785266364041] ; [247.642261702018, 248.8022023745986]), ([318.8691509008984, 319.4643960667674] ; [154.3688562256697, 154.8249847463988]), ([430.7767115096391, 431.6039967526194] ; [257.3213611399617, 258.0000174135574]), ([242.2322296656684, 243.0845111478506] ; [198.4926393368734, 199.27995771349]), ([242.2322296656684, 243.0845111478506] ; [198.4926393368734, 199.27995771349]), ([201.3955281731116, 202.7047954867424] ; [357.1529422106436, 358.7849474047056]), ([201.3955281731116, 202.7047954867424] ; [357.1529422106436, 358.7849474047056]), ([318.8691509008984, 319.4643960667674] ; [154.3688562256697, 154.8249847463988]), ([318.8691509008984, 319.4643960667674] ; [154.3688562256697, 154.8249847463988])]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"onYGhLH-Tfgm","executionInfo":{"elapsed":60479,"status":"ok","timestamp":1623750581003,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"16abf248-bdd7-48dc-eae9-477228c2d02c"},"source":["from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","\n","# =========== CREATING DATA ===========\n","dt = 0.05\n","iteration_dt = 0.2\n","tdomain = Interval(0,15) # [t0,tf]\n","\n","# Initial pose x0=(0,0,2)\n","x0 = (0,0,2)\n","\n","# System input\n","u = Trajectory(tdomain, TFunction(\"3*(sin(t)^2)+t/100\"), dt)\n","\n","# Noise\n","i_n = Interval(-0.03,0.03) # the noises are known to be bounded by i_n\n","\n","n_u = RandTrajectory(tdomain, dt, i_n) # input noise\n","n_theta = RandTrajectory(tdomain, dt, i_n) # heading noise\n","\n","# Actual trajectories (state + derivative)\n","v_truth = TrajectoryVector(3)\n","x_truth = TrajectoryVector(3)\n","v_truth[2] = u + n_u\n","x_truth[2] = v_truth[2].primitive() + x0[2]\n","v_truth[0] = 10*cos(x_truth[2])\n","v_truth[1] = 10*sin(x_truth[2])\n","x_truth[0] = v_truth[0].primitive() + x0[0]\n","x_truth[1] = v_truth[1].primitive() + x0[1]\n","\n","# Bounded trajectories (dead reckoning)\n","v = TubeVector(tdomain, dt, 3)\n","x = TubeVector(tdomain, dt, 3)\n","v[2] = Tube(u, dt).inflate(i_n.rad()) # command u with bounded uncertainties\n","x[2] = Tube(x_truth[2]+n_theta, dt).inflate(i_n.rad()) # heading measurement with bounded uncertainties\n","v[0] = 10*cos(x[2])\n","v[1] = 10*sin(x[2])\n","x = v.primitive()+IntervalVector(x0) # dead reckoning\n","\n","# Set of landmarks\n","v_m = [ (6,12), (-2,-5), (-3,20), (3,4) ]\n","\n","# =========== CONTRACTOR NETWORK ===========\n","\n","v_m_boxes = [IntervalVector(2) for _ in v_m]\n","\n","# Contractor Network:\n","\n","cn = ContractorNetwork()\n","\n","t = tdomain.lb()\n","prev_t_obs = t\n","\n","while t < tdomain.ub():\n","\n","  if t-prev_t_obs > 2*dt: # new observation each 2*delta\n","    \n","    # Creating new observation to a random landmark\n","\n","    landmark_id = random.randint(0,len(v_m)-1) # a random landmark is perceived\n","\n","    pos_x = x_truth(t)[0:2]\n","    pos_b = v_m[landmark_id]\n","\n","    yi = Interval(sqrt(pow(pos_x[0]-pos_b[0],2)+pow(pos_x[1]-pos_b[1],2)))\n","    yi.inflate(0.03) # adding range bounded uncertainty\n","\n","    prev_t_obs = t\n","\n","    # Adding related observation constraints to the network\n","\n","    # Alias (for ease of reading)\n","    b = v_m_boxes[landmark_id]\n","\n","    # Intermediate variables\n","    ti = Interval(t)\n","    xi = IntervalVector(3)\n","\n","    # Contractors\n","    cn.add(ctc.eval, [ti, xi, x, v])\n","    cn.add(ctc.dist, [xi[0], xi[1], b[0], b[1], yi])\n","\n","  contraction_dt = cn.contract_during(iteration_dt)\n","  if iteration_dt>contraction_dt:\n","    time.sleep(iteration_dt-contraction_dt) # iteration delay\n","  t+=dt\n","\n","cn.contract(True) # lets the solver run the remaining contractions"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.000476"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":374},"id":"lELNGYPrKV33","executionInfo":{"elapsed":549,"status":"error","timestamp":1623750515001,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"c57aab04-5afb-4b96-9818-0f1ed0f276bc"},"source":["from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","\n","df = pd. read_excel (r'simple.xlsx', sheet_name='sheet1')\n","rows = df.shape[0]\n","columns = df.shape[1]\n","\n","# =================== 0. Parameters, truth and data ====================\n","#time data\n","dt = 1#time interval of csp problem update\n","iteration_dt = 15#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# Truth (unknown pose)\n","all_x_truth=[]\n","all_x_est=[]\n","x_as_bench = []     #x as a benchmark node \n","all_x_ids = []\n","all_emerg_ids = []\n","all_paths = []\n","path = []\n","\n","#get data from excel of all nodes\n","for i in range(0,rows):\n","    emerg_ids = df.loc[i][0] # emerg id\n","    x_ids = df.loc[i][1] # node id\n","    x_truth= [df.loc[i][2],df.loc[i][3],df.loc[i][14]] # (x,y,heading)#n1\n","    x_est = IntervalVector([[x_truth[0]-0.01,x_truth[0]+0.01],[x_truth[1]-0.01,x_truth[1]+0.01]])#estimated locations of nodes \n","    all_x_ids.append(x_ids)   \n","    all_x_truth.append(x_truth)\n","    all_x_est.append(x_est)#estimated locations of nodes  \n","    all_emerg_ids.append(emerg_ids)\n","    if emerg_ids == all_emerg_ids[len(all_emerg_ids)-2]:#first node\n","        path.append(df.loc[i][1])\n","    else:\n","        all_paths.append(path)#previous path append to all paths before starting a new path\n","        path = []\n","        path.append(df.loc[i][1])\n","all_paths.append(path) #final paths array   \n","\n","# =============== 1. Defining domains for our variables ================\n","benchmark_truth = []\n","benchmark_est = [] \n","all_benchmark_est=[]\n","all_bench_ids =[]\n","\n","#benchmarks of each node\n","for j in range(0,rows):\n","      if df.loc[j][4]==2:\n","          bench_ids = [df.loc[j][5],df.loc[j][6]]\n","          benchmark1_truth = [df.loc[j][7],df.loc[j][8]]\n","          theta_truth = [df.loc[j][13],df.loc[j][14]]\n","          print(theta_truth[0]!=3.14)\n","          if theta_truth[0]!=3.14 and theta_truth[1]==3.14:   \n","              theta_est = IntervalVector([[theta_truth[0]-0.01,theta_truth[0]+0.01],[0,3.14]])#estimated theta of bench nodes \n","              print('theta_est',theta_est)\n","          elif theta_truth[0]==3.14 and theta_truth[1]!=3.14:   \n","              theta_est = IntervalVector([[0,3.14],[theta_truth[1]-0.01,theta_truth[1]+0.01]])#estimated theta of bench nodes\n","              print('**theta_est',theta_est)\n","          else:\n","              theta_est = IntervalVector([[0,3.14],[0,3.14]])#estimated theta of bench nodes\n","              print('***theta_est',theta_est)\n","          benchmark1_est = IntervalVector([[benchmark1_truth[0]-0.01,benchmark1_truth[0]+0.01],[benchmark1_truth[1]-0.01,benchmark1_truth[1]+0.01]])#estimated locations of bench nodes\n","          benchmark2_truth= [df.loc[j][9],df.loc[j][10]]\n","          benchmark2_est=IntervalVector([[benchmark2_truth[0]-0.01,benchmark2_truth[0]+0.01],[benchmark2_truth[1]-0.01,benchmark2_truth[1]+0.01]])#estimated locations of bench nodes\n","          benchmark_est = [benchmark1_est,benchmark2_est]\n","          all_bench_ids.append(bench_ids)\n","          all_benchmark_est.append(benchmark_est)\n","      else:\n","          bench_ids = [df.loc[j][5]]\n","          theta_truth = df.loc[j][13]\n","          if theta_truth==3.14:#if theta =3.14, consider theta is over a circle\n","              theta_est = [0,3.14]#estimated theta of bench nodes \n","              print(theta_est)\n","          else:\n","              theta_est = [theta_truth-0.01,theta_truth+0.01]#estimated theta of bench nodes \n","              print('1 theta',theta_est)\n","          benchmark_truth =  [df.loc[j][7],df.loc[j][8]] \n","          benchmark_est = IntervalVector([[benchmark_truth[0]-0.01,benchmark_truth[0]+0.01],[benchmark_truth[1]-0.01,benchmark_truth[1]+0.01]])#estimated locations of bench nodes \n","          all_bench_ids.append(bench_ids)\n","          all_benchmark_est.append(benchmark_est)\n","   \n","#gps circles of each node\n","all_eg = []\n","all_gps_est=[]\n","for k in range(0,rows):\n","    e_g = Interval(0,df.loc[k][15])\n","    all_eg.append(e_g)\n","    gps_est = all_x_est[k]\n","    all_gps_est.append(gps_est)\n","print('gps est',all_gps_est)\n","\n","x = TubeVector(tdomain, dt, 2) #not sure whether this is used\n","all_eh = []\n","\n","#heading of  each node\n","for n in range(0,rows):\n","    e_h = Interval(0,df.loc[k][17])\n","    all_eh.append(e_h)\n","print('all_eh',all_eh)\n","\n","t = [0.3, 1.5, 2.0, 2.5]   #set of time stamps of measures\n","\n","# =========== 2. Defining contractors to deal with equations ===========\n","# We use the predefined contractor ctc.dist, no need to build it\n","ctc_plus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a+b-c\")) # a+b=c\n","ctc_minus = CtcFunction(Function(\"a\", \"b\", \"c\", \"a-b-c\")) # a-b=c\n","\n","# =============== 3. Adding the contractors to a network ===============\n","t = tdomain.lb()\n","prev_t_obs = t\n","iter = 0;\n","\n","#find n1 location, p\n","cn = ContractorNetwork()\n","\n","#2 minute time constraint{#consider this last\n","# =========== FORWARDTRACKING ===========\n","#computing total nbnodes\n","nbnodes = 0\n","for u in range(0, len(all_paths)):\n","    nbnodes +=len(all_paths[u])\n","pn = all_x_est[0]\n","if iter< nbnodes:#until all nodes covered \n","    for k in range(0,len(all_paths)):  #considering several paths of a call reaching gNB#for each  path \n","        for j in range(0,len(all_paths[k])):#nbnodes in the k path \n","            #prepare input data\n","            gstar = all_gps_est[iter]\n","            gps_circle =all_eg[iter]\n","            print('gstar',gstar[0],' ***',gstar[1],'gps circle',gps_circle)\n","            bstar = all_benchmark_est[iter] \n","            pstar = all_x_est[iter]#should be pn\n","            print('len bstar',len(all_bench_ids[iter]))\n","            if len(all_bench_ids[iter])==1:#number of benchmarks #obtained by benchmark_ids\n","                dist1 = sqrt((bstar[0]-pstar[0])**2+(bstar[1]-pstar[1])**2) #dist to n1 from n2 calculation\n","                ystar = [dist1]\n","                print('bstar',bstar[0],' ***',bstar[1],'ystar',ystar[0])\n","            else:\n","                dist1 = sqrt((bstar[0][0]-pstar[0])**2+(bstar[0][1]-pstar[1])**2) #dist to n1 from n2 calculation\n","                dist2 = sqrt((bstar[1][0]-pstar[0])**2+(bstar[1][1]-pstar[1])**2) #dist to n1 from n2 calculation\n","                ystar = [dist1,dist2]\n","                print('bstar',bstar[1][0],' ***',bstar[1][1],'ystar',ystar[1])\n","            #each node csp\n","            for i in range (0,len(ystar)): # we add the observ. constraint for each range-only measurement\n","                alpha = cn.create_dom(Interval())\n","                d = cn.create_dom(IntervalVector(2))\n","                pn = cn.create_dom(IntervalVector(2))\n","                cn.add(ctc.dist, [pn, gstar[0],gstar[1], gps_circle])#gps constraint\n","                if len(all_bench_ids[iter])==1:#constraint according to nbbench nodes\n","                    cn.add(ctc.dist, [pn, bstar[i], bstar[i], ystar[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","                else:\n","                    cn.add(ctc.dist, [pn, bstar[i][0], bstar[i][1], ystar[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","                cn.add(ctc.polar, [d,ystar[i],alpha])\n","                cn.add(ctc_minus, [bstar[i][0],bstar[i][1],pn,d])  #cn.add(ctc_minus, [b[i], x, d])   #from: questionn C.1 in tubex lib    #d = m-x\n","                \n","                prev_t_obs = t\n","\n","            # Adding related observation constraints \n","            #following part get code crashed... \n","            \n","            all_x_est[iter] = pn #using solution update the estimated location of unknown node\n","            print('pn',pn)\n","            iter+=1\n","\n","# =========== BACkTRACKING ===========\n","\n","# =========== SOLUTION ===========\n","cn.contract(True) # lets the solver run the remaining contractions\n","\n","#2 minute time constraint}\n","# =========== RESULTS ==========="],"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-f595514a1c1b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mread_excel\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34mr'simple.xlsx'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msheet_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'sheet1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mrows\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    294\u001b[0m                 )\n\u001b[1;32m    295\u001b[0m                 \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFutureWarning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36mread_excel\u001b[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, mangle_dupe_cols)\u001b[0m\n\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 304\u001b[0;31m         \u001b[0mio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    305\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m         raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path_or_buffer, engine)\u001b[0m\n\u001b[1;32m    865\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstringify_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    866\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 867\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engines\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_io\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    868\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    869\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__fspath__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_xlrd.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0merr_msg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Install xlrd >= 1.0.0 for Excel support\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mimport_optional_dependency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"xlrd\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextra\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    352\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 353\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    354\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    355\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/excel/_xlrd.py\u001b[0m in \u001b[0;36mload_workbook\u001b[0;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_contents\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xlrd/__init__.py\u001b[0m in \u001b[0;36mopen_workbook\u001b[0;34m(filename, logfile, verbosity, use_mmap, file_contents, encoding_override, formatting_info, on_demand, ragged_rows)\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile_contents\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mpeeksz\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m             \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpeeksz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpeek\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34mb\"PK\\x03\\x04\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# a ZIP file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'simple.xlsx'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"nXsYJZ8mpIUX","executionInfo":{"elapsed":542,"status":"error","timestamp":1623750499851,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"d7dba981-3d15-49e2-a3df-73dfb99fed4b"},"source":["  \n","from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","import numpy as np\n","import pandas as pd\n","\n","df = pd.read_excel (r'csp.xlsx', sheet_name='Input')\n","# =========== CREATING DATA ===========\n","dt =0.5#time interval of csp problem update\n","iteration_dt = 0.2#time for solving csp problem\n","tdomain = Interval(0,15) # [t0,tf]#total time of collecting nodes info \n","\n","# Initial pose x0=(0,0,2)\n","x_truth = [df.loc[10][3] ,df.loc[10][4],df.loc[10][11]]\n","x2_truth = [df.loc[11][3] ,df.loc[11][4],df.loc[11][11]]\n","x3_truth = [df.loc[12][3] ,df.loc[12][4],df.loc[12][11]]\n","all_truth = [x_truth,x2_truth,x3_truth]\n","\n","x = TubeVector(tdomain, dt, 2) \n","heading = Interval(float(x_truth[2])).inflate(0.01) # measured heading\n","\n","# Set of landmarks initial\n","v_m = [(6,12), (-2,-5), (-3,20), (3,4)]\n","e_x =Interval(-0.01,0.01)\n","\n","x1 = float(x_truth[0])\n","x2 = float(x_truth[1])\n","print(type(float(x1)))\n","# Set of landmarks\n","b = [IntervalVector([[410,410],[150,150]]), \\\n","    IntervalVector([Interval(x1+e_x),Interval(x2+e_x)])]#n0,n1 \n","e_y0 = Interval(-0.01,0.01)\n","\n","#have added uncertainity to both range and bearing measurements here in tubex\n","y = [Interval(df.loc[10][6]+e_y0), Interval(0,df.loc[10][3])]  #set of range measures \n","theta = [Interval(df.loc[10][7]+e_y0), Interval(0.03, 3.1)] #set of bearing measures\n","\n","# =========== CONTRACTOR NETWORK ===========\n","bstar = b\n","v_m_boxes = [IntervalVector(2) for _ in bstar]#bstar is updated benchmark\n","t = tdomain.lb()\n","prev_t_obs = 0\n","\n","tot_nodes = 3\n","\n","#initial estimated locations of all nodes #get updated during this algorithm \n","n1_est = IntervalVector([[x_truth[0]-0.01,x_truth[0]+0.01],[x_truth[1]-0.01,x_truth[1]+0.01]])\n","n2_est = IntervalVector([[x2_truth[0]-0.01,x2_truth[0]+0.01],[x2_truth[1]-0.01,x2_truth[1]+0.01]])\n","n3_est = IntervalVector([[x3_truth[0]-0.01,x3_truth[0]+0.01],[x3_truth[1]-0.01,x3_truth[1]+0.01]])\n","all_n = [n1_est,n2_est,n3_est]\n","\n","all_gps =  IntervalVector([[0,df.loc[11][3]],[0,df.loc[10][3]],[0,df.loc[0][3]]])#do not change with time\n","\n","sol_arr = []\n","all_sol_arr =[]\n","path1 = ['n1', 'n4']\n","path2 = [\"n4\", \"n5\"]\n","path3 = [\"n6\", \"n7\"]\n","\n","paths= [path1,path2,path3]\n","nbnodes = len(path1)+len(path2)+len(path3)#total of nodes in all paths\n","pn = paths[0][0]#initial pn to be used in benchmark locations\n","\n","#initializing:\n","cn = ContractorNetwork()\n","iter=0\n","\n","# =========== FORWARDTRACKING ===========\n","if iter< nbnodes: # new observation each 2*delta # 2 delta is 2 minutes#time constraint\n","#considering several paths of a call reaching gNB\n","    for k in range(0,len(paths)):   \n","        for j in range (0,len(paths[k])):#selection of nodes one by one     \n","             #updated input before localizing the next node\n","            if k>0:\n","                for g in range(0,len(paths[k-1])):\n","                    if paths[k-1][g] in paths[k]: \n","                        print('Chirp')#capturing nodes which were localized before\n","                        pn = all_sol_arr[k-1][g]\n","                        bstar = [IntervalVector([pn[0],pn[1]]), \\\n","                        IntervalVector(all_n[j])]#updated benchmark vector\n","                        #dist must be updated\n","                        n_est = all_n[j]\n","                        print('n_est',n_est)\n","                        dist = sqrt((n_est[0]-pn[0])*(n_est[0]-pn[0])+(n_est[1]-pn[1])*(n_est[1]-pn[1]))  #dist to n1 from n2 calculation\n","                        ystar = [dist, all_gps[j]]  #update range measures array: updated range measure, gps radius\n","                        print('ystar',ystar)\n","                        #theta not updated (should be in backtracking)\n","                        thetastar = [Interval(0.03, 3.1), Interval(0.03, 3.1)]\n","                        heading = Interval(all_truth[j][2]).inflate(0.01) # measured heading  \n","                        print('thetastar',thetastar)\n","                        print('len(bstar)',bstar[1])\n","                    else:\n","                        bstar = [IntervalVector([pn[0],pn[1]]), \\\n","                        IntervalVector(all_n[j])]#updated benchmark vector\n","                        print('bstar',bstar)\n","                        n_est = all_n[j]\n","                        print('n_est',n_est)\n","                        dist = sqrt((n_est[0]-pn[0])*(n_est[0]-pn[0])+(n_est[1]-pn[1])*(n_est[1]-pn[1]))  #dist to n1 from n2 calculation\n","                        print('dist',dist)\n","                        ystar = [dist, all_gps[j]]  #update range measures array: updated range measure, gps radius\n","                        print('ystar',ystar)\n","                        #theta not updated (should be in backtracking)\n","                        thetastar = [Interval(0.03, 3.1), Interval(0.03, 3.1)]\n","                        heading = Interval(all_truth[j][2]).inflate(0.01) # measured heading  \n","                        print('thetastar',thetastar)\n","                        print('len(bstar)',bstar[1])\n","            #each node csp   \n","            for i in range (0,len(bstar)): # we add the observ. constraint for each range-only measurement\n","                alpha = cn.create_dom(Interval())\n","                d = cn.create_dom(IntervalVector(2))\n","                pn = cn.create_dom(IntervalVector(2))\n","              \n","                cn.add(ctc.dist, [pn, bstar[i], ystar[i]])# Distance constraint: relation between the state at t_i and the ith beacon position\n","                cn.add(ctc_plus, [thetastar[i], heading, alpha])    #theta = x3+y2\n","                cn.add(ctc.polar, [d,ystar[i],alpha])\n","                cn.add(ctc_minus, [bstar[i],pn,d])  #cn.add(ctc_minus, [b[i], x, d])   #from: questionn C.1 in tubex lib    #d = m-x\n","\n","                prev_t_obs = t\n","                \n","            # Adding related observation constraints \n","            contraction_dt = cn.contract_during(iteration_dt)\n","            if iteration_dt>contraction_dt:\n","              time.sleep(iteration_dt-contraction_dt) # iteration delay\n","            print('pn outer',pn)\n","            all_n[j] = pn#n_est updated\n","            sol_arr.append(pn)\n","        # Display the current slice [x](t)\n","        #fig_map.draw_box(x(t).subvector(0,1))\n","        t+=dt# time \n","        iter+=1\n","        print('i',iter)\n","        all_sol_arr.append(sol_arr)\n","        print('all',all_sol_arr)\n","    iter\n","    print('i out',iter)\n","# =========== BACkTRACKING ===========\n","\n","# =========== SOLUTION ===========\n","cn.contract(True) # lets the solver run the remaining contractions\n","\n","# =========== RESULTS ===========\n","print(pn)\n","print(sol_arr)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'float'>\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-54-eaf8a045417f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m#have added uncertainity to both range and bearing measurements here in tubex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mInterval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0me_y0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mInterval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m#set of range measures\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0mtheta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mInterval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0me_y0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mInterval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.03\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#set of bearing measures\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"pyibex.pyibex.Interval\") to str"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YLSc2hQY6sax","executionInfo":{"elapsed":24404,"status":"ok","timestamp":1623253151576,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"a1d2c7c2-f489-42f4-c670-94a16734e9c8"},"source":["from pyibex import *\n","from codac import *\n","import math\n","import random\n","import time\n","\n","\n","# =========== CREATING DATA ===========\n","\n","dt = 0.05\n","iteration_dt = 0.2\n","tdomain = Interval(0,6) # [t0,tf]\n","\n","# Initial pose x0=(0,0,2)\n","x0 = (0,0,2)\n","\n","# System input\n","u = Trajectory(tdomain, TFunction(\"3*(sin(t)^2)+t/100\"), dt)\n","\n","# Noise\n","i_n = Interval(-0.03,0.03) # the noises are known to be bounded by i_n\n","\n","n_u = RandTrajectory(tdomain, dt, i_n) # input noise\n","n_theta = RandTrajectory(tdomain, dt, i_n) # heading noise\n","\n","# Actual trajectories (state + derivative)\n","v_truth = TrajectoryVector(3)\n","x_truth = TrajectoryVector(3)\n","v_truth[2] = u + n_u\n","x_truth[2] = v_truth[2].primitive() + x0[2]\n","v_truth[0] = 10*cos(x_truth[2])\n","v_truth[1] = 10*sin(x_truth[2])\n","x_truth[0] = v_truth[0].primitive() + x0[0]\n","x_truth[1] = v_truth[1].primitive() + x0[1]\n","\n","# Bounded trajectories (dead reckoning)\n","v = TubeVector(tdomain, dt, 3)\n","x = TubeVector(tdomain, dt, 3)\n","v[2] = Tube(u, dt).inflate(i_n.rad()) # command u with bounded uncertainties\n","x[2] = Tube(x_truth[2]+n_theta, dt).inflate(i_n.rad()) # heading measurement with bounded uncertainties\n","v[0] = 10*cos(x[2])\n","v[1] = 10*sin(x[2])\n","x = v.primitive()+IntervalVector(x0) # dead reckoning\n","\n","# Set of landmarks\n","v_m = [ (6,12), (-2,-5), (-3,20), (3,4) ]\n","\n","\n","# =========== GRAPHICS ===========\n","\n","\n","# =========== CONTRACTOR NETWORK ===========\n","\n","v_m_boxes = [IntervalVector(2) for _ in v_m]\n","\n","# Contractor Network:\n","\n","cn = ContractorNetwork()\n","\n","t = tdomain.lb()\n","prev_t_obs = t\n","\n","while t < tdomain.ub():\n","\n","  if t-prev_t_obs > 2*dt: # new observation each 2*delta\n","    \n","    # Creating new observation to a random landmark\n","\n","    landmark_id = random.randint(0,len(v_m)-1) # a random landmark is perceived\n","\n","    pos_x = x_truth(t)[0:2]\n","    pos_b = v_m[landmark_id]\n","\n","    yi = Interval(sqrt(pow(pos_x[0]-pos_b[0],2)+pow(pos_x[1]-pos_b[1],2)))\n","    yi.inflate(0.03) # adding range bounded uncertainty\n","\n","    prev_t_obs = t\n","\n","    # Adding related observation constraints to the network\n","\n","    # Alias (for ease of reading)\n","    b = v_m_boxes[landmark_id]\n","\n","    # Intermediate variables\n","    ti = Interval(t)\n","    xi = IntervalVector(3)\n","\n","    # Contractors\n","    cn.add(ctc.eval, [ti, xi, x, v])\n","    cn.add(ctc.dist, [xi[0], xi[1], b[0], b[1], yi])\n","\n","  contraction_dt = cn.contract_during(iteration_dt)\n","  if iteration_dt>contraction_dt:\n","    time.sleep(iteration_dt-contraction_dt) # iteration delay\n","\n","  t+=dt\n","\n","cn.contract(True) # lets the solver run the remaining contractions\n","print(b)\n","print(x)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["([4.88680899278428, 7.005572141409217] ; [10.7585277280694, 12.99096219580937])\n","TubeVector (dim 3) [0, 6]↦([-11.56533478608512, 10.17261088275199] ; [0, 15.70978446531789] ; [1.997399687604147, 12.05619031012467]), 120 slices\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KelJ_8zqYG4r"},"source":["# Not tubex\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZTvVyY8_4-fK","executionInfo":{"elapsed":2779,"status":"ok","timestamp":1622203966617,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"bbb342d8-f399-4a4f-d7f5-d5c7e683dde2"},"source":["pip install vibes\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: vibes in /usr/local/lib/python3.7/dist-packages (0.2.2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"koZg_PLdGnSR","executionInfo":{"elapsed":332,"status":"ok","timestamp":1622207580646,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"4c51c13a-087e-4331-f3a9-d49c6cdee066"},"source":["def my_function(fname):\n","  print(fname + \" Refsnes\")\n","\n","my_function('bull')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["bull Refsnes\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RfMiUXeAu-uN"},"source":["from pyibex import *\n","from tubex_lib import *\n","\n","x = Tube(Interval(0,10), 0.01, TFunction(\"cos(t)+abs(t-5)*[-0.1,0.1]\"))\n","\n","beginDrawing()\n","fig = VIBesFigTube(\"My first tube\")\n","fig.add_tube(x, \"x\")\n","fig.show()\n","endDrawing()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311},"id":"vS-W2DSAiCVM","executionInfo":{"elapsed":12779,"status":"ok","timestamp":1621849671800,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"dcdd3d72-7762-43cc-c071-62428f733294"},"source":["pip install ortools\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting ortools\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/6a/bd/75277072925d687aa35a6ea9e23e81a7f6b7c980b2a80949c5b9a3f98c79/ortools-9.0.9048-cp37-cp37m-manylinux1_x86_64.whl (14.4MB)\n","\u001b[K     |████████████████████████████████| 14.4MB 230kB/s \n","\u001b[?25hCollecting protobuf>=3.15.8\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7e/16/7ba9dc81212c0e3865c08dcc9170259bc4e624fda783926fb84ed609ea25/protobuf-3.17.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.0MB)\n","\u001b[K     |████████████████████████████████| 1.0MB 35.1MB/s \n","\u001b[?25hRequirement already satisfied: absl-py>=0.11 in /usr/local/lib/python3.7/dist-packages (from ortools) (0.12.0)\n","Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.7/dist-packages (from protobuf>=3.15.8->ortools) (1.15.0)\n","Installing collected packages: protobuf, ortools\n","  Found existing installation: protobuf 3.12.4\n","    Uninstalling protobuf-3.12.4:\n","      Successfully uninstalled protobuf-3.12.4\n","Successfully installed ortools-9.0.9048 protobuf-3.17.0\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["google"]}}},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"UOLZq7vi7xZi","executionInfo":{"elapsed":427,"status":"error","timestamp":1621684592880,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"fa540716-f47d-47b2-bca2-62fdeecd1ad1"},"source":["def solve():\n","    problem = Problem()\n","    size = 8\n","    cols = range(size)\n","    rows = range(size)\n","    problem.addVariables(cols, rows)\n","    for col1 in cols:\n","        for col2 in cols:\n","            if col1 < col2:\n","                problem.addConstraint(\n","                    lambda row1, row2, col1=col1,\n","                    col2=col2: abs(row1 - row2) !=\n","                    abs(col1 - col2) and row1 != row2,\n","                    (col1, col2),\n","                )\n","    solutions = problem.getSolutions()\n","    return solutions, size\n","\n","\n","def showSolution(solution, size):\n","    sys.stdout.write(\"   %s \\n\" % (\"-\" * ((size * 4) - 1)))\n","    for i in range(size):\n","        sys.stdout.write(\"  |\")\n","        for j in range(size):\n","            if solution[j] == i:\n","                sys.stdout.write(\" %d |\" % j)\n","            else:\n","                sys.stdout.write(\"   |\")\n","        sys.stdout.write(\"\\n\")\n","        if i != size - 1:\n","            sys.stdout.write(\"  |%s|\\n\" % (\"-\" * ((size * 4) - 1)))\n","    sys.stdout.write(\"   %s \\n\" % (\"-\" * ((size * 4) - 1)))\n","\n","\n","def main(show=False):\n","    solutions, size = solve()\n","    print(\"Found %d solution(s)!\" % len(solutions))\n","    if show:\n","        for solution in solutions:\n","            showSolution(solution, size)\n","\n","\n","if __name__ == \"__main__\":\n","    show = False\n","    if len(sys.argv) == 2 and sys.argv[1] == \"-s\":\n","        show = True\n","    elif len(sys.argv) != 1:\n","        sys.exit(\"Usage: queens.py [-s]\")\n","    main(show)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"SystemExit","evalue":"ignored","traceback":["An exception has occurred, use %tb to see the full traceback.\n","\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m Usage: queens.py [-s]\n"]},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n","  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R8NQBd8qmGpV","executionInfo":{"elapsed":16630,"status":"ok","timestamp":1620974935915,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"666140aa-daa6-4e57-aa11-bf38015e16a7"},"source":["pip install SimpleITK "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting SimpleITK\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9c/6b/85df5eb3a8059b23a53a9f224476e75473f9bcc0a8583ed1a9c34619f372/SimpleITK-2.0.2-cp37-cp37m-manylinux2010_x86_64.whl (47.4MB)\n","\u001b[K     |████████████████████████████████| 47.4MB 87kB/s \n","\u001b[?25hInstalling collected packages: SimpleITK\n","Successfully installed SimpleITK-2.0.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CFziKusT0pLS","executionInfo":{"elapsed":4959,"status":"ok","timestamp":1621682739125,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"d1ea4b5b-1324-48e3-9c9b-5abc9ba6a4d0"},"source":["pip install csp"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting csp\n","  Downloading https://files.pythonhosted.org/packages/6b/80/42b48cfa76b75a2d0116388fcbdb005df14276adbf9b87f8d197f7e9a344/csp-0.1alpha10.tar.gz\n","Building wheels for collected packages: csp\n","  Building wheel for csp (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for csp: filename=csp-0.1a10-cp37-none-any.whl size=9851 sha256=c8d4828c73821a800e3a59c29a95c7413a975441bf7b1d08772d3be76a4473ad\n","  Stored in directory: /root/.cache/pip/wheels/4e/d6/34/256c63e233768f06cdbc3dfe3e46627449eff4691d41430244\n","Successfully built csp\n","Installing collected packages: csp\n","Successfully installed csp-0.1a10\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":882},"id":"aME_IF29h9gl","executionInfo":{"elapsed":7,"status":"ok","timestamp":1621849673493,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"9863bc0b-94df-4193-e72f-c663de6bca2b"},"source":["#from:https://developers.google.com/optimization/cp/original_cp_solver\n","#convex hull overlap region/area\n","from __future__ import print_function\n","import sys\n","from ortools.constraint_solver import pywrapcp\n","import numpy as np\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","\n","def main():\n","  solver = pywrapcp.Solver(\"simple_example\")\n","  # Create the variables.\n","  num_vals = 3\n","  x = solver.IntVar(0, num_vals - 1, \"x\")\n","  y = solver.IntVar(0, num_vals - 1, \"y\")\n","  z = solver.IntVar(0, num_vals - 1, \"z\")\n","  # Create the constraints.\n","  solver.Add(x != y)\n","  # Call the solver.\n","  db = solver.Phase([x, y, z], solver.CHOOSE_FIRST_UNBOUND, solver.ASSIGN_MIN_VALUE)\n","  solver.Solve(db)\n","  print_solution(solver, x, y, z)\n","\n","def print_solution(solver, x, y, z):\n","  count = 0\n","  pointsf1=[]\n","  while solver.NextSolution():\n","    count += 1\n","    print(\"x =\", x.Value(), \"y =\", y.Value(), \"z =\", z.Value())\n","    points =  [x.Value(),y.Value(),z.Value()]\n","    pointsf1.append(points)\n","  print(\"\\nNumber of solutions found:\",count,points)\n","  \n","  pointsf1 = np.array(pointsf1)\n","  print(pointsf1)\n","  A, b, hull = GetHull(pointsf1)\n","  for simplex in hull.simplices:\n","    plt.plot(pointsf1[simplex, 0], pointsf1[simplex, 1], 'k-')\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","if __name__ == \"__main__\":\n","  main()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["x = 0 y = 1 z = 0\n","x = 0 y = 1 z = 1\n","x = 0 y = 1 z = 2\n","x = 0 y = 2 z = 0\n","x = 0 y = 2 z = 1\n","x = 0 y = 2 z = 2\n","x = 1 y = 0 z = 0\n","x = 1 y = 0 z = 1\n","x = 1 y = 0 z = 2\n","x = 1 y = 2 z = 0\n","x = 1 y = 2 z = 1\n","x = 1 y = 2 z = 2\n","x = 2 y = 0 z = 0\n","x = 2 y = 0 z = 1\n","x = 2 y = 0 z = 2\n","x = 2 y = 1 z = 0\n","x = 2 y = 1 z = 1\n","x = 2 y = 1 z = 2\n","\n","Number of solutions found: 18 [2, 1, 2]\n","[[0 1 0]\n"," [0 1 1]\n"," [0 1 2]\n"," [0 2 0]\n"," [0 2 1]\n"," [0 2 2]\n"," [1 0 0]\n"," [1 0 1]\n"," [1 0 2]\n"," [1 2 0]\n"," [1 2 1]\n"," [1 2 2]\n"," [2 0 0]\n"," [2 0 1]\n"," [2 0 2]\n"," [2 1 0]\n"," [2 1 1]\n"," [2 1 2]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":427},"id":"Y9BCvzUOLsWJ","executionInfo":{"elapsed":630,"status":"ok","timestamp":1621702830847,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"faed28dd-1027-49b6-cada-198e6a7c844b"},"source":["#2d\n","#from:https://developers.google.com/optimization/cp/original_cp_solver\n","#convex hull overlap region/area\n","from __future__ import print_function\n","import sys\n","from ortools.constraint_solver import pywrapcp\n","import numpy as np\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from fractions import Fraction\n","def main():\n","  solver = pywrapcp.Solver(\"simple_example\")\n","  # Create the variables.\n","  num_vals = 10\n","  x = solver.IntVar(-5, num_vals - 1, \"x\")\n","  y = solver.IntVar(-4, num_vals - 1, \"y\")\n","  \n","  # Create the constraints.\n","  solver.Add(((x-1)*(x-0) +(y-0)*(y-0)) < 5)\n","  solver.Add(((x-1)*(x-0) +(y-0)*(y-0)) > -1)\n","  solver.Add(((x-1)*(x-0) +(y-0)*(y-0)) < 2)\n","  solver.Add(((x-1)*(x-0) +(y-0)*(y-0)) > 0)\n","  # Call the solver.\n","  db = solver.Phase([x, y], solver.CHOOSE_FIRST_UNBOUND, solver.ASSIGN_MIN_VALUE)\n","  solver.Solve(db)\n","  print_solution(solver, x, y)\n","\n","def print_solution(solver, x, y):\n","  count = 0\n","  pointsf1=[]\n","  points=[]\n","  while solver.NextSolution():\n","    count += 1\n","    print(\"x =\", x.Value(), \"y =\", y.Value())\n","    points =  [x.Value(),y.Value()]\n","    pointsf1.append(points)\n","  print(\"\\nNumber of solutions found:\",count,points)\n","  \n","  pointsf1 = np.array(pointsf1)\n","  print(pointsf1)\n","  A, b, hull = GetHull(pointsf1)\n","  for simplex in hull.simplices:\n","    plt.plot(pointsf1[simplex, 0], pointsf1[simplex, 1], 'k-')\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","if __name__ == \"__main__\":\n","  main()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["x = 0 y = -1\n","x = 0 y = 1\n","x = 1 y = -1\n","x = 1 y = 1\n","\n","Number of solutions found: 4 [1, 1]\n","[[ 0 -1]\n"," [ 0  1]\n"," [ 1 -1]\n"," [ 1  1]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"id":"VcOD2Q1IxVWz","executionInfo":{"elapsed":587,"status":"error","timestamp":1621681889439,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"d724ef9f-59b0-4e59-af06-e2c0e6ff52ee"},"source":["%classpath add jar ../out/artifacts/aima_core_jar/aima-core.jar\n","package aima.notebooks.csp;\n","\n","import aima.core.search.csp.Variable;\n","import java.util.Arrays;\n","import java.util.List;\n","\n","public class Variables {\n","    public static final Variable WA = new Variable(\"WA\");\n","    public static final Variable NT = new Variable(\"NT\");\n","    public static final Variable Q = new Variable(\"Q\");\n","    public static final Variable NSW = new Variable(\"NSW\");\n","    public static final Variable V = new Variable(\"V\");\n","    public static final Variable SA = new Variable(\"SA\");\n","    public static final Variable T = new Variable(\"T\");\n","    \n","    public static final List<Variable> list = Arrays.asList(NSW, WA, NT, Q, SA, V, T);\n","    \n","    private Variables() {}\n","}"],"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-47-12f9652813d6>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    package aima.notebooks.csp;\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xHofyumwmJX2","executionInfo":{"elapsed":7352,"status":"ok","timestamp":1620974926629,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"44980e2c-c33b-4d8c-da87-9e00407e3351"},"source":["pip install gap-stat"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting gap-stat\n","  Downloading https://files.pythonhosted.org/packages/59/00/33eb7ecd5eb19dacf84013942ca4480606b3c322bf4ac6555edf79e99c76/gap_stat-2.0.1-py3-none-any.whl\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.4.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.19.5)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.1.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->gap-stat) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->gap-stat) (2.8.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->gap-stat) (1.15.0)\n","Installing collected packages: gap-stat\n","Successfully installed gap-stat-2.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Xh_cNFzmEtn","executionInfo":{"elapsed":4595,"status":"ok","timestamp":1620974923819,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"c3be3ae7-f67d-4561-843b-1a602f687ffd"},"source":["pip install gapstat_rs"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting gapstat_rs\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b5/e1/63fca4894933743479e6ff59d88f9223cfe3d236eaa9df7ca594a3265a2c/gapstat_rs-2.0.1-cp37-cp37m-manylinux1_x86_64.whl (814kB)\n","\u001b[K     |████████████████████████████████| 819kB 5.2MB/s \n","\u001b[?25hInstalling collected packages: gapstat-rs\n","Successfully installed gapstat-rs-2.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"PqeEC-6iZNYc","executionInfo":{"elapsed":2947,"status":"error","timestamp":1621842180498,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"a9dbce90-e228-47da-8673-3597ea298cdd"},"source":["#gaussian mixture model \n","from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","from sklearn.mixture import GaussianMixture\n","\n","rand_iter = 1\n","Npts=100000\n","rand_initializations=1\n","maxk =10\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","    stds=[1,1,1,1,1,1,1,1,1,1,1,1]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    sscore = []\n","    ellipse_points = []\n","    for j in range(rand_iter):\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, maxk))\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters)\n","\n","        #select points inside ellipse \n","        sum2 =0\n","        sscore2 = []\n","        for j in range(rand_iter):\n","          outside=0\n","          inside=0\n","          for i in range(Npts):\n","            P = (points[i] - d).T         \n","            Q = (np.linalg.inv(B)).T\n","            R = np.linalg.inv(B)\n","            S = (points[i] - d)\n","            \n","            if multi_dot([P,Q,R,S])> 1:\n","                inside =inside+1\n","                np.array(ellipse_points.append(points[i]))\n","                np.array(label_t.append(labels_true[i]))\n","            elif multi_dot([P,Q,R,S])<= 1:\n","                outside =outside+1\n","\n","        gmm.fit(ellipse_points)\n","        y_cluster_kmeans = gmm.predict(ellipse_points)\n","        score = metrics.silhouette_score(ellipse_points, y_cluster_kmeans)\n","        np.array(sscore.append(score))\n","        #print(\"sscore array : \",sscore)\n","    avg = np.max(sscore)\n","    #print(\"avg: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","stds=[1,1,1,1,1,1,1,1,1,1,1,1]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v1, ..., v? are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    sscore2 = []\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, maxk))\n","\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters2)\n","        gmm.fit(result_t)\n","        ellipsoid_labels=gmm.predict(result_t)\n","        score2 = metrics.silhouette_score(result_t, ellipsoid_labels)\n","        np.array(sscore2.append(score2))\n","    avg2 = np.max(sscore2)\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-9e18bc244b19>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpairwise_distances_argmin_min\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecomposition\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mPCA\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgap_statistic\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mOptimalK\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlinalg\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mLA\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmulti_dot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'gap_statistic'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dGikkbSvl-xN","executionInfo":{"elapsed":2920,"status":"ok","timestamp":1620830809552,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"99a707da-4c85-45e3-a113-749313e8212e"},"source":["#k-means\n","from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","\n","rand_iter = 3\n","Npts=100\n","rand_initializations=1\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","    stds=[0.8, 0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    sscore = []\n","    ellipse_points = []\n","    for j in range(rand_iter):\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, 15))\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters,init='k-means++', n_init=10)\n","        sum2 =0\n","        sscore2 = []\n","        for j in range(rand_iter):\n","            outside=0\n","            inside=0\n","            for i in range(Npts):\n","              P = (points[i] - d).T         \n","              Q = (np.linalg.inv(B)).T\n","              R = np.linalg.inv(B)\n","              S = (points[i] - d)\n","              \n","              if multi_dot([P,Q,R,S])> 1:\n","                      inside =inside+1\n","                      np.array(ellipse_points.append(points[i]))\n","                      np.array(label_t.append(labels_true[i]))\n","              elif multi_dot([P,Q,R,S])<= 1:\n","                      outside =outside+1\n","        km.fit(ellipse_points)\n","        y_cluster_kmeans = km.predict(ellipse_points)\n","        score = metrics.silhouette_score(ellipse_points, y_cluster_kmeans)\n","        np.array(sscore.append(score))\n","        #print(\"sscore array : \",sscore)\n","    avg = np.max(sscore)\n","    #print(\"avg: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","stds=[0.8, 0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v1, ..., v? are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    sscore2 = []\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, 15))\n","        #print(\"new cluster count: \",n_clusters2)\n","\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters2,init='k-means++', n_init=10)\n","        km.fit(np.array(result_t))\n","        ellipsoid_labels=km.predict(np.array(result_t))\n","        score2 = metrics.silhouette_score(np.array(result_t), ellipsoid_labels)\n","        #print(\"silhouette_score ellipsoid\",score)\n","        np.array(sscore2.append(score2))\n","    avg2 = np.max(sscore2)\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["avg_rand_sscore_wt:  0.901954211079565\n","avg_rand_sscore:  0.9532884162835528 in pts: [16] out pts: [84]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":966},"id":"-ikoZ5CV4qak","executionInfo":{"elapsed":1804,"status":"error","timestamp":1619791931373,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"9422374c-710d-445f-dc8d-4b92838d2504"},"source":["from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","#from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","np.random.seed(0)\n","\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_arc(x,y,r,theta,x2,y2,r2,theta2):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  alpha = np.random.uniform(theta-np.pi/2 ,theta+ np.pi/2)\n","  # vector on that angle\n","  alpha2 = np.random.uniform(theta2-np.pi/2 ,theta2+ np.pi/2)\n","  pt = r*np.array([np.cos(alpha),np.sin(alpha)])+[x,y]\n","  pt_ = r2*np.array([np.cos(alpha2),np.sin(alpha2)])+[x2,y2]\n","  if ((((pt[0]-x)**2+(pt[1]-y)**2)<=r**2) and (((pt[0]-x2)**2+(pt[1]-y2)**2)<=r2**2)):\n","    pt0 = [pt[0]+x, pt[1]+y]\n","    #print('1',pt0)\n","  if ((((pt_[0]-x)**2+(pt_[1]-y)**2)<=r**2) and (((pt_[0]-x2)**2+(pt_[1]-y2)**2)<=r2**2)):\n","    pt0 = [pt_[0]+x, pt_[1]+y]\n","    #print('2',pt0)\n","  else:\n","    pt0 = []\n","  # Ellipsoidize it\n","  return pt0\n","\n","#random_point_arc([[1,1,1] for i in range(10)])\n","display_points = ([random_point_arc(0.7,0.7,0.5,np.pi/3,1,1,0.5,-2*np.pi/3) for i in range(10000)])\n","fig = plt.figure(figsize = (10, 10)) \n","plt.grid(True)\n","ax = fig.add_subplot(111)\n","x1=[]\n","y1=[]\n","x=[]\n","x =(np.array([display_points[0]]).T)[0]\n","print(np.array([display_points[0]]).T)\n","print(x)\n","print(display_points)\n","for i in range(0, 10):\n","   print((np.array([display_points[i]]).T)[0])\n","   x = (np.array([display_points[i]]).T)[0]\n","   y = (np.array([display_points[i]]).T)[1]\n","   np.array(x1.append(x))\n","   np.array(y1.append(y))\n","ax.scatter(x1,y1,c='green',alpha=0.7)\n","#\n","#display_points1 = np.array([random_point_arc(1,1,0.5,-2*np.pi/3) for i in range(100)])\n","#ax.scatter(display_points1[:,0], display_points1[:,1],c='blue',alpha=0.7)\n","\n","#res = np.concatenate(x1, axis=0)\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def Findconvexhull(points):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  print(f\"Optimal value: {optval}\") \n","\n","  #Plot(points, hull, B.value, d.value)\n","  for simplex in hull.simplices:\n","      plt.plot(res[simplex, 0], res[simplex, 1], 'k-')\n","  return B.value, d.value\n","\n","#Findconvexhull(res)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1.77592443]\n"," [1.20579814]]\n","[1.77592443]\n","[[1.7759244301624815, 1.2057981374938955], [1.5133358672937915, 1.2361503459513643], [1.6673937041482207, 1.2010643032706256], [], [1.3115339867671796, 1.3852077565075684], [1.4902825584257613, 1.246107287236779], [], [], [], [], [], [], [], [], [1.3442269445076283, 1.3486802980394896], [1.8657682726856866, 1.2282788114035963], [1.5481340419545577, 1.223621231805048], [1.6232862263891559, 1.2059200500542606], [1.622197546396604, 1.2060903137077674], [1.7237942799682888, 1.200566488668621], [1.3697746924674514, 1.324565256981944], [1.227695458647566, 1.8640988123597086], [1.7062377891895184, 1.2000389115280798], [1.2035102917744176, 1.7591436355500407], [], [1.3716299370940028, 1.32294151410277], [1.2102684871227956, 1.800811930320794], [1.200070810379012, 1.7084145923788543], [1.2184010928903453, 1.5656032267099165], [1.214844973595632, 1.5790677861172755], [1.2077981870019507, 1.7879623515001348], [1.2020005214361853, 1.744682427755985], [], [], [1.2122371152633376, 1.8099425680679204], [1.4086350182219336, 1.2936670732103206], [1.6035009105318627, 1.2094004425890494], [], [1.2053188235800412, 1.7727360549917683], [1.205659729983191, 1.7750179807760003], [], [1.740490722877498, 1.201642195445022], [1.2238556266718466, 1.5474007347726075], [1.2129936441896256, 1.8132466750076979], [], [], [1.7776905265205598, 1.2060726955421899], [], [], [], [1.226119789873498, 1.5405084753020954], [], [1.5597363359861467, 1.2200769805922944], [1.553858737743626, 1.221833991728695], [], [], [], [1.3247773455943421, 1.3695337239281862], [1.5674669296432606, 1.2178848838069734], [1.7405838317236693, 1.2016497691355759], [1.451803781016674, 1.2659508819472376], [], [1.6058874473912665, 1.2089370433015045], [1.2442390083384365, 1.494374324366658], [1.237110782080651, 1.5109667438411603], [1.3601408506560295, 1.3332633661505948], [1.2421365042679997, 1.4990994791543026], [], [1.6788542058584837, 1.2004473447271802], [1.3632054481173337, 1.330446986452344], [1.2963196345795003, 1.4049709123256289], [], [1.7583348921849342, 1.2034146192709936], [], [], [], [], [], [1.5491322839848942, 1.2233041511987066], [1.2232727581085423, 1.8507684875514894], [1.3896838908300513, 1.3079490946450645], [], [], [], [], [], [], [1.2080675387664124, 1.6105435659962635], [], [], [], [1.2124653907330591, 1.5890495391315058], [], [1.5805959490379715, 1.2144666101967267], [1.251178724217014, 1.4796378834633028], [1.2045928296169368, 1.6323853896480454], [], [1.437134889062838, 1.2746743207235267], [1.218853400250616, 1.5639928327270725], [1.3667011904835995, 1.327291127587563], [1.7465487388658203, 1.202171500504439], [1.2004129028293826, 1.6796841849625435], [], [1.3898738028893887, 1.3077988502493774], [], [], [], [1.8420759285983073, 1.2206103562727615], [1.311556115803081, 1.3851804503687697], [], [], [], [], [1.205874309217569, 1.6235814046924084], [1.8001460881161184, 1.210131894245973], [], [], [], [1.4021929406873574, 1.298364648687947], [], [], [1.2029507212616317, 1.7542403402060485], [1.3243146417093192, 1.3700598363854395], [], [], [], [1.8273807348367763, 1.216498036826692], [1.217000881136643, 1.8292743252824042], [1.572325149258333, 1.216575618645384], [1.2383498142811096, 1.5079606654205602], [1.2108304104773562, 1.803504167482514], [], [], [1.575264844977844, 1.2158087763067171], [1.4307099469507925, 1.2787128445718348], [], [], [], [], [], [], [], [], [1.4211756529798163, 1.2849614674409517], [1.6573354727646676, 1.2018235873550558], [], [], [], [], [], [1.865492071843106, 1.2281818420651063], [1.2179563531242905, 1.8327927803262147], [1.2105701349078901, 1.5977336460221685], [], [], [1.2009592142072516, 1.730956325934393], [1.2145819757010046, 1.819872188958323], [1.215204835049332, 1.577633141576427], [1.5316691436068586, 1.229187167989283], [1.7942732118150042, 1.2089678609967742], [1.2030512984488448, 1.7551542203881167], [1.244254395729358, 1.4943402222407418], [1.3928939113092114, 1.3054295369784434], [], [1.308082012771097, 1.3895160369899187], [], [1.747571092757287, 1.2022681533859043], [], [1.3021911646858422, 1.3971004612978202], [1.2275482282058199, 1.5363255568864216], [1.2022766857175031, 1.6523397186365112], [], [], [], [], [], [], [1.7231230514034312, 1.2005349616902157], [1.203522515743592, 1.759246161280105], [], [], [1.3938503469087353, 1.3046869722459196], [], [1.3274048777419671, 1.366574033900295], [1.7366582945297184, 1.2013456413083583], [], [1.6519988590639296, 1.2023094430584045], [1.2000926492201982, 1.7096250005880638], [], [1.5822351379712094, 1.2140664271000203], [1.3942380100225786, 1.304387050913336], [1.5591240550650864, 1.2202563516431977], [], [1.2001297659940668, 1.7113907486520246], [1.3267863886303577, 1.367266472551338], [], [], [], [], [1.2008502318126002, 1.6708536637214009], [], [], [], [1.210734611273263, 1.5969496269095786], [], [], [1.2178351736295467, 1.567647893061158], [1.218358722249504, 1.5657551506877465], [], [1.6245977335195065, 1.2057181995970268], [], [1.2000340022040135, 1.705831041747728], [1.4369298635994472, 1.2748011014428724], [1.2251374374892308, 1.856542475787582], [], [1.6934623825465285, 1.2000427422688693], [1.6987315061890054, 1.2000016090791377], [1.3547861025782222, 1.3382993433419477], [1.235334637681437, 1.515375784195684], [1.3444421553827952, 1.3484624925684776], [], [], [1.279402552561547, 1.4296339754920049], [], [], [], [1.2090816236621096, 1.794863838072099], [], [], [], [1.3072348092501525, 1.3905884537784088], [1.827570045506597, 1.2165479511994548], [1.2000663693533178, 1.691853531536494], [1.2461270505681148, 1.490239789821803], [1.2124128144719346, 1.589280821404691], [], [], [1.8305696519287864, 1.2173494369679079], [], [1.387568742583051, 1.3096325969181544], [], [], [], [], [1.5162564968199814, 1.2349856722216674], [1.5841385728725195, 1.2136090772804415], [1.3355873933347526, 1.3576501028137447], [1.2269502490799669, 1.538061946552101], [], [1.4580223366199412, 1.2624536476838975], [1.3014517590548798, 1.3980740162895045], [1.8303121079938274, 1.2172798383015215], [], [], [], [1.279365709976899, 1.4296912985922174], [], [1.7686800259842226, 1.2047394079569762], [1.2737057306607191, 1.4387085995894837], [], [1.232853997543836, 1.521745652537657], [1.7683819426206642, 1.2046981628103686], [1.3011145273068556, 1.3985196860915015], [], [1.3347377543501697, 1.3585567515635386], [], [], [1.2063948326724172, 1.7797115975721782], [1.7448695775951288, 1.2020173486892995], [], [], [1.5788115439927541, 1.214908917696295], [], [], [1.2674841574534685, 1.4491413825553048], [], [1.4776154048344925, 1.2521773879837315], [], [], [], [], [], [], [], [], [], [1.3172260621134186, 1.3783105340941366], [], [], [], [1.6912838489719708, 1.2000759770612572], [], [1.2159956840980124, 1.5745415519454782], [], [], [], [1.4903467413225464, 1.2460776375569003], [], [], [], [1.2628503345183284, 1.4573064278369476], [1.2261788176928792, 1.8596668005475216], [], [], [1.2966588638024372, 1.4045073133716182], [1.2702786297852706, 1.4443839911492717], [], [], [1.6882355152596746, 1.200138422261928], [], [1.7855621979199627, 1.207375284534865], [], [], [1.7495272414241927, 1.2024589942960382], [1.2008886961250598, 1.729797757369593], [], [], [], [1.208757319442373, 1.7931698921248562], [1.8224138647569732, 1.215216702314053], [], [1.3282192244474729, 1.3656662521827005], [1.2008772099009444, 1.7296047361706546], [1.6844442312713062, 1.2002420405243561], [1.2118398374746586, 1.8081649468322907], [1.5671777495157115, 1.217964472495762], [1.200013727697884, 1.6962949346248317], [1.2285736473332922, 1.8666049039235186], [], [], [], [], [1.3282301983786875, 1.3656540495198872], [1.2762039209923595, 1.4346758898672234], [1.65688847988508, 1.2018620704730658], [1.363602341640793, 1.3300856647135146], [1.2228600218644021, 1.8494571552812418], [1.6792000124713864, 1.2004328268202467], [1.5017956521586804, 1.2409629247034646], [1.3337666332654705, 1.3595985882956834], [1.2576596171344139, 1.466901339158015], [1.8099721685554837, 1.2122437882064399], [1.6057561944855552, 1.2089622161970064], [1.6500061527554666, 1.2025056631099302], [1.2098753378045526, 1.798882837276236], [], [1.3329208058986213, 1.3605108760830735], [1.2940498062900543, 1.4081020037292864], [], [], [1.207772129104555, 1.6121835828917108], [], [1.2109216079972007, 1.803934241114063], [1.2247234219844854, 1.8552809530813823], [], [1.535095632071187, 1.2279761134878884], [], [1.2026731419580163, 1.648366713545537], [1.4893407023243381, 1.2465436511605588], [], [], [], [], [], [], [1.3046554692258323, 1.3938910292282283], [], [], [1.483865570734308, 1.2491276139682164], [1.2001148067959047, 1.7107141782374686], [], [], [1.2178446326629526, 1.83238656181077], [1.7827960149922715, 1.2069028291488588], [], [1.5200838537126644, 1.233491500286314], [], [], [], [1.255619487704608, 1.4708145722518882], [1.3958309750161764, 1.303160984478101], [1.2691783685933156, 1.4462427894382448], [], [1.3049943262552208, 1.3934538897499542], [], [1.2150217287269545, 1.5783608763883585], [1.2000009449294475, 1.7009720743565313], [], [1.4418260742424645, 1.2718105278513465], [], [1.3579987161040517, 1.3352601998499163], [], [1.2002608966465718, 1.7161501882190806], [1.220430246039369, 1.841466784391743], [1.2085786405700838, 1.7922228144010641], [1.2156655843844262, 1.57582200738327], [], [], [], [1.4277597961396993, 1.280613219805271], [1.6576995026324957, 1.201792545296177], [1.3056359065321104, 1.3926289509676462], [1.7663563992825317, 1.2044227322866219], [1.282328950439311, 1.4251347705531447], [1.8594308022942323, 1.2260993571645873], [1.6295474708954616, 1.2049884434250306], [], [1.205159522298632, 1.6283557285731654], [1.3316248632583954, 1.3619175268804902], [1.4874526388589884, 1.2474255649376642], [], [1.2260054630170607, 1.8591514338934119], [], [], [], [1.206405194623505, 1.7797757363196354], [1.6541901850017262, 1.2021029615976573], [1.4224995185039657, 1.2840751476895504], [], [1.7757120783618277, 1.2057655604977204], [], [], [], [], [1.4715667109751667, 1.255232383749337], [1.810009460761975, 1.2122521978082736], [1.7431293874896565, 1.2018636171340553], [1.768566998102807, 1.2047237470146892], [1.4279239725328883, 1.280506692213433], [], [], [1.2720179324215046, 1.4414823993782315], [], [1.2199628546928238, 1.5601274182502625], [], [1.200876581375272, 1.6704058623987024], [], [1.3815426015344674, 1.314532899766316], [1.2870612292897063, 1.4180752376177792], [], [], [], [], [1.807886670156627, 1.2117782610303847], [], [1.4317468761037508, 1.2780518260261058], [], [1.447527675102128, 1.2684241374211673], [1.6389982544276664, 1.203735164416087], [1.3464744787571048, 1.3464187422530158], [1.2791246654261628, 1.4300667624256682], [1.2281313355003185, 1.8653480071343072], [], [], [], [], [], [], [], [1.253013543744459, 1.4759394994111785], [], [], [], [], [1.2062059565839975, 1.6214669325260052], [], [], [], [1.2006105292735274, 1.724701346674494], [], [], [], [1.2504164392796446, 1.4811972990797269], [1.2690789714250057, 1.4464116186970135], [], [], [], [1.2768616545045484, 1.4336281911099227], [1.480748986415895, 1.25063490006194], [], [], [1.3964131310896781, 1.302715450809842], [1.2543784756026375, 1.473237002591316], [], [], [1.200238535356251, 1.68455725228028], [1.4586354223278906, 1.262115151386618], [], [1.237212064101805, 1.5107189222687905], [1.582359125835028, 1.214036395677926], [], [], [1.4396818211743638, 1.2731107335937055], [], [1.8613028776420968, 1.2267332869677197], [1.2589748679990396, 1.4644223420110993], [1.4593934042889034, 1.261698202033899], [1.2116980918736342, 1.8075232371171468], [], [], [], [1.7659436895148204, 1.2043676465229767], [], [], [], [], [1.3935923479775194, 1.304886913932137], [], [], [], [], [], [], [1.2008609107200041, 1.6706713526950816], [], [], [], [1.2806585937372492, 1.4276899102244307], [1.2238143355369604, 1.547529632518664], [1.4858920610899466, 1.2481617651241885], [1.2545423869326795, 1.4729151811318832], [1.7950433994592974, 1.2091163557224376], [], [], [], [], [1.219611592061986, 1.5613386228296415], [], [], [], [1.348641706386192, 1.344265057228288], [], [1.2170543100775357, 1.8294737833899781], [], [], [], [1.2009122387231002, 1.669810489510225], [1.2082100542936378, 1.7902366294923147], [], [1.4786365532564119, 1.2516717447608297], [], [], [1.6233195763024524, 1.205914873102251], [1.7536007293537579, 1.2028813403092324], [1.4841450175018391, 1.2489937622042033], [], [], [], [], [1.5243980444605962, 1.2318505012170393], [], [], [], [1.224760119179102, 1.8553932291875637], [], [], [1.200021946737261, 1.7046846830844606], [1.2226299613472003, 1.5512793013846946], [], [], [], [1.2077575750937215, 1.7877347999506852], [], [1.6011554066594422, 1.2098676236287387], [1.5703773096877822, 1.2170942554118631], [1.202563209839564, 1.6494367742832567], [], [1.2318313170957618, 1.5244491972456096], [1.796608387904417, 1.2094219538274162], [], [], [1.726784613680846, 1.200717930954888], [1.3253178001648651, 1.3689210832343683], [1.4586776496188398, 1.2620918781222337], [1.762267504853395, 1.2038923928830234], [1.6487569072943071, 1.2026327861127597], [1.225472891608181, 1.5424435866068955], [], [], [1.6487486754521983, 1.2026336342975172], [1.2002818719499064, 1.7167866762079473], [], [], [1.3680086856463258, 1.3261260009124465], [], [1.3164887544291521, 1.3791898933626046], [], [], [], [], [], [1.3536123540704192, 1.3394232415318987], [], [], [], [], [1.298145484802083, 1.4024887420364616], [1.5362352547811224, 1.2275795217992809], [1.2351406846976858, 1.5158646775421305], [], [], [], [1.2758467482601876, 1.4352472492332828], [], [], [], [], [1.453344429287347, 1.2650735355989298], [1.2008249732091774, 1.728710496832718], [1.5470251835742095, 1.2239761502408775], [], [], [1.21489973816099, 1.5788482935996193], [1.8406112430554513, 1.220178701674883], [], [1.2094336413261375, 1.7966677181765833], [1.2873201629063848, 1.4176963477806437], [], [], [1.2264396591522169, 1.8604387845133825], [1.2000172752670966, 1.695843683281816], [1.2005878263267773, 1.7242380029496405], [1.5748051781191763, 1.215927426335442], [1.4666100803664404, 1.2578132233846873], [1.2929020056219882, 1.4097049380829905], [1.5286040715051221, 1.2302943094922325], [], [], [], [], [1.8417973800971998, 1.220527891324667], [1.5558998140572144, 1.2212149371468919], [], [], [], [], [1.4528697743999062, 1.2653430644809096], [], [1.243644252204716, 1.495697695915569], [1.5191253872277743, 1.2338622795197782], [1.7132861903159364, 1.2001765540244347], [1.2101825191861337, 1.8003934036137719], [], [], [1.2653749989227578, 1.452813615992694], [], [1.3108650519230791, 1.3860350462469224], [], [1.2005046280070695, 1.72245825811687], [1.210850093548488, 1.8035971477333093], [1.2396382243172455, 1.5048922464630856], [], [], [1.2116529401607892, 1.807317981468151], [], [], [1.2000014597039574, 1.6987918187939375], [1.753089969170599, 1.2028265341216762], [], [], [], [1.2740391538767537, 1.438165400357462], [], [], [], [1.5325844472278736, 1.2288609200140543], [1.3288993964647835, 1.3649114414728576], [1.329353485742398, 1.3644092351260402], [1.4886011105842358, 1.2468879724022086], [1.2267741654420727, 1.5385772336163408], [1.4951790547189723, 1.2438767925503171], [], [], [], [1.7309462012921195, 1.200958586262034], [1.2453548703908326, 1.4919187511507503], [], [1.2204666115494753, 1.841590004453557], [], [], [1.8553200647332408, 1.2247362022084347], [1.518261625593683, 1.2341983648932204], [1.8136133452845506, 1.2130790538770657], [], [1.689482537977811, 1.2001106292462183], [1.866725407262293, 1.2286162512631322], [], [1.83892310425705, 1.2196872153444334], [1.4722451511823946, 1.2548845893028755], [1.22831111599547, 1.534139827847186], [], [1.3786477240139923, 1.3169429354278757], [1.506311663243765, 1.239039233551701], [1.2763193724409603, 1.4344915710731985], [1.2557242429269806, 1.4706115703066185], [1.5298428202647762, 1.2298441384130632], [], [], [], [1.8521212013106318, 1.2237026767744645], [1.2944529048265199, 1.4075422191215416], [1.4327254536754483, 1.277431287378011], [], [], [1.5021520953652743, 1.240809182766414], [], [1.2048958770752258, 1.769799050587313], [1.2277715540438898, 1.8643176643878472], [1.2029103777764918, 1.7538693556457652], [], [1.210328811363216, 1.8011045351061914], [], [1.21915680387895, 1.5629240329448908], [], [], [1.208851730547388, 1.7936663088506462], [1.2407871626037794, 1.5022032104140408], [1.6848865454359703, 1.200228468706809], [], [1.7553525851356502, 1.203073354187159], [1.2030159698764509, 1.7548349687895903], [1.7591350626214546, 1.2035092706114678], [1.2096621651087185, 1.7978202825293932], [1.7663802970770461, 1.2044259327204832], [], [1.427846052134932, 1.2805572403039267], [], [1.6076654979083922, 1.2085996136311095], [1.5032716287133985, 1.240328434715697], [1.2466028732385444, 1.4892132702363436], [], [], [], [1.2021872498317365, 1.6532831318482284], [], [1.6625507320336863, 1.2014044200669372], [], [1.4157425228479277, 1.2886635359184173], [1.2016962743098771, 1.7411509047694316], [], [1.2378933915109722, 1.5090615743472038], [], [], [], [1.2839620658485702, 1.422669083319204], [], [], [], [1.2072886278247636, 1.78506176420223], [1.2091753864478632, 1.6046522222000141], [], [1.4418091541202123, 1.2718207301796598], [1.7008608589821355, 1.2000007410787363], [1.5222745186583728, 1.2326525347432737], [], [1.20241782961033, 1.6508880492109559], [1.5980073243025112, 1.2105130296891786], [], [], [], [], [1.8166255991109348, 1.2137917425299982], [], [1.5330226720459854, 1.2287054297476603], [], [], [1.2211170218384417, 1.8437744526232545], [1.7796021160627822, 1.206377165116597], [], [1.250478599572857, 1.4810696216647399], [1.7550530979227512, 1.2030400857120285], [], [], [], [], [], [1.344000312197518, 1.3489099513165672], [], [1.2808968906988671, 1.4273232980723827], [], [1.7345012580014596, 1.2011917570886417], [1.4699501697120088, 1.2560663612830556], [], [], [1.3675513798891439, 1.3265325784136084], [1.7870859667450343, 1.207642371445224], [1.2635886829258531, 1.455981225456711], [], [1.8145500747135228, 1.2132985716241154], [1.8591655239350728, 1.2260101942124981], [], [], [1.5757318903744633, 1.2156886983250383], [], [1.2030351711242642, 1.7550087162230739], [], [1.20224650710153, 1.6526559369363718], [1.8272932189993072, 1.2164749888611817], [1.7736388373459326, 1.2054524071089423], [1.2009948322511883, 1.731525268594895], [], [], [1.2025601740351972, 1.6494666491898], [1.208906881445488, 1.7939550366313801], [], [], [1.3212860708989829, 1.3735405692817715], [], [], [1.207295491013065, 1.7851015089404607], [], [], [], [], [], [], [], [], [1.2103556201718177, 1.8012342891646647], [], [1.3447386833633184, 1.3481628261516823], [1.3875507586284839, 1.3096469910883686], [], [1.2192761557734555, 1.8374939474742542], [], [1.200454275110372, 1.7213088888611308], [1.4894561536971287, 1.24649003452626], [1.4107709311183618, 1.2921439644753794], [], [], [1.3929954866420124, 1.3053504988248112], [], [1.3467436135218285, 1.3461498545819364], [1.7449891983032946, 1.202028141321192], [], [], [1.3055030335286109, 1.3927995061122593], [], [1.2073977493345012, 1.614308561458655], [1.3630190500346422, 1.3306169476540037], [], [], [1.2715828541907495, 1.4422040551586286], [], [], [], [], [1.7463543511940494, 1.2021533628461685], [1.5442646603255548, 1.224872118291838], [1.7964777458805707, 1.2093962448678117], [], [], [1.4712799531169503, 1.2553797798639659], [1.210257858015815, 1.599239718317472], [], [1.28403620548973, 1.4225578949463185], [], [1.2034616387326467, 1.641266229561424], [], [], [], [1.2063072031354318, 1.620832946726304], [1.2021216685629441, 1.6539873160372796], [], [1.4253398429333088, 1.282194066437418], [1.258139937309784, 1.4659921262021334], [], [1.21292899926499, 1.8129683152171263], [], [1.2182297335811414, 1.8337812034431669], [], [], [], [], [1.226355485162864, 1.5398098830617382], [1.3123577775114785, 1.3841938769685431], [], [1.251695601879711, 1.4785882418975782], [], [], [], [1.698889843792796, 1.2000012324483234], [], [], [1.4191333315643138, 1.2863408231867226], [1.4900638311879046, 1.2462084123471442], [1.8436889968081402, 1.2210913738548133], [1.2000500836122079, 1.6929231996043526], [1.2574437242283056, 1.4673114898086115], [], [1.511935330942996, 1.2367164148683016], [1.221674431504264, 1.8456181668722382], [], [1.2068144729073718, 1.6177319268101744], [1.2012404681017164, 1.735198428098495], [1.6920065290698934, 1.2000638996606772], [], [], [1.5372305022132182, 1.2272356923474035], [1.2303002394870413, 1.528587821395126], [1.2392411674798645, 1.5058317784634117], [1.2087184644343392, 1.6070352065981623], [], [], [], [1.631574206387039, 1.2047042189070893], [], [1.607968849069478, 1.2085427106467912], [], [], [1.2728106489721176, 1.4401745617373525], [], [], [], [1.42790095089035, 1.2805216245458841], [1.4670655270908837, 1.2575731344837293], [], [1.2536430853082359, 1.4746879836607703], [1.3617711879769732, 1.3317592218160894], [1.2010562957279398, 1.6675164662132498], [], [1.2030714126492756, 1.644664847758286], [], [1.6109729571297833, 1.2079896488509774], [], [1.2579374251751894, 1.4663749158603494], [1.378823942830619, 1.3167951718713207], [1.200525930716608, 1.6770728520419669], [1.6201240099298122, 1.206421408273913], [1.202769535400628, 1.752553449689746], [], [1.3909753475421598, 1.3069303316544112], [1.2785047959465594, 1.431035703187303], [], [1.4761721300351585, 1.2528970089263525], [1.6086324308733135, 1.2084189107462735], [1.2018685464713652, 1.656813717392562], [1.4816648209438932, 1.2501892069030158], [1.201069733856042, 1.7326892876263655], [1.2083730027083344, 1.608879774287041], [1.2620553680695061, 1.458743913313541], [1.2169569850888646, 1.82911020775121], [1.2058276695952506, 1.7761164099412152], [], [1.6988764795857993, 1.2000012622997145], [1.6071025117820072, 1.208705733106127], [1.7661188692795828, 1.20439098562961], [1.5332101346969704, 1.228639054617168], [], [1.7816475249265702, 1.206711360688932], [1.824599227552697, 1.2157737796305623], [1.395230157412303, 1.3036222218021418], [1.7595127588736006, 1.2035544022440599], [1.6223545999877373, 1.2060655996420824], [], [1.4511274727957786, 1.2663383055848902], [1.2342542694369922, 1.5181184053777559], [1.253125856785085, 1.475715582070587], [1.7265886272665933, 1.2007074555933384], [], [], [], [], [], [1.3836346254748897, 1.312814063011598], [1.2059416529890883, 1.776852779707995], [], [], [1.3944434272822328, 1.304228372834823], [1.227616116704072, 1.8638702743094646], [], [1.7982302018103415, 1.2097441204306678], [1.2008396491026523, 1.6710354683787796], [], [], [1.7745430835819642, 1.2055878958903894], [1.568400282644491, 1.2176292770161625], [], [], [1.2089600169350916, 1.6057676540055674], [], [1.2000002886864403, 1.7005372954093543], [1.3432419331980745, 1.3496806003491202], [1.2000520659747214, 1.7072154877766932], [1.2464543077122805, 1.4895331261047158], [], [1.2033827509574095, 1.7580629654200475], [1.5263512518118343, 1.2311224976044564], [1.7865182570484817, 1.207542295016828], [1.2002305268938307, 1.6848186380327106], [1.7849999523678486, 1.207277960613224], [1.7666651258986668, 1.2044641678052788], [1.2741399150033481, 1.438001549610223], [1.2886260206298727, 1.4157968172289652], [], [], [], [], [1.4234452906833006, 1.2834456905099216], [], [1.4182017780963867, 1.2869748650118713], [1.2172493781186535, 1.5698007792912207], [], [1.2000223762607025, 1.6952696976835022], [1.3468501137166164, 1.346043565084581], [1.2251768641805705, 1.5433379762335377], [], [], [1.7930373023409667, 1.2087321907827508], [], [1.200483115244638, 1.6780254273238726], [1.561756190718286, 1.2194912600219627], [1.2808375737439, 1.4274144897190981], [1.2268442252117473, 1.86162800742609], [1.307828036292417, 1.3898368963243077], [], [1.2011102671936456, 1.733302169605062], [], [1.5019050992721843, 1.240915682792761], [1.324444089776837, 1.3699124990302547], [1.2260979259744942, 1.859426548085079], [1.7872538945145446, 1.2076721032766429], [], [], [1.2171056835957916, 1.8296652582016952], [], [1.2182167321867574, 1.5662656257531613], [], [1.8280443827772421, 1.2166733650633403], [1.2065842940279605, 1.7808760848465974], [1.3038492357806875, 1.394935134752534], [1.7020583747929816, 1.20000423692474], [1.4462432361416384, 1.2691781054819384], [], [1.7730991217738203, 1.2053723436807275], [1.4754794058713658, 1.2532444708656363], [1.2000085460831964, 1.702923355975761], [1.2550951876799008, 1.4718340341452796], [1.4320062682154988, 1.277887029665971], [], [], [1.557977759519417, 1.2205944480829665], [1.7595454404474924, 1.203558321127331], [1.2402788627957373, 1.5033874978349049], [1.2945790960890091, 1.407367310998933], [], [], [1.215445414808372, 1.5766839265555], [1.22045767310278, 1.5584402715670875], [], [1.35775478320263, 1.3354890789299705], [], [1.7215188966560349, 1.2004632775393715], [], [1.2853269102951455, 1.4206324487800532], [], [1.2006993735405183, 1.673563577829645], [1.5002968924123077, 1.241612970493472], [], [], [], [1.3673323060997324, 1.3267277060441294], [1.3380577644940779, 1.3550393962247633], [], [1.2948750462949956, 1.4069577302068554], [], [], [1.2065913592365367, 1.7809191770839996], [1.2033249122696268, 1.642433888197776], [1.2567580811058243, 1.4686202227181275], [1.5055713890725293, 1.239350984747808], [1.4025959123391873, 1.2980661638495214], [], [1.2083089256775228, 1.6092261743033371], [], [], [], [], [1.2508361704713513, 1.480336952941194], [1.2302384057788855, 1.5287573517057245], [1.797207788918822, 1.2095403729423657], [], [], [1.3516002465729648, 1.341367023529652], [1.6922985769712207, 1.200059315434989], [1.5094135940237794, 1.2377480969676087], [], [1.614831247812647, 1.2073071102087536], [1.2364185960409173, 1.5126706592566828], [], [], [1.2398739795369587, 1.5043369087108025], [1.6469802338817714, 1.2028190426004146], [1.2066770965124674, 1.7814402412486032], [1.6455036391560869, 1.202978726154735], [1.5731985335865892, 1.2163457969629452], [], [1.4580795221328349, 1.2624220270757194], [], [1.2068781346810626, 1.782648810907186], [1.8399007546282387, 1.219971064565427], [], [1.3139049604685824, 1.3823042013982034], [], [1.558947592568598, 1.2203082048254257], [1.223897844330277, 1.8527309312701354], [], [], [1.219988707736706, 1.5600387221417202], [], [1.3729869567368036, 1.3217640028557], [], [], [1.4921443798610539, 1.2452516727060403], [], [1.2455229747936298, 1.4915518444323181], [], [], [1.2296278859313878, 1.5304415313037283], [1.4015232990320203, 1.298862044953022], [1.7033235862843195, 1.200011046347811], [], [1.291854207765562, 1.4111799655818127], [], [1.7314318860139644, 1.2009889414636132], [1.8228227595321256, 1.2153201368522581], [1.219240736160336, 1.8373700485271232], [], [], [1.2951756981218538, 1.4065425335608723], [1.510313618060007, 1.2373780414782334], [1.4728497934947862, 1.254575726206307], [1.8646133072696955, 1.2278745303738288], [], [1.2227604165669295, 1.5508612055680033], [1.5539565494777876, 1.2218041085919222], [1.2002280882499186, 1.6848991316253352], [1.568083439123359, 1.2177158296538446], [], [], [1.7324692603527625, 1.2010553666666566], [1.475386919083263, 1.2532909628392421], [1.6551636989996565, 1.2020143514993564], [], [], [], [], [], [1.2618228725462355, 1.4591664371887352], [1.5177501704790413, 1.2343982392219919], [], [], [1.565915589721257, 1.2183140328801327], [], [], [], [1.214071912801262, 1.817787495394782], [1.2153907201145073, 1.5768990420473334], [], [1.2146613614121002, 1.5798067976396168], [], [], [1.3553136830013255, 1.3377965449172395], [1.4521680724009371, 1.2657427770750003], [1.2286826107091628, 1.5330870929134908], [1.2113270861467935, 1.59417569624034], [1.2013728979280258, 1.6629728062188722], [], [1.2115051441319231, 1.8066432172734246], [], [1.2000034556560886, 1.7018589362945489], [1.6312951783788385, 1.2047428471127304], [], [1.2210568848968686, 1.5564260034152817], [], [1.208804825648297, 1.6065799770199112], [], [1.2600475968318539, 1.4624249951140207], [], [], [], [1.3087226302381336, 1.3887091072449504], [], [1.210562301305449, 1.5977711435230644], [1.2226726010647457, 1.5511425036294624], [1.2106650173374465, 1.802719398083509], [], [], [1.7963313677087394, 1.2093674821260176], [1.870146211972165, 1.2298401691429572], [], [1.2110194111682693, 1.5956065914639534], [1.291046725898037, 1.4123244542869786], [], [1.413477708506037, 1.2902379025860875], [], [1.2357897518386136, 1.5142344340251825], [1.2009422615584189, 1.6693181861426947], [1.3683725716968382, 1.3258031951004507], [1.4869932368361767, 1.2476416035415383], [], [1.5481117339761383, 1.2236283439957152], [], [1.4934372850794753, 1.2446629327578722], [], [1.8633511961308542, 1.2274363675412387], [], [], [1.2016945799826553, 1.6588696172964843], [1.2716021514676477, 1.4421719887738111], [], [], [1.8501401227822394, 1.2230744884880511], [1.4011665855422366, 1.2991277131011492], [], [], [], [], [1.3383546231485712, 1.3547281919965255], [], [1.4297546404990138, 1.2793250118343344], [], [1.8356048684488888, 1.2187398628049904], [], [1.2139606072941183, 1.817327357159776], [1.3096429585816414, 1.387555796637054], [1.2519804930424108, 1.4780123395648337], [], [1.2186659359285574, 1.5646577716879602], [1.8273687366848248, 1.21649487601959], [1.5793583396999935, 1.2147726411257729], [], [1.632974236342867, 1.2045128185248601], [1.3061868548314097, 1.3919233752904598], [], [], [1.4986064577826141, 1.2423531479916703], [1.6266043358937907, 1.2054162593752111], [1.2113063101674895, 1.8057283193751132], [], [1.5341534300724786, 1.2283063332593114], [], [], [], [], [], [1.305658708787004, 1.3925996973904107], [1.412494032013496, 1.2909274900801284], [1.7900842642303945, 1.2081821217787336], [1.6929435379844753, 1.2000497961358316], [1.2116677890647587, 1.5926144713515877], [1.6485040846152978, 1.202658899045442], [], [1.251300649231144, 1.4793897268493437], [], [1.7047409601333225, 1.2000224772082106], [], [], [1.450942086774415, 1.2664447487808308], [1.2348122279758964, 1.516696053617903], [1.2014423256241669, 1.662049435828161], [], [], [1.2076374341081992, 1.6129419520753987], [], [], [1.567047351388056, 1.218000421963806], [], [1.4041096169665093, 1.2969505226051097], [1.205275305806432, 1.7724394709746047], [1.4753467512008058, 1.2533111622124777], [], [1.619854503210502, 1.206465098149721], [], [], [], [], [], [1.486620053471619, 1.2478175164609477], [], [], [1.2533316534156873, 1.4753060121862707], [1.2219129138349814, 1.8463992419455855], [1.351417051927339, 1.3415450818959622], [1.33483965394362, 1.358447776075188], [], [1.2017892185232388, 1.7422612969549565], [1.2183315201631468, 1.8341472158922987], [1.2000187515435408, 1.704330264647835], [], [], [], [], [], [], [1.4764155278333004, 1.2527752424049643], [], [1.3849669289806918, 1.3117292643474872], [1.2003433615662034, 1.7185268364552178], [1.7755254426956437, 1.2057370057291088], [], [], [1.7295860175249134, 1.2008760999841668], [], [1.3990710234577728, 1.3006984208931203], [], [1.2648697424162134, 1.4537041231870342], [1.392021779600824, 1.3061098938031614], [], [1.3832473483428898, 1.3131308261592953], [1.6137548529461236, 1.2074943912911698], [], [], [1.4481513338071024, 1.268059900753752], [], [], [1.3823018681516777, 1.3139068803771738], [], [1.200163955037035, 1.7128034431221046], [1.2197628376249334, 1.8391842946382384], [], [], [1.2459507811083443, 1.4906216180598446], [1.2436928822287072, 1.4955891043235328], [1.221042313662525, 1.556474620020524], [1.6925893571715611, 1.2000549206434077], [], [1.207135044402821, 1.6158326931392546], [1.2042941272404493, 1.6346112569956261], [1.6769899834795419, 1.200529741486314], [], [1.6179194927352216, 1.2067832217704302], [], [1.3022172694558936, 1.3970661800312238], [1.3450369210633633, 1.347861941006339], [], [], [], [1.31693915048252, 1.3786522357834947], [1.7422433897598866, 1.2017876998491563], [], [1.2378770221361741, 1.5091011961004734], [], [], [1.2832814387152223, 1.4236928508330902], [1.558589778720558, 1.2204135642892937], [], [], [], [], [], [1.5779920823247946, 1.2151143763478234], [1.449267795078002, 1.267410863040976], [1.7308064012866071, 1.2009499367400416], [], [], [1.2214020561185905, 1.8447204481491382], [], [1.6152095279521888, 1.2072418688140099], [], [], [1.4125313069608496, 1.2909012948903862], [1.2000000849358021, 1.7002914374630131], [], [1.403894888976283, 1.2971082487495775], [1.2008088336212066, 1.671571503568079], [], [1.408086748365814, 1.294060776075585], [], [], [1.2473209259163154, 1.487675588104575], [1.6678434391608956, 1.2010351158698631], [1.2000817712982272, 1.7090423786517714], [1.2353164863114228, 1.5154214744179653], [], [1.2043310037475883, 1.7656676949049288], [1.3666174616006994, 1.3273660199465984], [1.2025978038604492, 1.7509024093295398], [1.2133380655262964, 1.8147177472508618], [1.384570354441219, 1.3120513710519628], [1.5865844035636716, 1.2130329554425763], [1.2024836817156124, 1.6502253775428897], [1.2725061415661232, 1.4406758765534593], [1.4642793895319772, 1.2590512571731463], [1.207573691191921, 1.613303227316985], [], [], [1.2047788100452053, 1.6310364370137602], [1.2636365267080178, 1.4558956797257419], [], [1.2872142738083805, 1.4178512019298022], [1.2978070761278875, 1.4029463819658123], [1.4701526909888492, 1.255961471783886], [1.6723726662655796, 1.200763853040741], [1.2132539349966707, 1.8143602562246814], [1.7369500794347315, 1.2013671775446717], [1.2096302754999722, 1.7976602953802965], [1.74333851599497, 1.2018817680195255], [1.8050961520572373, 1.2111699693934894], [], [], [], [], [], [1.2416977230536281, 1.5001024688852533], [], [], [1.2685428761243953, 1.4473248127397724], [1.3208452965518442, 1.3740525949587248], [1.2046938125069984, 1.7683504252448186], [1.4464215364091844, 1.2690731352039868], [1.5849473110461139, 1.2134171409056003], [1.2625733555580902, 1.457806005994593], [1.3590943465964167, 1.3342359565546718], [1.8608785120919225, 1.2265888633047495], [], [], [], [1.2260601207693116, 1.5406858735868016], [1.2000069451488495, 1.7026353558800205], [], [], [1.7995308240052805, 1.2100065152751214], [1.232139013506425, 1.5236307926046644], [1.3291193635727006, 1.364667995080575], [], [], [1.382514001100148, 1.3137324236975574], [], [], [], [1.2230741854946754, 1.8501391603094701], [1.7490063217069767, 1.2024074152152664], [], [1.2018480269495526, 1.657051056521186], [], [1.2656340372900243, 1.4523587061109635], [], [1.2211347758387237, 1.843833574275864], [1.3254074288675317, 1.3688196780417552], [1.2243721437435098, 1.5457983711082939], [1.845931630286507, 1.2217699724171198], [], [], [1.2045707287944054, 1.7674524812938222], [1.233717939889918, 1.5194978104855845], [1.7794877066998973, 1.206358728950272], [1.744584896222595, 1.201991780159383], [1.301169165749579, 1.398447408150563], [1.265887101301617, 1.4519153548006494], [1.3293119395856108, 1.3644551268962404], [1.6714297337360384, 1.2008169274849092], [1.2089937061644784, 1.794407729630076], [1.2975161031693898, 1.4033407463232492], [], [1.2161528111182238, 1.5739369292330117], [], [], [1.6228040427646482, 1.205995157729686], [1.857650618504944, 1.2255041807507587], [], [], [1.2198382378857064, 1.5605558097183798], [], [1.3786654963151053, 1.316928026682214], [], [1.243968334660492, 1.4949753180524967], [1.6890505893987484, 1.2001199039694765], [1.6899856679512075, 1.2001002969058527], [1.4404337073713578, 1.2726531388543703], [], [1.201819210080663, 1.7426133846971292], [], [1.2391774063015868, 1.505983152440137], [1.696582853099245, 1.2000116770292943], [1.2023197640501495, 1.7481080320206643], [1.2115090739576955, 1.8066612168237908], [], [1.2703534549929505, 1.4442582428239272], [1.2060612368739456, 1.777617641561075], [], [], [1.203610660236869, 1.7599801914762108], [], [], [], [1.2249680055666712, 1.5439724246657218], [1.2317470431321262, 1.5246741080601809], [], [], [], [1.7348942489327581, 1.2012190948007144], [1.7501234752094312, 1.2025187066502605], [], [1.5361211506335828, 1.227619091484066], [1.4170740192164843, 1.2877465713936562], [], [], [1.2595565628197423, 1.4633365709602764], [1.7482014273951965, 1.2023288009166437], [1.641935870990134, 1.2033828870021437], [], [1.2000008576740633, 1.7009261065422856], [1.2285243963817605, 1.8664654774805174], [], [1.601193290201206, 1.2098599852095964], [1.3609457251474555, 1.3325191179065021], [1.2227983762656942, 1.8492602100539257], [], [1.2432476362580873, 1.4965859439070754], [1.3173297459012132, 1.3781872025105746], [1.6489536076176563, 1.2026125596431412], [], [1.21609385548379, 1.8258365737751026], [], [1.7378115874769833, 1.2014317661016995], [], [1.5978280442000912, 1.2105504199123045], [1.2278912606140362, 1.8646612832313538], [], [1.2649532517568864, 1.4535566457721105], [1.2293484462013282, 1.5312187365052148], [1.53548866683444, 1.227838987992348], [1.3804487943258779, 1.3154391765244218], [1.4563468516802534, 1.2633844444893476], [1.320321068719709, 1.3746633910211514], [], [1.3344070833811665, 1.3589108337719669], [], [1.289647988299397, 1.4143232132404382], [1.8084493544765616, 1.2119029425271886], [1.2544380940979845, 1.4731198818561582], [], [1.3405770912230506, 1.3524152295535423], [1.3375029394576856, 1.3556224730064668], [1.5216652841198874, 1.232884672578645], [1.2182276613789331, 1.5662262591552882], [1.3109529374268023, 1.385926150239842], [1.3102459105222306, 1.3868039755435024], [], [], [1.2162046429472158, 1.5737381589942196], [1.2197866927556849, 1.8392665772735042], [], [], [], [], [], [], [], [], [], [], [1.6128071660942525, 1.2076612855812732], [1.2000598586342677, 1.7077366046306968], [], [], [], [], [1.228049820566124, 1.5348848034482216], [1.8411051659817974, 1.2203237215233076], [], [1.203142374381284, 1.6440312599343914], [1.395551447321529, 1.303375393133527], [1.2007037370020515, 1.7265187057807025], [1.3074087296454628, 1.3903678078083437], [], [1.832299161695597, 1.217820643520855], [], [1.2043888724010552, 1.7661030271629263], [], [1.2019205009814085, 1.6562185809116596], [], [], [], [1.5592555557697128, 1.2202177562494547], [1.6251983925347595, 1.2056269429665325], [1.2002966630495708, 1.6827786457963982], [], [], [1.201585096624576, 1.7397817055097782], [1.213306200349757, 1.8145824828759147], [], [], [], [1.251265659060796, 1.4794609076334577], [1.2001356879641372, 1.6883522726288145], [1.2001012380739424, 1.6899387960563972], [1.3251034688893906, 1.36916380040686], [1.214575170384251, 1.5801553722834396], [], [1.8054347878926305, 1.2112428972362284], [1.5723356661509238, 1.2165728412026569], [], [], [1.2134067202668564, 1.5849913911111755], [], [1.855545198455781, 1.2248098367628475], [1.6489196620185895, 1.202616044617737], [1.5989160183880018, 1.2103245680438264], [1.3161814523439719, 1.3795576144215356], [1.677372976606689, 1.2005122445821534], [], [1.752246679798652, 1.2027372078568344], [], [], [1.3642064563396854, 1.3295371867028374], [1.5100150647642305, 1.2375005682344458], [1.2964724493351414, 1.4047619335952426], [1.2241995065870506, 1.8536681179294974], [1.3504595003332445, 1.342478757144817], [1.2300418140540939, 1.5292976172912836], [], [1.3031708944300626, 1.3958180462740046], [1.221761776544572, 1.5540952309682918], [1.3259856919127717, 1.3681667627466592], [], [1.2000059934156737, 1.7024481380175], [], [], [], [], [1.2002966778258377, 1.7172217829537293], [], [], [], [], [1.2964911154740595, 1.404736422651504], [1.2542298360774549, 1.4735293375369176], [], [1.581607081648467, 1.2142190649230793], [], [], [], [], [], [], [1.8662612802546814, 1.228452349504237], [1.6713440212881931, 1.200821840537801], [1.8109327896206524, 1.2124613695439304], [1.2109562419450544, 1.8040970830883163], [1.2271965772552318, 1.8626558435496001], [1.31766317462358, 1.3777911361227302], [1.5460969450395028, 1.2242754476865565], [], [], [], [1.2819608991574227, 1.4256948593869785], [], [1.6773545435378012, 1.200513079949416], [1.2116163416007348, 1.8071513052116022], [], [1.204379304121846, 1.6339687512063077], [], [], [1.2000983487431438, 1.7099166058038318], [1.3868705513230695, 1.3101924213521734], [1.2012941848056993, 1.6640485064094968], [1.2000016309268706, 1.7012770764310834], [1.212459239796617, 1.5890765708233496], [], [], [], [1.2588516498629132, 1.4646531640932339], [1.4441733813884021, 1.270403979057352], [], [1.5390408866217935, 1.2266162615588683], [], [], [1.2124863688672387, 1.81104260200369], [1.317681325062758, 1.3777695998292039], [1.2542607390796245, 1.4734685203461613], [], [1.240786512586347, 1.502204719527005], [], [1.200164683098638, 1.6871681654423392], [], [1.3508951933798758, 1.342053308445621], [], [1.2467913042605816, 1.4888084326821371], [1.2086896635461708, 1.6071875369703765], [], [1.2693765158152956, 1.4459066807871057], [], [1.7647614482795684, 1.2042117843103441], [], [1.3013476650443443, 1.3982114716653338], [1.2229947361167077, 1.5501134488100057], [1.5273277309255475, 1.2307620140134858], [1.2842413696563728, 1.4222505422241276], [], [], [1.710357771919178, 1.2001072949513363], [], [], [1.2223405244851162, 1.552211551700256], [1.6372504282671096, 1.2039531360371898], [], [1.504436318029961, 1.2398317195912767], [], [], [1.230700642369834, 1.5274946002934588], [], [1.348811194211158, 1.3440977343587046], [1.2466621305911452, 1.489085855951195], [], [], [1.2508469114928498, 1.480314991215859], [], [1.2361942539943056, 1.5132267953583776], [], [], [1.2041424181544822, 1.76422817548643], [1.7481552222072134, 1.2023243279261342], [1.3000329675461584, 1.3999560483028066], [1.4718685075994289, 1.2550775099243823], [], [1.30846074616647, 1.3890385671703283], [1.2006561384957188, 1.6743932044567589], [], [1.702337235425547, 1.2000054626992755], [1.2010302759449898, 1.6679186272664805], [], [1.208491804115615, 1.6082411128092922], [], [], [], [1.2010648701606057, 1.667385030857798], [], [1.2225432620096186, 1.5515578787958608], [1.3361218324570694, 1.3570821101406358], [], [1.8473904259970548, 1.2222175575385732], [], [1.4042334243345356, 1.2968596612603434], [1.212125219300623, 1.59055504416587], [1.220776733264191, 1.5573638873950229], [], [1.8573128139824404, 1.2253920791253836], [], [1.2028723730783786, 1.753517497617855], [], [], [1.2104675413174752, 1.598225878062042], [1.2032693227908964, 1.6429155509846556], [], [1.2009308390932074, 1.6695045473588284], [1.5661472859279308, 1.2182495968496332], [1.2026906545313623, 1.6481983117113432], [1.5083674799083315, 1.2381807959349067], [1.4189285748201599, 1.2864799231628847], [], [], [], [1.4316982886943432, 1.2780827193507522], [1.579396848169485, 1.214763068420647], [], [1.7278709168735198, 1.2007773923462306], [], [1.7725183580653725, 1.2052868631787685], [], [], [1.5384051246851116, 1.22683290871832], [1.396263282425641, 1.3028300031508497], [], [1.2156530162843098, 1.8241289626377057], [], [1.3634363348657745, 1.3302366982630416], [1.2108420343268027, 1.803559087570619], [], [], [], [1.2025038459699282, 1.7499757613777625], [], [1.2306359862915286, 1.5276705984590153], [1.2727967370078748, 1.4401974363311996], [1.2133047633443403, 1.585423621035174], [1.8686960943103708, 1.2293179122120468], [1.6158454132882767, 1.2071328723323302], [1.5085392809430114, 1.23810954430928], [1.2526476892436862, 1.4766708481613149], [], [], [], [], [], [1.2483796323836065, 1.4854328926558555], [], [1.6176493504631049, 1.2068282545392006], [1.3056074611858552, 1.3926654504815097], [1.2000278922998528, 1.7052812424553734], [1.2014784923737778, 1.6615772667021396], [], [], [], [1.2041915064671929, 1.7646060193846382], [1.2133370737309406, 1.5852864602793724], [], [], [1.37927721967436, 1.3164157221936863], [], [], [1.3397496554499149, 1.3532728893617563], [1.4771390263308017, 1.252414269200618], [1.5447840284280572, 1.2247021963347844], [1.2129351866221874, 1.8129949891333081], [1.2000004404919962, 1.6993363044356151], [1.2028760597875658, 1.6464482673701004], [], [], [], [], [1.2024062413653236, 1.6510055986074386], [1.2294321617295765, 1.8690145247767198], [], [1.207395154842062, 1.61432347738777], [1.2005205293487313, 1.722809173547685], [1.205323324889274, 1.6272333379809323], [], [1.7303067705789166, 1.2009193455391434], [1.2122174885902188, 1.8098554575920864], [], [], [1.2768647023509796, 1.433623349590331], [1.526542553925527, 1.2310516932525277], [], [1.2742883327875927, 1.4377604598859421], [], [1.3535869157070417, 1.33944768059179], [1.333239508778444, 1.3601665965816145], [], [1.2490669444735563, 1.4839921773787226], [1.4570952666252919, 1.262967632200815], [1.201187183945581, 1.7344350771722743], [], [], [1.3201263744186411, 1.3748907436142834], [], [1.8593637040501905, 1.2260767890982724], [], [], [1.2163239351917379, 1.8267180505358012], [1.545799300812771, 1.2243718423283059], [1.6371285260351178, 1.2039685718006536], [], [], [], [1.3985485060291045, 1.3010927466406317], [1.7681391363795997, 1.2046647013451977], [], [], [], [1.646484017127663, 1.202872210013152], [], [1.627612923042582, 1.2052676369090447], [1.84112453814274, 1.2203294206082695], [1.4171054984636575, 1.2877249692250277], [], [], [1.3186938138665618, 1.3765721217699811], [1.207121711030208, 1.6159108076967663], [], [1.201171135076089, 1.734201805781604], [1.2744930157133076, 1.4374284738909326], [1.5862320822592797, 1.2131151461660152], [1.228824682446771, 1.8673135383900952], [1.3501625073989103, 1.3427693619374417], [1.6605108506318849, 1.2015618322377561], [], [1.7204916187061245, 1.2004200829068457], [1.3219697739720144, 1.372749105105532], [], [], [1.202417739977441, 1.749111042656845], [], [], [], [], [], [], [], [], [], [], [], [1.8169089673781293, 1.2138598007296872], [1.5003041090291447, 1.241609826534909], [1.2042552250797587, 1.6349068502891493], [1.229160298895398, 1.5317443140225893], [1.2027570353141406, 1.647564953795986], [1.2707817157241772, 1.4435401309301608], [1.204929400397419, 1.7700364291575525], [], [1.3223463276979566, 1.3723146268189854], [1.2059479255790317, 1.623106906939973], [], [], [1.833309377464008, 1.2180989625657994], [], [], [], [1.2000998475668607, 1.7099918765666995], [], [1.241655911463128, 1.5001983571055932], [], [], [1.6934344704459638, 1.2000431080366276], [1.2069063779904639, 1.6171828524186163], [], [1.319255892782583, 1.375910622174666], [1.7594036121333068, 1.203541330153742], [1.7148786090251522, 1.2002214220342404], [1.3357816512328344, 1.3574434434705425], [], [], [1.4849709403020726, 1.2485993980005952], [1.2091881681162198, 1.7954135508347104], [1.2003296100998315, 1.7181521749940223], [1.7992090920548527, 1.2099412728522716], [1.2412389250184797, 1.5011576602385701], [1.2006542369971989, 1.674430311477252], [], [1.2292288289901787, 1.8684473346362047], [1.2114817514537415, 1.5934639927663132], [], [1.4511050049556447, 1.2663512003454058], [1.205352061586667, 1.6270382495862417], [], [], [], [1.362845539159109, 1.3307753129392779], [], [1.6090937359745858, 1.208333394299611], [1.507438255511036, 1.2385674756160259], [], [], [], [], [1.2656088782470278, 1.4524028406015237], [], [1.445159420617344, 1.269818318497972], [], [1.6138163627859077, 1.2074836239508886], [1.384908954128853, 1.3117763108569662], [1.242705028457871, 1.4978087316368895], [1.3706641000327484, 1.3237848155739051], [1.5911358777585884, 1.2119952839483956], [1.2011233601499443, 1.6665022655703736], [1.2000308243997964, 1.7055518870353128], [1.2315306175958578, 1.5252532181987846], [1.201608356701824, 1.7400720587260476], [1.278609347191844, 1.430871930624254], [], [1.2540153067061062, 1.4739520994400712], [1.214182609879848, 1.818243238524848], [1.7039685153025805, 1.2000157493617492], [], [1.249309707059232, 1.4834861208860624], [], [1.402517448779663, 1.2981242334757672], [1.825527233364943, 1.2160135191105612], [1.2005135958296522, 1.7226568322802633], [], [1.473073252452556, 1.2544618408626051], [1.2085327998098605, 1.7919782101221005], [], [1.449008087496237, 1.26756149586594], [], [1.3571378842821002, 1.3360692791128432], [1.2584025255683202, 1.4654969710738004], [], [1.3042454571784439, 1.3944213000942292], [1.8503221717290648, 1.2231318372058608], [], [], [], [1.4355242841579567, 1.2756739511533155], [1.5137993791012114, 1.2359640867595423], [1.2004921275144358, 1.7221784878868085], [1.201481554422317, 1.7384624416647032], [1.5060838159011023, 1.2391350376254207], [1.7843793787860276, 1.2071713072114367], [1.8619261976016237, 1.226946190660851], [1.2028503938065978, 1.7533129352197474], [], [], [1.4541131321217422, 1.2646384856179633], [], [], [1.2002002861743373, 1.6858491675232232], [1.2914606919380542, 1.4117368671365231], [], [1.4652530893646434, 1.2585321212736358], [1.228043735299079, 1.8650978019525222], [], [1.2138458037771815, 1.5831492512007503], [], [1.2803564576644226, 1.428155747943701], [], [], [1.5452698338242894, 1.2245438236017572], [1.2804186566230273, 1.4280597560308974], [1.307245742770926, 1.390574575336094], [], [], [1.204048773184698, 1.6364989715012668], [], [], [], [1.2162781153993043, 1.5734569703288592], [], [1.6903440335198234, 1.2000932463835543], [1.225533579368808, 1.5422609252803068], [1.3823093953312147, 1.3139006867330871], [1.7966422627580394, 1.209428625938074], [1.2741522428915681, 1.4379815125497477], [1.205636438622811, 1.6251356614771613], [1.6358442016519958, 1.204133048552003], [1.2114265422741386, 1.5937174689528146], [], [1.2011493139366947, 1.6661179543980953], [], [], [], [1.2183883677033371, 1.565648834629006], [1.3576596636791056, 1.3355784115509937], [1.7410255889966837, 1.201685941350763], [], [1.2160499402550258, 1.8256675760601588], [], [1.547714160293877, 1.223755290816789], [], [], [], [], [], [1.7485711820442917, 1.2023647517761424], [], [], [1.5363262540546159, 1.2275479866820271], [], [1.4130252853088425, 1.2905546274190796], [1.2014378635984482, 1.7378919008063785], [], [], [1.3633439607306077, 1.3303207995796282], [1.595774647817795, 1.2109835626867995], [1.3465744550441336, 1.3463188099818582], [1.6626299479996034, 1.201398476523098], [1.2096640042477496, 1.797829501019115], [], [], [1.2063502037460183, 1.779434744654984], [], [1.4439235160720514, 1.2705528735931522], [1.20019590522138, 1.6860047564321232], [], [1.808928584687247, 1.2120096687043551], [1.505411019193676, 1.2394187058197477], [], [1.3190539573505884, 1.3761480082047468], [], [], [], [1.78688929998157, 1.2076076264312041], [], [], [1.646664544948909, 1.202852809286331], [], [1.2559358800733857, 1.470202137969472], [], [], [], [], [], [], [1.212374516321706, 1.810550385198378], [], [1.2225070538503697, 1.551674390689449], [1.622367042211457, 1.2060636439124952], [1.4494848936032394, 1.2672851037149058], [], [1.2024298294029958, 1.6507666237998233], [], [], [1.2063530972288536, 1.7794527242104032], [], [1.6327020556003866, 1.2045497132107132], [1.201472429814624, 1.6616560074449074], [], [1.384523822619786, 1.312089209346314], [1.342820583467274, 1.350110211058766], [1.2002592045005556, 1.7160977424995685], [1.2225666766491132, 1.551482587707274], [], [1.8615067463626807, 1.226802820296506], [1.582399709513164, 1.2140265730748112], [1.4698951808118266, 1.256094861275094], [1.4544305243784814, 1.2644593788830112], [1.2611581416099973, 1.4603798353126163], [], [], [], [1.3747651073704863, 1.3202339343539649], [1.2000071396819387, 1.697327991211889], [], [], [], [1.4459351625511663, 1.2693597111601171], [], [], [], [1.5414197531351723, 1.2258140604105914], [], [1.2668434600174132, 1.4502493005609118], [], [1.4087151887678904, 1.293609598113496], [1.2402645705508772, 1.50342091945166], [1.3875995854856003, 1.3096079137441037], [], [1.2775509350409981, 1.432536380950109], [1.5701918876808294, 1.2171440649881855], [], [], [1.545862794887525, 1.224351261958875], [1.445172820746777, 1.2698103805136092], [1.6501521050124541, 1.202491017804391], [1.241366548851861, 1.5008634702322359], [1.3880589631708231, 1.3092407524549954], [], [], [], [], [], [1.6213732512432204, 1.206220864778656], [1.2100127708089092, 1.6004383847577917], [1.2248185413474904, 1.8555717884221732], [], [1.260855683307105, 1.4609345923887558], [], [], [1.301604608388418, 1.3978723581949934], [1.2025475809321464, 1.6495907670804173], [1.4073673969863676, 1.294579034023318], [], [1.3504188666781287, 1.3425184882747137], [], [1.3274959234461872, 1.3664723205627587], [1.8668229385872261, 1.2286507588198294], [1.2024898055504203, 1.749835794553126], [1.2029166483515998, 1.7539271871507587], [1.8262973938827993, 1.2162139230006583], [1.5889925189174037, 1.2124783705888558], [1.2269261331831995, 1.8618675895137755], [1.3090173563241836, 1.3883390105510964], [], [], [], [1.2529985545195488, 1.4759694044591516], [1.203276715707277, 1.75714874313098], [1.2177193848198784, 1.8319295578006825], [1.2581596421706254, 1.4659549227323714], [1.3095677880265282, 1.3876497353074564], [1.2012892835998703, 1.6641165588652709], [1.5857531653718893, 1.2132273007065235], [1.4529306648337734, 1.2653084500240213], [1.8279470350443452, 1.2166475858926935], [1.2264156476268364, 1.860367893255761], [], [], [], [], [1.8583264199460237, 1.225729249534535], [1.797822984678458, 1.2096627041835404], [1.2955297978370266, 1.4060546724946228], [1.364516305298886, 1.3292565704025359], [], [], [], [], [1.2007758166739244, 1.6721573208470724], [1.3393794786071491, 1.353657915421258], [], [1.6736757191274287, 1.2006934486344667], [], [1.292772352992699, 1.4098868436059868], [1.4132861060629232, 1.2903719455122262], [1.6396763495941882, 1.2036522819618112], [], [], [1.5618234018134896, 1.21947192827723], [], [1.2571125236569063, 1.4679425000168156], [1.5504853334621012, 1.2228780402349302], [1.3178906173301301, 1.3775214430762086], [1.8006097937843961, 1.2102269205084242], [1.453648058220014, 1.2649014815225976], [1.3592880710481676, 1.3340554940022713], [1.3827194972919374, 1.313563611183782], [1.677642760509466, 1.2005000962539003], [], [], [], [1.5105749184766784, 1.2372709880611732], [1.2099467294714634, 1.7992360420627758], [], [1.2002849094989707, 1.7168768576917668], [1.2633682583527037, 1.456375858778222], [1.6519323163934851, 1.2023158654400323], [1.2078245147330766, 1.7881095437638201], [], [1.2131703612223856, 1.8140039596139428], [1.381710479734317, 1.3143942670433422], [], [], [], [], [1.4648093289211577, 1.2587683734845339], [1.7975023988884444, 1.2095988558220947], [], [1.233370865177438, 1.5203969640157848], [1.2000358645087283, 1.694011408974942], [], [], [1.575101854151508, 1.2158507945234147], [1.2053347892147295, 1.7728445553131043], [1.2599570943943523, 1.4625926681289325], [], [1.5438374377364665, 1.2250123642164061], [1.4082272686159798, 1.293959764037222], [], [], [1.7001380356776197, 1.2000000190538487], [1.6104740091856997, 1.208080192542811], [1.4155756436889364, 1.288778909177755], [1.2020240522510846, 1.6550560853555292], [1.8502560423805405, 1.223110996427746], [], [1.5029708854984176, 1.2404572620106782], [1.7587450570138599, 1.203462973911876], [], [1.259875928691406, 1.4627431732178233], [1.4813615636298947, 1.2503365323470947], [1.623339819984464, 1.2059117317725652], [], [], [1.2000290342948865, 1.6946117301574415], [], [1.5959128123310284, 1.210954135726347], [1.3425406238725492, 1.350396232259185], [], [1.836785153744524, 1.2190739955927867], [], [1.4786903614944125, 1.2516451807948015], [], [1.84592924951029, 1.2217692459310427], [], [], [], [1.2257916535867988, 1.8585132303375882], [], [1.2065208863266044, 1.7804882871486274], [1.6125441682037154, 1.207707934773655], [], [1.2854047855378687, 1.4205168911273895], [], [1.2167260555201067, 1.828243107365835], [1.2053804635966552, 1.7731540443730927], [1.2010466866693572, 1.6676643986235984], [], [1.477096301392307, 1.2524355452596678], [], [1.5622964252342029, 1.21933616165066], [1.2773363207052788, 1.4328756577826554], [], [], [], [], [1.2595552716614211, 1.4633389738914424], [], [], [1.511251759580838, 1.2369944905957704], [], [1.5313127496814454, 1.2293147425508577], [], [], [1.4088760229219734, 1.2934943666192649], [], [1.3571117547000782, 1.336093897776994], [1.400954478647515, 1.2992859171940416], [1.2073610069051477, 1.7854799536879273], [1.8071242317320613, 1.2116104024696925], [1.377054445121145, 1.3182852261386933], [1.8609204772244574, 1.2266031263201531], [1.3737121598614626, 1.321138223915729], [], [], [], [], [1.3871111107030574, 1.3099993039050755], [1.5774051434277636, 1.2152624409620885], [1.2640108577207507, 1.4552277225366308], [1.2519432518070688, 1.4780875163521074], [], [1.8071503053471722, 1.211616122231694], [1.6440431807397444, 1.2031410317018771], [], [1.4443176782411042, 1.2703180823679212], [1.486895603233679, 1.2476875901781352], [], [1.488057003695096, 1.247142222858766], [1.2148142295675628, 1.5791911916709618], [], [1.2086452132699004, 1.607423147831554], [1.7498345169361755, 1.2024896775726779], [], [1.6614572420538662, 1.2014877576128087], [1.228830345199858, 1.5326705154627105], [], [1.5848688403556688, 1.2134357020095377], [], [1.2001009425719074, 1.7100465109617475], [1.4683157991832902, 1.2569171284150982], [1.2022160855010762, 1.652976873071561], [], [1.2308126459489594, 1.5271902005134446], [1.2212285481847, 1.5558545979690304], [1.7541612320233824, 1.2029420949771452], [1.2605581268223276, 1.461481992088441], [], [1.2011671210106054, 1.7341432107329124], [1.7939748829428477, 1.208910678821176], [1.552789572653652, 1.222162067139385], [1.200018521665313, 1.7043036405822132], [], [1.489633345842772, 1.2464078144206039], [], [1.4903097816071917, 1.2460947099775368], [1.297825507086142, 1.4029214291648062], [], [1.504562546653774, 1.2397780950133492], [], [], [], [1.6105754743596292, 1.2080617373958449], [1.2031026071267663, 1.6443854249698586], [1.2115424156760157, 1.806813802087454], [1.3842426461950665, 1.3123180510803913], [], [1.2256910965840937, 1.8582120859492106], [], [1.2004127538972413, 1.720312152309928], [1.2140876475931437, 1.5821476102133052], [1.2601927122232723, 1.4621564597924115], [1.2034027857660572, 1.7582340691956837], [1.6096591626073686, 1.2082291864097685], [1.531223569313142, 1.2293467131267388], [], [1.272453765357944, 1.440762238006497], [1.5270816968574505, 1.2308526239673705], [1.808206906897193, 1.2118491367417832], [1.3906817942235956, 1.3071612957265208], [1.2000735121183896, 1.7085736056801235], [1.6638204024055772, 1.2013106811672163], [], [1.7147650514484796, 1.2002180542919505], [1.3833966184260478, 1.3130086580090732], [1.2258114567302785, 1.5414275388608114], [], [1.212756651511202, 1.5877773670179507], [1.2296454078029968, 1.530392931753447], [], [], [1.3061082384401672, 1.3920238967463678], [1.5494397612566593, 1.223206947922321], [1.744371559700619, 1.201972726961932], [1.2231311982179316, 1.549679855352204], [1.4344392063566924, 1.276352192405606], [], [], [1.3162628198961557, 1.3794601793755574], [1.3550988304723246, 1.3380011280978326], [], [1.2194214247733637, 1.838000844320375], [1.2390900864539587, 1.5061906823834812], [1.212964000024837, 1.8131191174302246], [1.8681094247075036, 1.229108057698465], [1.7355164572849353, 1.201263013942291], [1.2423735708526111, 1.4985600552377711], [1.2275432973221454, 1.8636602092592125], [], [], [], [], [], [1.8696749643775814, 1.229669896281913], [], [1.540253913990377, 1.2262055424505198], [1.2002766145744368, 1.6833705664914875], [], [], [1.3635460250091191, 1.3301368865203833], [], [], [], [], [], [1.2513514623550943, 1.4792864080553993], [1.220070067556518, 1.5597599916400648], [1.2555279748809993, 1.4709920986371552], [1.213285517974003, 1.8144945980654348], [], [1.2387593283757765, 1.506979164752519], [], [1.6770772936364555, 1.200525726855756], [], [], [1.8477963695580837, 1.2223429754044746], [1.2113905160048664, 1.5938832145699404], [1.2541391536501445, 1.4737079195106677], [], [1.8163145583717109, 1.2137172391387971], [], [1.5826134379924004, 1.2139749028496203], [], [1.3096546430876372, 1.3875411989766326], [], [1.3244571031089274, 1.369897693745316], [], [1.4911871741641265, 1.2456904097793695], [1.699381366695798, 1.2000003827073114], [1.2012987182507588, 1.6639856753268352], [1.213740474347338, 1.583588343744932], [1.4491224418481785, 1.2674951435928383], [], [], [1.5008440992235967, 1.2413749601407056], [], [], [], [], [1.351210247708798, 1.3417463067927395], [1.5691010423261165, 1.2174386434038766], [1.8325531142072464, 1.2178903942940353], [1.8180900900258732, 1.2141453605884975], [1.2519051277419757, 1.4781645081235535], [1.2016544678205872, 1.7406414881225787], [1.6523321160179352, 1.2022774137768386], [1.7180433232878534, 1.200325667574639], [], [], [1.2191965576879953, 1.5627846587989271], [1.3220402214459481, 1.3726677440346398], [1.2049699359841455, 1.629677630013921], [], [], [], [], [], [1.4915175529294826, 1.2455387043284225], [], [1.8087850793147486, 1.211977657767102], [], [1.3447338311526607, 1.3481677256525009], [1.483399743256826, 1.2493512134945983], [1.2000433413701195, 1.7065832736267825], [1.5904168533613694, 1.212156240203099], [1.217021574127026, 1.570648385625597], [1.4443649743729092, 1.2702899423185015], [], [1.6288702287556278, 1.205085304680975], [], [], [1.2905942729847624, 1.4129687287295605], [], [1.4959613616126441, 1.2435263051992658], [1.8222237948763267, 1.2151687469170025], [1.2000121242326096, 1.6965180342315545], [], [], [1.2471181273622045, 1.4881084960738546], [], [], [], [], [1.3829809019529529, 1.3133491349118216], [], [1.3059348190177111, 1.3922458235256654], [1.564417247553426, 1.2187336317183477], [], [1.7107220590346948, 1.200114975769371], [], [1.7492116506871038, 1.2024276801944762], [], [1.200291510110148, 1.7170711784011399], [1.2072665088039174, 1.6150664574286457], [1.2004709396413327, 1.7216960332131672], [1.206527139208395, 1.6194733853800551], [], [], [1.2417220958131716, 1.5000465990933682], [1.2828402592931483, 1.4243593811982853], [], [1.2013030577101809, 1.7360743641771406], [1.2359025111850381, 1.513952906833656], [], [1.236231626141587, 1.5131340175186416], [1.5841200167503806, 1.2136134978414101], [1.3121840935111866, 1.3844071884940028], [], [], [1.2002156237491117, 1.6853174506467505], [1.6318542529755384, 1.2046656107612979], [], [1.7816169384724538, 1.206706299093143], [], [], [1.20431146322827, 1.634479968611871], [1.652880290612627, 1.2022252186106155], [1.5432235228500626, 1.2252146419565415], [1.5165368750709451, 1.2348749826215901], [1.2055925664499716, 1.7745740548077829], [], [1.2171016757248814, 1.570349668676542], [1.5007267492373262, 1.2414259367010858], [], [1.7933546038941703, 1.208792388157754], [], [], [1.5692864610843351, 1.2173883851955665], [1.2484707923749672, 1.485241124370819], [1.4736668732466423, 1.254159988634882], [1.5086229105797115, 1.2380748874059573], [1.223729106234075, 1.547796071826622], [1.470896867123191, 1.2555770544784717], [], [], [], [1.2365963825273658, 1.5122312930404096], [1.205212330079975, 1.7720080668752638], [], [1.5179633200417442, 1.2343148626488327], [], [], [1.8007260205608024, 1.210250810330446], [], [], [], [1.8347499172714865, 1.2184997821440497], [], [1.3082800749414243, 1.3892661905873391], [], [], [], [], [1.2240438621962384, 1.5468146387968917], [], [], [1.229781367235487, 1.5300163613724191], [1.2484391851302208, 1.485307591018823], [1.3615933171724102, 1.331922675219422], [1.7579589374935352, 1.2033705993755297], [], [1.2277948423437464, 1.8643845767790659], [], [1.5350741657509481, 1.2279836134229507], [], [], [1.4270673956926594, 1.2810634970475685], [], [], [], [1.3150446709567993, 1.380924155346662], [], [], [1.2048867796872584, 1.6302655101721777], [1.268064080952231, 1.4481441645775126], [], [1.2267995711421618, 1.8614972263810063], [1.2177351329550532, 1.5680128869392171], [1.2855854846243702, 1.4202490224396314], [1.2279232797715323, 1.864753058297359], [1.2097368410971638, 1.7981938644855797], [1.2012703214521308, 1.7356189238402728], [], [1.227201679838357, 1.5373293251617597], [], [1.2112699019573112, 1.8055598942173772], [1.2001128517181596, 1.6893774305062585], [1.6613245892756636, 1.2014980314930503], [1.2365374207005544, 1.5123768735227314], [], [1.4818914885286916, 1.250079254508341], [1.2009991227594485, 1.731593108634005], [], [1.8390064703468447, 1.2197113355473483], [1.3971548545516979, 1.3021497544572873], [1.2215209373716067, 1.5548869867094819], [], [], [1.2105308868617706, 1.5979216610456697], [1.200724467739942, 1.6730938132312332], [1.3813509330173839, 1.3146913287880633], [], [], [1.200697351963301, 1.6736017867358353], [], [1.3602903000151054, 1.3331249262539455], [1.2041951336619052, 1.7646338496104326], [], [1.4135114931523276, 1.290214281063638], [], [], [1.341962694551753, 1.3509881264092025], [], [1.825385684746968, 1.2159768290045052], [], [1.7619520299046934, 1.2038528988387738], [], [1.409792242519925, 1.292839764345306], [1.3483848342247686, 1.3445189524083505], [], [], [1.3097454774351442, 1.3874277561623929], [], [1.4429802466610346, 1.2711167450300986], [1.20001231389262, 1.7035090940409228], [], [1.2018146635519544, 1.6574398008915867], [1.479559392931483, 1.2512172699899609], [], [1.2561741702751579, 1.4697422468861137], [1.7381642971139366, 1.2014586412083754], [1.2346232175505483, 1.5171764502122447], [1.5599980854849356, 1.22000055840437], [1.2158958880884387, 1.574927185886306], [1.4833646799571147, 1.2493680680312182], [], [], [], [1.2615426163181995, 1.4596770450104475], [], [], [1.562117174933197, 1.2193875505653256], [], [], [1.6717558397801708, 1.2007983699811502], [1.7632991018929227, 1.2040229605117294], [], [1.4603489559453962, 1.261175004035164], [1.2080984001081383, 1.6103740214902684], [1.7276419348861087, 1.2007646612711074], [], [1.7776422494847273, 1.2060651043963877], [1.2531445166934392, 1.475678407105201], [1.200870259855128, 1.7294873278360807], [], [], [1.333469580116262, 1.3599184637475144], [], [], [1.4954158844204166, 1.2437705186504058], [1.3374144337573743, 1.3557156594433686], [], [1.2017157505994684, 1.7413860701124064], [1.5809883135575253, 1.2143702866482342], [1.4031926813538322, 1.2976252796234928], [], [1.2286121978214033, 1.8667139464988827], [], [1.378272994753154, 1.317257613929557], [], [], [], [], [1.4108717115774563, 1.292072515226235], [], [], [1.618308566310776, 1.2067186303317352], [], [], [1.346598410929115, 1.3462948730338031], [], [], [1.2647036113499268, 1.4539978576755794], [1.6041329645180011, 1.2092765427372631], [], [1.3813425283397596, 1.3146982795845532], [1.6317261961227223, 1.2046832450803557], [1.2003178745546077, 1.6821737970847632], [1.247986190312544, 1.4862629750093999], [], [1.2288461654567544, 1.8673740248521133], [], [1.5968989380562333, 1.2107452902361924], [1.3524983902035532, 1.3404966882087481], [1.2268687524882094, 1.8616997916756133], [1.7237088704318775, 1.2005624268611297], [], [1.3148191545084122, 1.3811964299660593], [], [1.2400382248993007, 1.5039511146519473], [1.2137182487668108, 1.8163187792988849], [1.6380533664647774, 1.203852225044138], [], [1.6984602481708815, 1.2000023708413161], [], [], [], [], [1.3859307303266835, 1.3109492400124765], [], [], [1.2108425215011922, 1.5964386113037854], [1.3533274821782815, 1.339697119929426], [1.210603425824886, 1.597574450523016], [], [], [1.2703434677864487, 1.444275022091651], [], [1.706745341374379, 1.2000455017006617], [], [1.503722962816255, 1.2401355366258762], [], [1.87006631940075, 1.2298112644846944], [], [], [1.2187979495833132, 1.5641891511153232], [], [], [1.216517629164764, 1.8274550787200698], [1.8022383551038879, 1.2105642853799374], [], [1.2000029796609684, 1.6982738331222276], [1.2428172653614742, 1.497555076259148], [1.2002298765289594, 1.7151599368646764], [], [1.5928904218336755, 1.2116071885612647], [], [1.7393603939801308, 1.2015516482264899], [], [1.531493515853748, 1.229249997556379], [], [1.387288327183396, 1.3098571932173537], [], [1.7100373164386842, 1.2001007578734393], [1.4564005979299603, 1.2633544557525873], [], [], [], [1.7318327499609119, 1.2010143528818427], [], [1.7180009837269288, 1.2003241404821894], [1.8394562269145944, 1.2198417336182317], [1.213094901473553, 1.586318756916758], [1.4537337258837226, 1.2648529877927615], [1.2192439219321796, 1.837381197406515], [], [], [], [1.2405379164545922, 1.5027828765443711], [], [], [], [1.6458427814652388, 1.2029416576692649], [], [1.6212471913831858, 1.2062409543765669], [], [1.8347051228725304, 1.218487248484636], [], [], [1.2499293152549737, 1.4822010589255696], [1.6026722485391263, 1.2095641644459794], [], [], [1.7881708811518793, 1.2078354993328946], [], [1.320614288459426, 1.3743215053479085], [], [1.406961496229695, 1.2948723222142666], [1.2271699100079823, 1.8625783072803392], [1.2038571872549724, 1.6380136356812853], [], [], [1.863963521670721, 1.2276484745855742], [1.4340392135903988, 1.2766031883771602], [1.7370297755522297, 1.2013730896526427], [], [], [1.7187885049737364, 1.2003531326217967], [], [], [], [], [1.8659232539806334, 1.2283333022265848], [1.2072933399144827, 1.7850890539809587], [1.2040865323292183, 1.6362047605009553], [1.3089872819335095, 1.3883767429888207], [], [], [1.2986125484429851, 1.4018589029795372], [], [1.227200953049188, 1.8626685624280361], [1.5844047409890851, 1.2135457512836387], [], [1.8267617162711856, 1.2163353772623189], [], [1.2430073905352503, 1.4971262587356393], [], [1.2037827745561709, 1.761387825933389], [], [], [1.2801062325597203, 1.4285424083492813], [], [], [1.2028851139342225, 1.6463642838044552], [1.781675941141498, 1.206716064888942], [1.4531203544195757, 1.2652006892851781], [], [1.2060594651139223, 1.622393634304553], [1.2041465046326352, 1.635740283754387], [], [1.4290807965950758, 1.279758658356366], [], [1.2061119851545885, 1.6220600949958328], [], [1.3474211437209636, 1.3454747539243974], [], [1.8209893416596283, 1.2148592171289145], [], [], [], [1.2046399703879187, 1.7679591131690084], [], [1.4245581992382879, 1.282708957209545], [], [], [1.200037125969178, 1.7060929952273474], [], [1.466808379680756, 1.2577086161670277], [1.31279676148147, 1.3836558012531883], [1.2096128279775042, 1.6024273526249329], [1.5722594835459405, 1.2165929660668453], [1.2929457850123731, 1.4096435534368026], [1.7440804193079453, 1.2019468736835037], [], [], [], [1.6926999768938926, 1.2000532931775125], [], [1.4244419715125236, 1.282785699027352], [1.3953690820019267, 1.3035154431763436], [], [], [], [1.8371216774312566, 1.2191698370750452], [1.6138524190129622, 1.207477315963943], [1.3632233952097859, 1.3304306310501695], [1.2045331440261258, 1.6328241514280295], [], [], [], [], [], [1.2070844950802164, 1.6161292362639115], [1.80448939587125, 1.211039913540521], [1.3185311357382545, 1.3767640094314155], [], [], [1.3752514733611094, 1.3198179456551506], [1.200461951201806, 1.7214880851378886], [1.2281725192587856, 1.8654654901101708], [], [1.2162084355780065, 1.5737236277282234], [1.4137690140570096, 1.290034364018027], [], [], [1.5637384242696548, 1.218925387305167], [1.2123941221419319, 1.8106368287608727], [], [1.205429174758125, 1.7734826429816632], [], [], [1.5098865428229578, 1.2375533831887262], [], [1.4157169987272207, 1.2886811757439967], [], [], [1.4580631117736176, 1.2624311001506907], [1.2000318467915059, 1.705643206294983], [], [], [1.7247069323991584, 1.200610805592048], [], [1.2003728817257233, 1.680693454867792], [1.5442437936368365, 1.2248789583912794], [], [1.2344730437991733, 1.5175591793199954], [1.2885224960552364, 1.4159467237517105], [], [], [1.3923621045049581, 1.3058440343526667], [1.2897462915289182, 1.4141820602451192], [], [1.4183422420391005, 1.286879064461217], [1.2125454760982208, 1.588698215972565], [], [1.7236867537624656, 1.2005613774484432], [1.3871355122620432, 1.3099797283313777], [1.4813835819697563, 1.2503258271063082], [1.3625673893002028, 1.331029495438566], [], [1.416327696595602, 1.288259761158515], [], [1.4167381701524906, 1.2879772630649606], [1.210540267062052, 1.597876693001487], [1.280696833555278, 1.4276310322202075], [], [1.2307655968795257, 1.527317994776027], [], [1.2640313702793717, 1.455191189089286], [1.297150018464902, 1.4038380639292563], [1.5764152447823414, 1.2155138719449323], [], [1.3112105648226882, 1.3856072916009232], [1.2929443887060335, 1.4096455109455077], [1.2124254185223173, 1.810774669924413], [1.210968688616039, 1.5958444601277333], [], [1.224680006206974, 1.5448519948545978], [], [], [1.2014476989598946, 1.6619789120669062], [1.3144540799544802, 1.3816380306376819], [], [1.6015065485802848, 1.2097969400060498], [], [1.6076710331469863, 1.2085985735878912], [], [], [], [1.8067336069916975, 1.211524885855439], [1.711643064428935, 1.2001355793310513], [], [], [1.3837057673657507, 1.3127559446520691], [], [], [], [1.2132140697288385, 1.8141904465795622], [1.2015703636097528, 1.739596686324566], [1.5806456155286268, 1.2144543987353407], [1.2200959759450956, 1.5596713582481834], [], [], [], [1.8461817193455583, 1.221846358448274], [1.206101634506057, 1.7778742869143043], [1.254750615061763, 1.472507175471133], [1.3722484554547125, 1.322403753927322], [1.6467114341703835, 1.2028477811054017], [], [], [], [1.5545423241521465, 1.221625602130569], [1.2142498112129838, 1.5814809969102923], [], [1.8029360267578411, 1.2107105412996217], [1.6221258345932674, 1.2061016153476456], [1.281931152388371, 1.4257401986132774], [1.295635305498086, 1.4059095481992423], [1.2091975795569174, 1.7954619509920662], [1.3213346763142926, 1.3734841923612298], [], [1.3394607024736023, 1.3535733628325157], [], [1.2931102600081745, 1.409413111979593], [], [1.2565292568580082, 1.4690590985184964], [1.57754751133291, 1.2152264569727054], [], [], [], [1.663938334163711, 1.20130213930967], [], [1.491044863002839, 1.2457558467932717], [1.200636530545996, 1.6747784739783622], [1.2052308179092233, 1.7721349877190244], [], [1.4134679480622807, 1.2902447276576416], [], [1.6570760712223862, 1.201845870901089], [1.7964846608777507, 1.2093976047599182], [], [], [1.269954353875237, 1.4449299267865103], [1.5961502154614169, 1.210903667718424], [1.2095870838473224, 1.7974431714930648], [1.7468292832812438, 1.2021978121508856], [1.2719527191056639, 1.4415903923632765], [1.360045557197967, 1.3333516987368421], [], [1.200208318533609, 1.7144317406087264], [], [], [], [], [], [1.2838517941265146, 1.422834578729093], [], [1.4779255595785576, 1.2520235018312866], [], [], [], [], [1.2311865817848822, 1.526178312913903], [], [1.373737420500626, 1.321116470114608], [], [1.485737011008438, 1.2482352696940566], [1.2684676423070314, 1.4474533226036268], [], [1.2000985198309198, 1.6900747733142842], [1.6778981705290945, 1.2004887297227027], [1.2048924104637246, 1.769774456526576], [], [1.2075177505993646, 1.613621565044912], [1.689905440442611, 1.2001019105184114], [], [], [1.446931939510061, 1.2687731956848454], [], [], [1.5808850559422147, 1.2143956032920307], [1.26265118799273, 1.4576654860820901], [1.461176647832731, 1.2607239974007358], [], [1.3598441372942407, 1.333538557189299], [], [1.206408032034716, 1.6202067098049096], [], [], [1.222646494423634, 1.551226243194728], [1.7349760316792968, 1.2012248229833717], [1.7392984785794188, 1.2015467628941074], [], [], [], [], [1.2083883185865338, 1.6087971782354042], [1.2059605562780493, 1.6230257962242836], [1.4153613876128313, 1.2889271836543954], [1.2116701537194134, 1.80739628127444], [1.203525543368941, 1.6407284730001448], [1.5267379228139957, 1.2309794752793957], [1.3758293689209085, 1.3193250705053148], [], [], [1.8644565630397312, 1.2278199084320063], [], [1.2008677055256194, 1.7294440590398186], [1.6384717447173958, 1.2038001674709284], [], [], [1.4836274742153388, 1.2492418274888784], [1.2286116082790681, 1.8667122795439894], [1.216201828960191, 1.826251058207588], [1.715661151297437, 1.2002453318476767], [], [], [], [], [], [1.6546709889082731, 1.2020589585568928], [1.7340897985720252, 1.2011634680245253], [1.2011888031071132, 1.73445852368117], [], [1.2289217030884618, 1.8675865095373874], [], [1.3272990329763432, 1.3666923505533797], [1.8047341625774551, 1.2110922835654983], [1.3072324278938234, 1.3905914766820096], [1.6688475147393018, 1.2009714209966709], [1.201382573802924, 1.7371572643315336], [1.6110300520399146, 1.2079793212069438], [1.854840127622442, 1.2245796229883852], [], [1.6981717968310748, 1.200003342337998], [], [1.4768955574167402, 1.2525355794036659], [1.700217015096483, 1.2000000470955543], [1.3574176886955474, 1.3358058759654419], [1.208135387109152, 1.7898287403103055], [1.7267706975975612, 1.2007171846036158], [1.2000106351424815, 1.7032611392756665], [], [], [1.6405237803564123, 1.2035500233690128], [], [1.568743408758194, 1.2175357969179665], [], [1.3148623926604803, 1.3811441965201354], [1.2005049990640853, 1.722466509297854], [], [1.2177667105953132, 1.5678975602423044], [1.227378282109424, 1.8631830621668828], [], [], [1.2063224104685089, 1.6207381706344313], [], [1.31362336487679, 1.3826467333855441], [], [], [], [], [1.2000317165010963, 1.6943683488069659], [], [], [1.8700886546513815, 1.229819343699804], [1.6579335793690504, 1.201772726303246], [1.5589696753103794, 1.2203017119918602], [], [1.437359587210476, 1.274535531953903], [1.8446301656156205, 1.221374765401992], [], [1.396459973802757, 1.3026796601026105], [1.5926159224618628, 1.2116674699640793], [1.4506718856841068, 1.266600079128202], [], [1.3623159707050334, 1.3312595813324553], [1.202251363917274, 1.6526049023865759], [1.6577338387824017, 1.2017896311637744], [1.245209445475762, 1.4922367897929563], [], [], [], [], [1.2017077083307885, 1.6587108723385253], [], [1.4821304808021716, 1.2499634763660763], [], [], [1.5456575463308084, 1.224417823089034], [1.2000134992195466, 1.7036741036073748], [1.243014222696671, 1.497110869333835], [1.2015273094930627, 1.6609490484267648], [1.2193779859573317, 1.8378494817457403], [1.2136407287050381, 1.584005779344686], [], [1.575036067103928, 1.215867770670919], [1.724032503055698, 1.200577895165945], [1.7703440891080449, 1.2049730218184473], [], [], [1.7467572760532828, 1.2021910435356982], [1.2313470895653003, 1.5257460200136441], [1.6447620042592532, 1.203060603467037], [1.8250184025582235, 1.215881833617256], [], [1.6844739521306662, 1.2002411162995106], [], [], [1.2057363283380322, 1.6244789905044263], [], [1.2243651367520445, 1.5458199855263377], [], [1.5005265496032074, 1.241512985367308], [], [], [1.2336118849296422, 1.5197720162651795], [1.2013202865733026, 1.6636882468521978], [1.212849957514924, 1.5873730222957714], [], [1.7179906337924935, 1.2003237677297984], [1.5501704743262614, 1.222976821070105], [], [], [1.2010226889254316, 1.7319631511712077], [1.2714248803440933, 1.442466765616697], [1.208202399636468, 1.6098050983887027], [], [1.7972270514625315, 1.2095441911202374], [1.6973738874936486, 1.200006896514458], [1.2211657067381212, 1.5560634876190305], [], [1.5594650451417937, 1.22015635206559], [], [], [1.4628660786446224, 1.2598096964463874], [1.2026153474145134, 1.6489264513430393], [1.8276783745736178, 1.2165765493211578], [], [], [1.4154235005874756, 1.288884181790443], [1.390620914632959, 1.3072092394958186], [1.6277468280155014, 1.2052480630273608], [], [], [1.3634001156521793, 1.3302696687353959], [1.204165198251337, 1.7644037993822115], [1.60425977676337, 1.209251785887508], [], [1.2598649981230297, 1.4627634511236531], [], [1.207375668543323, 1.614435591179147], [1.6392291131833088, 1.2037068413573355], [1.5372035434823692, 1.22724497491269], [1.2345664902086313, 1.517320915364435], [1.8469112816631645, 1.222070010022298], [], [], [], [1.2225542772642333, 1.551522453410216], [], [], [1.4773972299575147, 1.2522857978917663], [], [1.7502271384477972, 1.20252916209757], [1.4843594630880719, 1.2488911895780184], [1.210769856488813, 1.596782430371456], [1.429862409041745, 1.2792557998602112], [], [1.3476423869693257, 1.3452548625571796], [], [1.2085155552900195, 1.7918860196554525], [1.2474998273118714, 1.4872945846547068], [1.5194592669324083, 1.233732862295211], [], [1.243989552206385, 1.4949281308831786], [], [], [], [1.3254095545194617, 1.3688172737676496], [1.6635778480555223, 1.201328337633134], [], [], [], [], [], [], [1.200830266865311, 1.6711976125600092], [1.218797697460243, 1.5641900444354826], [], [], [1.7318851162642985, 1.2010176963450385], [], [], [1.26665432057571, 1.4505776230481708], [], [1.447226988951953, 1.2686001797801674], [], [1.66733910635442, 1.201067874329311], [1.3842637677126184, 1.3123008490840242], [], [1.3157748653661148, 1.3800452439553792], [1.2752924669330064, 1.4361373248143108], [1.5180086584266528, 1.234297142383329], [1.6322041580686748, 1.2046175983981438], [], [], [1.4353788913683545, 1.275764606772892], [1.842519867084132, 1.2207421492700183], [], [1.6463937836995628, 1.202881931957859], [], [], [], [1.2519503385959467, 1.4780732082065948], [1.3033937976675447, 1.3955274720579414], [], [], [1.201469805150294, 1.6616901471796877], [1.537937010890593, 1.2269930364562016], [], [1.2006513533238004, 1.72551331147946], [], [1.3048961401092782, 1.3935804511793464], [], [1.2433776907846033, 1.4962941661935067], [1.7815585004537615, 1.206696633901882], [1.6085259940769765, 1.2084387055102948], [1.744069983697815, 1.2019459501852492], [], [1.4179128655893551, 1.287172131996893], [], [1.5793615804204868, 1.214771835399719], [1.2361732290673948, 1.5132790141247305], [], [1.2008618479966051, 1.7293445943000734], [1.4043862792086685, 1.2967475628345133], [1.2225424532236766, 1.8484395197591763], [1.3067730228764298, 1.391175544261373], [], [1.7433301587476366, 1.2018810409722347], [1.2457161543850699, 1.4911311712741453], [1.2148841629976435, 1.8210893252500115], [1.421576696165863, 1.2846923262422378], [1.2609797602773487, 1.4607068134821515], [], [1.2013907080816295, 1.6627337416331986], [1.4446352833864011, 1.2701292502287969], [], [], [1.2004799245550046, 1.7219019229161747], [1.5221550983598946, 1.2326979660213095], [1.2901571487304522, 1.413593231114823], [], [], [1.2587862388518178, 1.4647758155004573], [1.3346344047462961, 1.3586673443619748], [1.5676103372804437, 1.2178454840976782], [1.657616486330449, 1.2017996007939948], [1.216484720997935, 1.827330180913856], [], [1.3963396809713446, 1.302771588821475], [], [1.868428632782953, 1.22922213767121], [1.4375241126847191, 1.274434013837976], [], [1.2229369807643993, 1.8497026241513916], [], [1.4477316643328353, 1.2683048682001166], [1.2519561086760924, 1.4780615593293256], [], [], [], [], [], [1.2072172838894106, 1.7846474731026878], [], [], [1.7743727967478724, 1.2055622515382753], [1.2040509839169298, 1.6364817077824463], [], [1.7930364707063888, 1.208732033286823], [], [], [], [1.8014000051953867, 1.210389911310668], [1.2500360478622792, 1.4819806389868027], [1.2120854996038828, 1.8092677459418256], [1.4978014945764153, 1.2427082283656652], [1.2044506467474263, 1.6334354562026006], [], [1.3740075794139897, 1.3208839996511967], [], [], [], [], [1.3831788591756444, 1.313186912415371], [1.217243338512664, 1.569823174913498], [1.2254157508186108, 1.8573842127690607], [], [1.7075998685226081, 1.200057761337933], [1.221450427906709, 1.5551196802552945], [1.2759402658919288, 1.4350974860289318], [], [1.8217937010534815, 1.215060525030499], [], [1.200485161687579, 1.7220210423394482], [1.2317378194252675, 1.5246987443188251], [], [], [1.200106716249106, 1.7103298044874105], [1.3958834790692007, 1.303120746703803], [1.247184705109699, 1.4879662557199689], [], [1.3679002310881312, 1.3262223341494528], [1.204636009597641, 1.767930236365344], [1.20119949605265, 1.6653870362166163], [1.2003993156847705, 1.6800211053420264], [1.779756298803059, 1.2064020534876212], [], [1.294433687292305, 1.4075688696518713], [], [], [1.2000176554650885, 1.695798196414267], [], [], [], [], [], [1.4995763091560492, 1.2419275776162808], [], [1.639159284075687, 1.20371539688822], [], [], [], [], [], [1.8610028406568624, 1.2266311318850582], [1.5962061248167614, 1.2108917998290702], [], [1.3145172034015162, 1.3815616016768517], [1.2132469826550212, 1.5856693387338334], [1.2221199124820337, 1.8470735256727768], [1.2224128809468056, 1.8480221054926256], [], [1.2064575448579438, 1.6199010301417587], [], [1.2099531152133518, 1.6007324287045281], [], [], [1.4936266217433345, 1.2445770880303326], [1.2026608141439041, 1.7515144078098144], [1.2510257635837239, 1.4799496988540533], [], [], [], [1.4418475009751444, 1.2717976094797905], [1.201273766817868, 1.7356671324325577], [1.7413019731937176, 1.2017087728944995], [1.2060233429234137, 1.7773761091257543], [], [], [], [1.6236870233559697, 1.2058579864090408], [], [], [1.370429140728983, 1.3239906268198045], [], [], [1.4157153120424946, 1.2886823415012385], [1.349839731736571, 1.3430857434485373], [1.2194124706010505, 1.562030341791342], [1.693003960306811, 1.2000489469671942], [1.4017112032004952, 1.2987222985214555], [1.4570250497707837, 1.2630066664569013], [], [1.5573760123676799, 1.2207731245517883], [1.2096338762933885, 1.7976783738652122], [], [1.6581100047535773, 1.2017578617797822], [1.5713391768141758, 1.216837095197545], [1.482267021539934, 1.249897400484169], [], [], [], [], [1.836462574267603, 1.218982364331349], [1.22243856893974, 1.8481049613067586], [], [], [1.2004012882874502, 1.6799718384478115], [1.689252545399044, 1.20011552112553], [], [], [], [], [], [1.5483542556944505, 1.2235510853889833], [1.3111094523348663, 1.3857323721146062], [1.4299694764355428, 1.2791870767864832], [1.520002448007295, 1.2335229038027338], [1.7247804641934135, 1.2006144489531572], [1.3824423920554922, 1.3137912926453335], [1.6400255948033269, 1.2036099610978224], [1.821160685808543, 1.2149019808178934], [1.5581793652092244, 1.220534769198494], [1.201158953373293, 1.665976328822841], [1.3126034417931471, 1.3838925709675831], [1.6975607509419532, 1.2000059499713693], [1.792471069824631, 1.2086252944590166], [1.715760141633219, 1.2002484437886152], [], [], [1.4807621086034275, 1.2506284978150208], [1.8342244228741382, 1.218353029383445], [1.2114200280103211, 1.5937474189933978], [], [], [], [1.3305078925447207, 1.3631386301039308], [1.3219577205798239, 1.3727630293337907], [1.2087072440290338, 1.6070945215261623], [1.2005631975711069, 1.723725100202163], [1.226270084151651, 1.859937384092388], [], [1.3331186759706841, 1.3602970502358036], [1.430724029471077, 1.2787038432459814], [1.2897246779346365, 1.4142130861915434], [1.2082368007230313, 1.6096177238786247], [1.5578758361199327, 1.2206246543246182], [1.2477895102219985, 1.4866794127733096], [1.3297546452648246, 1.3639667021007826], [1.2102790251976645, 1.599136890595965], [], [], [], [1.5089005265849522, 1.2379599679026811], [1.2009840168568136, 1.6686463946628294], [1.2229509770038622, 1.5502527807990063], [], [1.864503638675019, 1.2278363071320721], [], [1.5241290741104188, 1.231951479623382], [1.477536720220445, 1.252216470658284], [1.4189596569049079, 1.2864587982401356], [], [1.5217665054925185, 1.2328460409718744], [1.468631598422046, 1.2567521429817594], [], [], [1.3275117616283754, 1.366454632358949], [], [], [], [], [1.6907364477129385, 1.200085820766179], [1.5193617014255298, 1.2337706518374025], [], [1.2086150821108324, 1.792416786738427], [1.436241210129073, 1.2752279425788178], [], [], [1.8407402878825712, 1.2202165370016063], [1.3165886870921741, 1.3790704670269542], [], [1.2151947154654934, 1.577673240509624], [], [], [], [], [1.6961135283414297, 1.2000151048901104], [1.2097765613369413, 1.601608027840853], [], [1.3053887772303843, 1.3929462866789122], [1.216649821589574, 1.572044519341259], [], [], [1.20021205334214, 1.7145605073922703], [], [], [1.4486580832140667, 1.2677648315252759], [], [], [1.6164475595564771, 1.207030437353449], [], [], [1.7736958784638601, 1.2054609039747817], [1.2239910467104131, 1.8530211632034996], [1.2555394384359264, 1.470969850862057], [1.2094208296236715, 1.6033973209850099], [1.205889810459836, 1.7765187597428438], [], [1.2082312320620001, 1.790351972201727], [1.2455212297240619, 1.4915556492286943], [1.2953940705413216, 1.4062415246382174], [1.2041089270877754, 1.7639690847672747], [1.508912529628038, 1.2379550036340135], [1.2136454085351374, 1.8160138412476998], [], [], [], [1.3341870379800358, 1.3591468398002151], [], [1.2395880472346097, 1.50501068298299], [1.2528365446583751, 1.476292950028528], [1.2153611915213216, 1.5770153451996272], [1.230423079239682, 1.5282515924695137], [1.342580093117455, 1.3503558806957097], [1.2154065251136088, 1.5768368395276715], [1.3177198420332357, 1.3777239059053468], [], [1.2055965282164973, 1.6253996843946403], [], [], [], [], [], [1.355963415990383, 1.3371793433898866], [], [], [], [], [], [1.2000896140925712, 1.6905339521506826], [], [1.400299625824967, 1.299775455875898], [1.217888771196184, 1.8325472106883982], [], [1.2045126858203536, 1.6329752173667051], [], [1.2055273438042313, 1.6258596447627807], [], [1.6601975134219122, 1.2015867557315505], [], [], [], [1.2233493798608563, 1.5489894496368881], [1.20809971279357, 1.6103668172704346], [], [], [1.2001960920328405, 1.7140019134676368], [1.6151423121610975, 1.2072534395709744], [1.4127908715364044, 1.2907190249630678], [], [1.6075297949971166, 1.2086251317102952], [], [], [], [], [1.693663959972157, 1.2000401470150173], [1.394951691719707, 1.303836486264407], [], [1.4866858132484395, 1.2477864909906822], [1.2647192812879378, 1.4539701320621607], [], [], [1.2156767826057557, 1.5757783388740612], [], [1.283666849220568, 1.423112464054319], [], [1.2005693448804333, 1.6761458446630266], [1.3265414646042633, 1.3675413975544155], [], [], [1.298150728267364, 1.4024816597116234], [1.7455783021832898, 1.2020817151679517], [], [1.5852156959950718, 1.213353759334253], [1.5212986526270842, 1.233024809602154], [], [], [], [1.2202853311227622, 1.8409745951013938], [], [1.3498845587189672, 1.3430417702635395], [1.2905803637340847, 1.4129885691476982], [1.201026641726184, 1.732024798718339], [1.438446865167837, 1.2738662678695003], [1.2103702912563288, 1.5986947764644501], [1.204565305862637, 1.7674126386148596], [], [], [], [1.226742040661913, 1.8613285589198314], [], [1.4195049864307416, 1.2860887204209317], [], [1.241634988881465, 1.5002463602777023], [], [], [], [1.2218184507727663, 1.8460904034447256], [1.6490217402510265, 1.2026055719723368], [], [], [], [1.4015785844382769, 1.2988209143859348], [], [], [1.2947177494860511, 1.4071753128263451], [], [], [1.2471700786168216, 1.4879974945900298], [1.5862378322825732, 1.213113802623003], [1.2585646578761478, 1.4651919108633655], [1.6118325408253167, 1.2078348863006638], [1.3529461373196285, 1.3400644274336948], [], [1.661959341599046, 1.2014491918485921], [], [], [1.275808748079748, 1.4353081380277635], [1.2806316473243315, 1.4277314105995769], [], [], [], [], [1.3204510831202863, 1.3745117211089835], [1.7374747033034956, 1.2014063311550025], [], [], [1.2000532991380066, 1.6926995686970896], [], [], [1.3685137112364476, 1.325678159384512], [], [], [1.259195279551889, 1.4640101730356525], [], [], [1.204657002317139, 1.7680831450988952], [], [], [], [], [], [], [1.2030460800940648, 1.6448928181620082], [], [1.8405111194927002, 1.220149371888597], [], [], [], [], [], [1.2015558722586355, 1.7394138493444908], [], [], [], [], [], [], [1.5323839509523398, 1.228932212838054], [], [1.639200077655788, 1.2037103976074677], [1.2124762967203095, 1.5890016273071699], [], [], [], [], [], [], [1.3291441077612327, 1.3646406297838276], [1.76749730112143, 1.204576833059532], [], [], [], [1.3183197847014938, 1.3770136020670747], [], [], [1.2826596335745162, 1.4246329385132586], [1.3919479499022354, 1.3061676315606292], [], [], [1.4603159288236802, 1.261193042415751], [1.2077088047478026, 1.7874607287710482], [1.6489011318887028, 1.2026179479738495], [1.2128305572126281, 1.8125430318333462], [1.2297070050696588, 1.530222207225297], [1.2188548706810107, 1.8360123690427201], [1.2067391124424964, 1.618184984226709], [], [1.2041162344975855, 1.6359742933569144], [], [1.4613912494053523, 1.2606073918012943], [1.288285266693486, 1.4162906797823762], [], [], [1.2000086859438261, 1.70294717973332], [], [1.324218908878112, 1.3701688741867386], [1.2264140528807679, 1.860363183714904], [1.7831986688899994, 1.2069706078792743], [1.7548853352730407, 1.203021529669578], [], [1.2011732559583357, 1.7342327245306575], [], [], [1.7092454220493971, 1.20008548513658], [], [], [], [1.7968228649904223, 1.2094642390048953], [], [1.2272990809001922, 1.8629534936176484], [1.5510443769768998, 1.2227032135350164], [], [1.200680097121962, 1.6739301977401688], [], [], [], [1.2099419256826613, 1.7992123167574567], [], [1.6200863849872358, 1.206427498602696], [], [], [], [], [], [], [], [], [1.2463437564898285, 1.4897715225659474], [1.8658155615653915, 1.2282954319250725], [1.2076529283071316, 1.7871456309602345], [1.2025289978782046, 1.6497744880769083], [1.8120721679167902, 1.2127220206304918], [1.2163246652953046, 1.57327916273043], [1.2986815243526098, 1.401766063124843], [1.224428616979645, 1.8543757093979063], [1.2248510873969143, 1.544328837442173], [], [1.2028932861182682, 1.6462885951244424], [1.5302188883749939, 1.2297082032021214], [], [1.2021394718685192, 1.746204918879303], [], [1.2020384373240156, 1.7451030164988077], [], [1.3457140849816893, 1.3471806546975655], [1.2035640330933772, 1.7595930428950104], [], [1.658409996213695, 1.2017327307708692], [], [1.8385328510236327, 1.2195745123463326], [1.2005859738751634, 1.7241998039203024], [1.2744048920376734, 1.4375713352574921], [1.2070866092907646, 1.6161168118183111], [1.2082605706604046, 1.7905115110511869], [1.501480241203244, 1.2410992423548661], [], [1.4971719212191767, 1.2429871222185527], [1.5530199236287083, 1.2220911623019624], [], [1.2002678408083947, 1.716363650866969], [], [], [1.6167850704318456, 1.2069733521431452], [1.8269849035143126, 1.2163939265482073], [], [], [1.7951994489547285, 1.2091465952866212], [], [], [1.338808653144058, 1.3542532560436893], [1.8251361431423074, 1.2159122541527538], [], [], [1.2131944180222467, 1.8141066402769832], [], [], [1.206565015801052, 1.780758382652105], [1.3259752324978216, 1.3681785520872085], [1.4634235746953164, 1.2595098241844007], [1.3554784286229313, 1.3376398382053079], [], [1.5200203651809496, 1.2335159905737374], [1.2283805417991216, 1.866057479946884], [1.202915796596946, 1.7539193353737896], [], [], [], [1.2195030141754053, 1.8382846579106993], [1.5555523606360486, 1.221319647904594], [], [1.6391154904658456, 1.2037207676128432], [1.4172032806668706, 1.2876578901756222], [1.584212330232889, 1.2135915137151672], [1.214716634132921, 1.8204161733851347], [], [1.4931049644990249, 1.2448138355737839], [], [], [1.720871147537154, 1.2004357947165527], [], [], [], [], [1.21856275551811, 1.8349747369906122], [1.3860257791138748, 1.3108725290872532], [1.314261787837232, 1.381871045521676], [1.2026325969354452, 1.6487587434890523], [], [], [1.2112177268007236, 1.80531803931971], [], [1.6202290110519706, 1.2064044273676542], [1.2320893733727805, 1.5237625309722056], [], [], [], [], [], [], [1.2041509382939921, 1.7642939188825162], [], [1.5253017910176614, 1.2315125020042017], [], [1.2066865704571854, 1.6185023912454697], [], [], [1.2085226418303314, 1.6080760835986452], [1.327398450166307, 1.3665812166935853], [], [], [1.2112030539370626, 1.594750080667271], [], [], [], [1.7820986140129986, 1.206786235413949], [], [1.2038710092823042, 1.7620968966168238], [], [], [1.203725229123786, 1.6390791350048168], [1.3250211681792792, 1.3692570852060961], [], [], [1.3715263927934607, 1.32303171304641], [], [], [1.4458229521315489, 1.2694259316483643], [1.2776543232400286, 1.4323731528374595], [1.3300533277713233, 1.3636379038789772], [], [1.677836508540419, 1.2004914618884666], [1.635364256683435, 1.2041953805318921], [1.4664631315467382, 1.257890815439168], [1.7915963068394678, 1.2084614800716325], [1.3162980084100757, 1.3794180578230806], [1.7227033730775925, 1.2005157091049812], [], [1.6667077821117646, 1.2011096029907147], [], [], [], [], [], [], [1.6541450718303432, 1.202107114368406], [], [], [], [], [], [1.274410351696294, 1.4375624812327175], [], [1.2094298633050842, 1.7966485436161952], [1.579039657183348, 1.214851986023154], [1.3543354093908215, 1.3387300305879424], [1.690671967165049, 1.20008701976901], [1.2737667117410618, 1.4386091356225836], [1.4033268351601356, 1.2975263570568891], [], [], [], [1.4742661357648623, 1.2538562759183174], [], [], [1.7539108692022627, 1.2029148783338446], [1.6056420393787647, 1.2089841394950653], [], [1.263838105590525, 1.4555356838613498], [], [], [], [], [], [1.3569455676645032, 1.3362505581379263], [], [1.210194969342424, 1.8004541285489608], [1.6733962412143324, 1.2007082616160427], [], [], [1.405280521766155, 1.2960935391089043], [1.2872288664056968, 1.41782985403967], [], [], [1.4897934143766138, 1.2463336122649618], [], [], [], [1.5498734391532116, 1.2230702192897622], [], [], [1.2199017679900244, 1.8396627639025365], [1.345410122348016, 1.3474861440074293], [1.49639890123085, 1.2433309813661595], [1.2187946434422827, 1.8357991340920854], [1.253151376260927, 1.4756647431577097], [], [], [], [], [], [1.695560409469178, 1.2000197103525794], [], [1.7751531404875256, 1.2056802598774126], [], [], [], [1.2214217243030354, 1.5552145241023112], [1.7628429515048956, 1.2039649574413585], [], [], [], [], [], [1.2274723009246942, 1.8634551119010878], [], [], [1.3338104289089188, 1.3595514752210989], [], [1.3183045452407431, 1.3770316117386654], [], [1.7385386866768622, 1.2014874428570304], [], [1.5292256451474375, 1.2300679626534374], [1.741500318164895, 1.201725252905375], [1.847230722775574, 1.2221683201471651], [1.6585840867202484, 1.201718230187774], [], [1.2012431852144496, 1.6647630917222829], [1.2052211701340119, 1.627931216768676], [], [], [], [1.3051643011989569, 1.3932349906650172], [1.2040731391654995, 1.6363089590064814], [1.2949013764013255, 1.406921332815813], [1.2052442398618775, 1.7722269881010457], [1.7023265317245393, 1.2000054127791635], [], [1.4654154433890407, 1.2584458291447813], [1.3424563808755865, 1.350482388965282], [], [1.4208456341023978, 1.2851833658104974], [], [1.8114308287696754, 1.212574959199157], [], [], [1.602717958548936, 1.2095550954377101], [1.2016641232891012, 1.7407597102882248], [1.2286901276221633, 1.8669341313188748], [1.5246903508147795, 1.2317409617502775], [1.830053073271756, 1.2172099854672103], [], [1.2496527123879253, 1.4827735731075813], [], [1.4967109233180163, 1.2431919973317165], [1.2092701117096687, 1.6041658894831337], [1.2019155395513674, 1.656275061354021], [1.4559352648602961, 1.2636143849057508], [1.8606022904585526, 1.226495085242543], [1.55448656248416, 1.2216425609417956], [1.2228437083417645, 1.8494050646094737], [1.2019360381405568, 1.6560421804808851], [1.2088882546478696, 1.6061423760305842], [1.3088517646645994, 1.3885468606772409], [], [], [], [], [1.5286123988720621, 1.2302912709139728], [], [1.262281773185242, 1.4583333827063734], [], [], [], [1.4336682942318661, 1.2768364116530864], [], [], [1.2756280564292086, 1.435597932099711], [], [1.2001183847643138, 1.7108798322303858], [1.3607290304866617, 1.3327191684208395], [], [1.2038774600390942, 1.7621484138392887], [], [], [1.2081576525730942, 1.6100494286978078], [1.820946593204301, 1.214848558084928], [1.3922744062089012, 1.3059124983891068], [], [], [], [1.2643330485898798, 1.4546547178994225], [], [1.8253631667272638, 1.2159709962945275], [1.7648047588364222, 1.2042174435983521], [1.245833090321694, 1.4908770262423148], [], [1.4746517587911159, 1.253661372740312], [], [1.3368203415764024, 1.3563424150301364], [1.2054131185614043, 1.6266255036893291], [1.8072909354025477, 1.2116469973672257], [1.847939003174112, 1.2223871323552409], [1.834832150000604, 1.2185228029010984], [], [1.2267418608193363, 1.8613280313499658], [], [1.6635431274078623, 1.2013308747868976], [1.2269369688543832, 1.86189925436308], [1.2008160085738075, 1.7285542064119312], [1.296076398092449, 1.4053040145810767], [1.2528591240378244, 1.476247822259138], [1.441126719104728, 1.2722329787857443], [], [], [], [1.5517179075807754, 1.2224935381926474], [1.2281824108966348, 1.5345063064262323], [1.6796977016856343, 1.2004123533521325], [1.2473252977566969, 1.4876662675198853], [], [], [], [], [], [], [], [1.5445917967902305, 1.2247650156237326], [1.2121615051186359, 1.8096065824295475], [], [1.79274776041565, 1.2086774451158575], [], [1.5752609739359098, 1.2158097735635485], [1.2002568632206585, 1.6839751055559078], [], [], [1.6229821253123435, 1.2059673624358442], [1.841490518164912, 1.220437247829416], [1.7097349815709348, 1.2000947788492167], [], [], [], [1.7135171519872574, 1.2001827467942374], [], [], [1.2023641986457327, 1.6514344853780356], [1.2273134570784239, 1.8629951905451474], [1.5768719565078895, 1.2153976012174466], [1.3703547781080598, 1.3240558183934568], [1.2241041371903736, 1.546627486945407], [], [], [1.3813457129912274, 1.3146956457929253], [1.4106211068711456, 1.292250252959589], [1.2926931202594725, 1.4099980935993084], [], [], [1.204143635086069, 1.6357624301958542], [1.8358400263944017, 1.2188061853793544], [1.2037461538633631, 1.6389089188621186], [], [1.3931878909541848, 1.3052008995161477], [1.3000345410967746, 1.3999539507270053], [1.220101501498151, 1.8403475369775721], [1.800907357167162, 1.2102881405667831], [], [], [1.2075711003939484, 1.7866820560022265], [1.289542683570653, 1.414474534603971], [], [1.2211813500208235, 1.5560114572887167], [1.200387137688908, 1.7196720058285329], [], [1.4280916766425007, 1.280397969870362], [], [], [], [1.2178321628963722, 1.832341138210344], [1.818227282048131, 1.214178726505815], [1.2296400359334085, 1.8695921702298628], [1.5307779679071771, 1.2295067440925687], [], [], [1.3156936945228075, 1.3801427450088544], [], [], [], [1.4547955499530127, 1.2642537691761928], [1.221590800610388, 1.845343173005788], [1.3315826404871325, 1.3619635386388524], [1.7106023567894608, 1.200112422608334], [1.3005517262307404, 1.399265770849478], [1.290536360668, 1.4130513494281707], [1.8419351671282846, 1.2205686615037916], [], [], [], [1.492167816690754, 1.2452409609684354], [], [], [1.8439627551182105, 1.2211735960300705], [], [], [1.2827006382564836, 1.424570802766929], [1.7688357341656717, 1.2047610256634955], [1.2922434250528356, 1.4106307279835026], [], [1.2985685367375799, 1.401918165090537], [1.2499425511058901, 1.4821737098169145], [], [1.2007539632608, 1.672551961815071], [], [1.4539781614351117, 1.264714743014248], [1.821049111585918, 1.2148741270718908], [], [], [], [], [1.201372657356496, 1.6629760460204774], [], [1.2086531943395973, 1.7926192019363074], [1.2016115094994928, 1.6598887480047573], [], [1.4994143999816993, 1.2419984529880947], [1.5009657948186816, 1.241322133553579], [1.744332644775565, 1.2019692613831916], [1.478866501299464, 1.251558280539756], [], [], [1.2201452948794878, 1.8404971956079772], [], [1.860098648196398, 1.2263245595920282], [], [1.7798655229097877, 1.206419714483706], [1.6859902013673866, 1.200196312996519], [1.6930270539410883, 1.200048624341067], [], [1.4199236496171888, 1.285805313944946], [1.2338774477319736, 1.5190863016044915], [1.2110914655731864, 1.595269655950984], [1.7866529576499524, 1.2075659791093678], [1.5847873068300684, 1.2134550017392727], [], [], [], [1.80037735148486, 1.2101792294023406], [], [1.2874272461510416, 1.4175398739972545], [1.3661222285609902, 1.3278096807560407], [], [], [], [], [], [], [], [1.3354402278405426, 1.3578068198764845], [], [1.6240708986061003, 1.2057988551596477], [1.2711857780313365, 1.4428650878674585], [], [], [], [], [1.2028940851413232, 1.6462812005670449], [1.4935882515945704, 1.2445944772840214], [], [1.6087311338062507, 1.2084005756068184], [], [], [], [], [], [1.2412633895788219, 1.5011012260990826], [], [1.3225498812135816, 1.372080180793965], [], [1.6196672167379522, 1.2064955482132174], [1.7829760682603033, 1.206933095720204], [], [], [1.2073788597255928, 1.7855827795455534], [], [], [1.3593868304891692, 1.3339635690866467], [], [], [1.2008998774338817, 1.7299844568816194], [1.4839079779062612, 1.2491072877197513], [], [1.2274280874987427, 1.5366727594217546], [1.4641471144305576, 1.2591219937799487], [1.260760301068852, 1.4611098853387308], [1.8006764476071844, 1.2102406173464382], [1.4209762755370656, 1.28509547943312], [], [1.3326647459674679, 1.3607879554838078], [], [1.2894570518471555, 1.4145976739373507], [], [1.2001907002897068, 1.6861918892274792], [1.8231135363218018, 1.2153939154588127], [1.2067516240241505, 1.7818904121200216], [], [], [1.2400741287734922, 1.5038668998446774], [1.2260392875288524, 1.5407478633303708], [1.2043602741282387, 1.6341117450696618], [], [1.3113082766171784, 1.3854864960392128], [], [1.43423687264987, 1.276479091258674], [1.2244200797619347, 1.5456505929186788], [1.4343690946734262, 1.276396149527197], [], [1.860657291019963, 1.2265137437663824], [1.2009435407649445, 1.7307026138263404], [], [1.3989880471154508, 1.30076096856566], [], [], [1.4292815144467506, 1.2796293283544211], [], [1.25413118526868, 1.4737236202117245], [], [], [1.7851569778721514, 1.2073050750010896], [1.201002328232669, 1.7316436971731022], [], [1.7205672485545787, 1.200423190803562], [1.7801503200969588, 1.2064658814343683], [1.6589500286491399, 1.201687949320816], [1.400519716979696, 1.2996107393022653], [1.300349568234044, 1.3995344738754794], [], [1.2001717449920042, 1.6868959740666507], [], [], [], [1.7366469265709075, 1.2013448057295437], [], [], [1.3915679701055919, 1.3064651439386659], [], [], [], [1.7198767480709427, 1.2003952413295842], [1.2783937344350214, 1.4312098274929816], [], [1.2001890409725509, 1.686252082482731], [], [1.292509403043894, 1.4102562970617716], [1.486807080564021, 1.2477293077123346], [1.6193991658264404, 1.2065392563429929], [1.305336168314482, 1.3930139091761564], [1.7806510344585755, 1.2065474585730036], [], [], [1.2132246704585625, 1.5857643726772377], [1.2107985757006452, 1.5966464008198908], [1.2436656516981288, 1.495649901982146], [1.616050900151624, 1.2070978305640687], [], [], [], [1.7277589475266926, 1.200771153846044], [], [], [1.3004685752768326, 1.399376247347825], [1.4283297094108347, 1.2802438169470298], [], [1.7467036398877342, 1.2021860086124168], [1.2131463251541739, 1.8139012699187969], [1.216445588015144, 1.827181487056804], [], [], [1.4004124746171207, 1.2996909760760285], [1.201584260955584, 1.7397712342379348], [], [1.395237291222862, 1.3036167368078952], [], [], [], [1.5375851234672142, 1.227113747418219], [1.6260474271305316, 1.2054992245041611], [1.2062506820807233, 1.778813774521012], [1.526494301768092, 1.2310695438755783], [], [1.5927192492698519, 1.2116447599105997], [], [1.2241294087278218, 1.5465490946189382], [1.2073213255892261, 1.6147490540765523], [1.2072769962963958, 1.7849943622912605], [1.200771571125581, 1.7277664510440103], [1.6176593465786024, 1.2068265854751117], [1.2016214866733106, 1.74023502770322], [1.805456203302048, 1.2112475174639856], [], [1.2115393352675439, 1.8067997144618235], [], [], [1.6031070685932916, 1.209478074044172], [], [1.6533580636657603, 1.202180223599953], [], [1.2000934626745052, 1.70966715776398], [], [1.251679618998821, 1.4786206062458436], [], [1.550776455402229, 1.2227869095072128], [1.2387470757772987, 1.5070084460500746], [], [1.2063076676187325, 1.620830050221412], [], [1.2107955286592968, 1.5966608243681846], [], [1.2000404706257335, 1.6936384759796212], [1.2004518181461175, 1.7212512118826262], [1.4782628794312664, 1.2518564411241784], [], [], [1.6541687467663437, 1.2021049345223107], [1.209683674008568, 1.7979280371817166], [], [1.2280976674522193, 1.8652518941978087], [], [1.2005045417048494, 1.6775436614178192], [], [1.5485628012892954, 1.2234847590615232], [1.2000018847120881, 1.6986271531272314], [], [], [1.2002250414524873, 1.7149996936246097], [], [], [], [], [], [1.5478284087778644, 1.2237187733860138], [1.346789205976461, 1.3461043444950742], [], [1.3406957665294, 1.352292554278594], [1.2044978571447102, 1.6330849312500089], [1.7244843974828385, 1.200599845534763], [1.7900306894605191, 1.208172311723645], [1.2862805172154692, 1.4192221704541108], [], [1.6672182575866663, 1.2010757999812538], [], [], [1.2006362958731303, 1.7252168792813878], [1.549006099673628, 1.223344105182544], [], [], [1.2009101971658498, 1.6698442591374527], [1.8024678095213862, 1.2106122723117294], [], [1.215797142679171, 1.5753100125818236], [], [], [], [1.581738970074711, 1.214186940479149], [1.313697603610161, 1.3825563695024456], [], [1.2229178209924987, 1.8496415532980546], [1.2918401974155893, 1.4111997653147508], [1.3081217071762414, 1.3894659380783865], [], [1.7282815127633109, 1.2008004847400002], [1.6458734384638063, 1.2029383183786255], [1.2306543432171744, 1.5276206089490452], [1.8520417739042891, 1.2236773163200843], [], [1.6545997607800162, 1.202065447795829], [1.2249927020848834, 1.8561027447784941], [1.2168369550712383, 1.5713397030348233], [], [], [], [1.2088663844502856, 1.7937431153582244], [1.2447226104575826, 1.4933057848621738], [1.295510077599152, 1.4060818095521206], [1.6042144492924577, 1.2092606310110703], [1.200208438391246, 1.6855641091482734], [], [], [1.304861044454815, 1.3936257096121474], [1.3725916763857806, 1.322106113269708], [], [1.216639709935164, 1.5720827220879148], [1.2132403851606492, 1.5856974306437213], [1.6527941276830715, 1.2022333823780487], [], [1.2053851100289015, 1.6268145463983577], [1.832770831198062, 1.2179503071435729], [1.2052095049718543, 1.7719886520904689], [1.5020004972518834, 1.240874530317149], [], [1.5186633735029997, 1.234041817444218], [], [], [], [1.4122650841646527, 1.2910884958707745], [1.2268813253631687, 1.5382634249469582], [], [], [1.2000215341083977, 1.6953595641713344], [], [], [1.2247191259839927, 1.544732196529415], [], [1.2225579232051669, 1.5515107299976303], [], [1.326469942186977, 1.3676217577665473], [1.2273483424274447, 1.8630963230545556], [1.819083066684389, 1.214387785131962], [1.8527508165555617, 1.2239042238775804], [], [1.5348982683584071, 1.2280451099851306], [], [], [1.2075114481489915, 1.7863424941479946], [], [1.2004938480173752, 1.67778279649661], [1.2001243829814334, 1.7111520182167772], [1.4116056720350691, 1.2915532940545904], [1.6389528975509202, 1.203740741867145], [1.3213309293920268, 1.3734885377741022], [], [1.4684510593697853, 1.2568464283196792], [1.223280150220963, 1.8507918592850834], [], [], [], [], [1.6412149199881112, 1.2034677106491505], [1.4714406628821122, 1.255297144807646], [1.7814156497314348, 1.2066730374500008], [], [1.3693403041803793, 1.3249477828882008], [], [], [1.2524689365349388, 1.477029268212549], [], [1.2083047684996941, 1.7907513047832415], [], [], [1.2001938598872632, 1.6860779920411069], [1.792205023761381, 1.208575302214914], [1.4524418060591502, 1.26558667076994], [], [], [], [], [1.2889917199270027, 1.4152682074101373], [], [1.316288133439996, 1.3794298774666642], [], [], [1.5996536701153383, 1.2101728732719281], [], [1.457334516482482, 1.2628347416488712], [1.236193114285973, 1.5132296255712498], [1.517582242350279, 1.2344640060166694], [1.4458231252173, 1.2694258294722038], [], [], [], [], [1.204956985945759, 1.629768851382791], [], [], [1.3090423152658084, 1.3883077018159087], [1.6335329451655876, 1.2044375613289087], [], [1.2330648930138912, 1.5211939434362718], [], [1.4139219481486922, 1.2899276304736438], [1.7525880065504882, 1.2027731890102407], [], [], [1.332321972386486, 1.3611595242444667], [], [1.852618070700333, 1.223861654037707], [], [1.6804001060232645, 1.2003843035331048], [1.2229364821307875, 1.8497010351275218], [1.224439519182157, 1.8544092907965777], [], [1.2011075485607188, 1.7332614175420178], [], [1.22160983168185, 1.8454058006289025], [1.4043656798345925, 1.2967626645009946], [1.652989606848048, 1.202214882769986], [], [], [], [1.352512063765807, 1.3404834716293264], [], [], [], [], [1.469015462987997, 1.25655198313517], [], [1.3040917025626526, 1.3946205311088171], [], [], [1.216465546021031, 1.5727426551618326], [1.398809582370743, 1.3008955871851153], [1.2004409944277448, 1.7209952364039907], [1.2194412720298038, 1.838069942317895], [1.202317605994392, 1.6519142984157777], [], [1.2612913205714076, 1.4601360915143329], [], [], [], [], [], [1.3904845818169602, 1.3073166594990588], [1.4279156965549489, 1.2805120599840547], [], [], [1.5053985493719617, 1.2394239743392377], [1.50032639619505, 1.241600117862642], [], [], [1.2335464105246412, 1.5199415404221357], [], [], [1.3850737327906697, 1.3116426307875728], [1.2543611238257324, 1.473271104527597], [1.2116413389439595, 1.592734823117885], [], [1.866527760956123, 1.22854639164501], [], [1.3269795859960773, 1.3670498975276593], [], [1.510889673514149, 1.2371422633071638], [1.5167552476764574, 1.2347889073271323], [], [], [], [], [], [], [1.523961651614325, 1.2320144234085373], [], [1.2047955142938291, 1.6309165914528907], [1.6479007347149812, 1.2027217413190465], [1.2037304678195944, 1.7609635254020097], [1.3196218967975262, 1.3754811275070613], [1.2105387649794486, 1.8021161075058998], [1.2000141057651477, 1.7037557377670716], [1.7949887137010219, 1.2091057707922965], [], [1.3225103721408735, 1.3721256630067271], [], [1.2934658772725163, 1.4089158076119639], [1.511880834765349, 1.2367385407014544], [1.426792137615212, 1.281242953574349], [], [1.211388395243672, 1.8061070200196292], [], [], [1.3942917229421696, 1.3043455430071174], [1.4151034956604656, 1.2891058751757167], [], [1.4930924926265572, 1.2448195046000885], [], [], [1.2004054741232084, 1.6798676947682618], [1.215088576522164, 1.5780946622140821], [], [1.3690161911038654, 1.32523378187381], [], [], [1.7020420721414158, 1.2000041700760202], [1.3052859890675472, 1.3930784309084556], [], [1.201344818496914, 1.736647100296265], [1.322029626737453, 1.3726799777957803], [], [], [1.2076241726397328, 1.78698301346408], [], [1.4229659456225427, 1.2837643303185224], [1.2023858712706492, 1.6512129229310761], [1.7427960763766046, 1.2018348709044682], [], [], [], [1.2241874279233207, 1.546369286098857], [1.2143523342877802, 1.5810615924594917], [1.3588914873953832, 1.334425134030434], [1.7535140242011067, 1.2028719991654027], [], [], [1.86699265714022, 1.228710861082871], [], [1.766144271417304, 1.2043943751745], [], [], [1.3719768322895, 1.3226396928065043], [], [1.374895252827513, 1.320122515321172], [1.2304649182750125, 1.5281372436229732], [], [], [1.5621771322662124, 1.2193703534636726], [1.7446424833857577, 1.2019969390885712], [1.2007000395161467, 1.726448997350045], [1.4249856574374467, 1.2824271184752456], [1.7805709877510725, 1.2065343822181565], [1.3466018236595962, 1.3462914632649123], [], [1.4563289806057589, 1.2633944179154697], [], [], [1.5027930410088468, 1.240533553645686], [], [], [1.2320681669633209, 1.5238188442797203], [1.2000641155854306, 1.6919930358673039], [1.8458833139981239, 1.2217552313961764], [1.2000768964741249, 1.6912312736924258], [], [1.461108182722563, 1.26076122707816], [1.2000850120870297, 1.709219808022661], [1.4485864433460574, 1.2678064975839933], [], [], [1.825292083126481, 1.2159525912621503], [], [], [], [1.2215062436235105, 1.8450645549702505], [], [1.460718861376906, 1.2609731936439008], [1.340066582857539, 1.3529439019061165], [1.6791514185968188, 1.2004348524431725], [1.7632635102518042, 1.2040184194240475], [], [], [], [1.2895951645943586, 1.4143991052610856], [], [1.2051219698845086, 1.771384419231446], [1.7374419424089442, 1.2014038699020566], [1.2005850648825094, 1.675818962354922], [1.203689917203998, 1.6393674863210688], [1.5094657016158086, 1.2377266164494825], [], [1.5450787581580396, 1.2246060488119932], [1.7609338364385028, 1.2037268216225203], [1.3060133944589616, 1.3921452377268622], [1.2000360991887284, 1.6939918484059577], [], [1.4690285619728443, 1.25654516034249], [1.2015024615227619, 1.738732468706945], [], [1.241308606365594, 1.5009969713654425], [], [1.2403476045536068, 1.503226842886555], [], [1.3946269906137931, 1.304086720179265], [], [], [1.3024665153987611, 1.3967391739429627], [], [], [1.2157364488409854, 1.5755459401270469], [], [1.3055356284931385, 1.3927576532902783], [], [1.4124742527622156, 1.2909413921265636], [], [], [], [1.6846574234113132, 1.200235450093126], [], [], [], [1.3865582854975598, 1.3104434680180927], [1.3519124588258356, 1.34106398386436], [1.343498869693886, 1.349419133308072], [], [1.2017763351430633, 1.6578908587534396], [], [1.3445538018126977, 1.3483496051556418], [], [1.3376884930540012, 1.3554272617653573], [1.6132818212712325, 1.2075774604285812], [1.3167582984881605, 1.3788679427053254], [1.6921138346926599, 1.2000621954715314], [1.2006913633471703, 1.7262846982842206], [], [1.836741260805175, 1.219061513711565], [1.6143034473159226, 1.2073986390010019], [], [], [1.842365180385315, 1.2206961762995658], [1.6804531678305106, 1.2003822247436169], [], [], [1.2019139906992797, 1.6562927084014256], [], [1.3332685639088688, 1.3601352419232957], [], [], [], [], [1.2218626111543538, 1.5537651293710446], [1.2308091609945513, 1.5271996626352742], [1.6171461211559173, 1.2069125485672039], [], [1.2071705002341835, 1.6156253346046632], [], [], [], [1.2030062038677203, 1.7547463844105358], [1.3958686022285298, 1.3031321468176444], [1.5619495828773253, 1.2194356626504048], [1.4137375092042506, 1.2900563619673875], [], [], [], [1.802657973409127, 1.2106521273209303], [1.2064168317335133, 1.6201522949358145], [1.2045007729992534, 1.7669366569352145], [1.2985043990538283, 1.4020045597314073], [], [1.2032372275983803, 1.6431955287335895], [], [1.2001870452943264, 1.6863248287621575], [], [1.2028585667383398, 1.6466109062210041], [1.211576722928101, 1.8069705679817905], [], [], [1.4826421713598943, 1.2497161180667706], [], [1.2516508371587443, 1.478678902543058], [1.5465160568004919, 1.224140063485136], [1.2025687492013595, 1.750617691856703], [], [], [1.20185287513617, 1.65699486088966], [1.2164931287858398, 1.8273621038170047], [1.2015974177313646, 1.7399357732860692], [1.276903309210703, 1.4335620330299266], [1.8089931267590196, 1.212024080185003], [1.5511893252146094, 1.2226580019839899], [1.2219381113429644, 1.5535184973668414], [1.5426717449116127, 1.225397197489476], [], [1.2075082236385226, 1.7863240998581316], [1.2066287190847977, 1.61885334777027], [], [1.5292516302451689, 1.2300585204240133], [], [1.4459532743535999, 1.2693490262540408], [], [1.6203460847604891, 1.2063855210926073], [1.2116018794811858, 1.8070853672248914], [], [1.5495257344102282, 1.223179808108739], [1.2699411389934594, 1.4449522082633197], [1.7293591323764597, 1.2008627029102097], [1.427543046285523, 1.2807540001709885], [], [], [1.3282050654423263, 1.3656819977368027], [1.6732046832672824, 1.200718505248599], [1.8462453946378756, 1.221865829973205], [], [1.48397432278755, 1.2490754976884686], [1.8218054291843233, 1.2150634707291863], [], [1.4201201388213538, 1.2856725168340606], [1.2057545666173923, 1.6243597224989326], [], [1.2254556923094757, 1.5424953967703767], [], [1.200026744452622, 1.7051714347483262], [], [1.7039130308248038, 1.2000153120446946], [], [1.4685998932470312, 1.256768694026793], [1.2307410856256427, 1.5273846145901255], [1.2568561194933423, 1.4684325127106548], [1.7273794785837855, 1.2007501986455278], [], [1.4931504409957155, 1.2447931679557818], [], [1.5120904837083635, 1.2366534626361785], [1.3829673495887516, 1.3133602470345047], [1.200271262069544, 1.7164678015057737], [1.2374171071191655, 1.5102183696613434], [], [], [1.2932847913976067, 1.40916888218158], [], [1.2008991299255043, 1.729972011792361], [], [], [1.3984966907284175, 1.301131908397921], [], [1.638318317791685, 1.2038192163334491], [], [1.2142645328305506, 1.818579323381763], [], [1.6001054548163984, 1.2100805373915409], [], [], [], [], [], [1.2762069563871323, 1.4346710415628516], [], [], [1.507319303735108, 1.2386171337306981], [1.3969958216289267, 1.3022708611508698], [], [1.294996644619203, 1.4067896964117805], [], [], [1.2149379440708172, 1.8213045831687917], [1.3463319076291456, 1.3465613484085805], [], [], [1.2084294451738908, 1.6085757711109832], [1.812378332830306, 1.2127925387370582], [1.2028378596619511, 1.6468040770877104], [], [], [], [1.5775244369168808, 1.2152322860921192], [], [], [], [], [1.2120669451917625, 1.809184861704824], [1.5191688064675815, 1.2338454339538858], [], [1.5222047379545356, 1.2326790772989242], [], [], [], [], [1.2128755617350784, 1.8127376673746827], [], [1.2589629037213181, 1.464444741714245], [1.229313501029123, 1.8686837860807572], [1.2802970077315843, 1.4282475422724974], [], [], [], [1.6928765266913826, 1.2000507464471806], [], [], [], [], [], [1.812367347059004, 1.212790004910694], [1.2031651689863752, 1.6438292719322343], [], [1.2028002592614395, 1.6471566673126277], [], [], [], [1.591386088006769, 1.2119395343591874], [1.349866383842104, 1.3430595976410136], [], [], [1.4024183747931356, 1.2981975904262875], [1.5645410284999373, 1.2186987772297422], [1.3115676871897906, 1.38516617341062], [], [1.4586163554792826, 1.2621256616814638], [], [1.2015086356472175, 1.7388118495527032], [1.2022706542715542, 1.6524027479707772], [], [1.2049797289387618, 1.6296087275405653], [1.7186945509189473, 1.2003496084601366], [], [1.2009969335420516, 1.668441488223234], [], [], [], [], [], [1.3902091624770336, 1.3075339033918738], [], [1.3837175998985467, 1.3127462803457348], [1.595209438491004, 1.2111043687875402], [], [], [1.2010110665164304, 1.7317811935101548], [1.2072677828141505, 1.784940933283764], [1.200748432792154, 1.7273472602011555], [], [1.2047916182540668, 1.7690554751527654], [], [], [], [1.2230192284317145, 1.5500355256931726], [], [], [1.2305486452970102, 1.527908670853155], [], [1.2288856346333412, 1.8674850881277802], [], [1.2073034561224654, 1.6148523890462414], [1.248553832184727, 1.485066620635825], [], [], [], [], [1.3049958943794528, 1.3934518691250726], [], [], [], [1.3137053603788305, 1.3825469303976559], [1.852527946781587, 1.2238327757493241], [], [], [1.2223113962275325, 1.5523057285271002], [], [1.842152534690425, 1.2206330665543486], [], [], [], [], [1.3004956588434637, 1.3993402564408033], [], [], [1.2074950900164891, 1.786249137051531], [1.2665189820409153, 1.4508129074988918], [], [1.2485957845601208, 1.4849785259954087], [], [], [], [1.3768474737766419, 1.3184604282705896], [], [], [], [], [1.2313183244829937, 1.5258234027356958], [], [1.2451715850748761, 1.4923196856302952], [], [], [1.843994104526693, 1.221183022584249], [1.3150198116858802, 1.3809541496812332], [1.3466510480667253, 1.3462422888930103], [1.3569041299178994, 1.336289642802674], [], [1.2555154995518834, 1.4710163131107625], [1.6047368032442806, 1.2091589632641937], [], [], [1.5139545345441072, 1.2359018586728663], [1.513183658998443, 1.2362116272104378], [], [], [1.5173178755407724, 1.234567683327572], [1.3036102275987465, 1.3952457574771395], [], [1.2308012649241684, 1.527221103709858], [], [1.2445711424610124, 1.4936397428749113], [1.2025036390161614, 1.6500262988379075], [], [1.5685545363796438, 1.2175872202214895], [], [1.419755951136176, 1.285918760294057], [1.2006793636614224, 1.6739442496473833], [1.2389300304602702, 1.5065717621735835], [], [], [1.200781694105212, 1.6720521367625714], [1.213917038464717, 1.8171467221269493], [], [1.2396085831017505, 1.504962200467647], [], [1.2210576123059715, 1.8435764230991387], [1.2007342941780283, 1.7270879122504568], [1.202240885290425, 1.6527150793218373], [], [1.4566384362077291, 1.2632218534901494], [], [], [], [], [1.2276875789865378, 1.5359238684134646], [], [], [], [1.3094132002449452, 1.387843065338755], [], [1.7664645711593154, 1.2044372282136113], [1.612697607962482, 1.2076807008205677], [1.2414231100350719, 1.5007332541789915], [1.3150919557877954, 1.3808671162341062], [1.2215866202474628, 1.5546705877196405], [], [], [1.218012280709105, 1.5670043667906297], [], [1.561514314094186, 1.2195609145800101], [1.2194135914624495, 1.837973562427657], [], [1.2000040020756177, 1.6979994851659952], [1.3450962262078017, 1.3478021701542497], [1.2450354862654276, 1.4926180064656909], [], [1.4050924477672995, 1.2962308386762096], [1.739448342398751, 1.2015586009549457], [], [1.2125625184147046, 1.8113763958196927], [], [], [], [1.633715034539768, 1.2044131727396945], [1.2692527265502438, 1.4461165889318464], [1.3033485950697992, 1.395586362055019], [1.2013431355619668, 1.7366241934904918], [1.63610068493669, 1.2040999319072039], [], [], [], [1.2743826129731284, 1.4376074698844912], [], [], [], [1.819766982584467, 1.2145560074708803], [], [1.2100988173567027, 1.6000158450318318], [1.295361215329773, 1.406286782829574], [1.2096364253417444, 1.6023088302435813], [], [], [], [], [], [], [1.8698986827561872, 1.2297506644367135], [], [1.746132115135128, 1.2021327205437584], [], [1.588074050008299, 1.2126884141348009], [1.202808162947364, 1.7529176451500343], [1.357327908789112, 1.3358903490634217], [1.2723751085289559, 1.4408920066953206], [], [], [], [1.8605377974308184, 1.2264732155452434], [], [1.2002482185488703, 1.715752997696386], [], [1.206880422600802, 1.7826624605588077], [], [1.3224321654101496, 1.3722157259978274], [], [1.3306847944628784, 1.3629446945098271], [1.2295994839818607, 1.8694796581595214], [1.819627924716948, 1.214521720745494], [1.200598339647958, 1.7244536630716893], [], [1.2867409760422963, 1.4185448896937094], [1.29992541468954, 1.4000994728436382], [1.3067950951949898, 1.3911474415885747], [], [1.2000002439983406, 1.7004939618215138], [], [1.4301262088445659, 1.2790865447061674], [1.201905344730866, 1.656391349570037], [1.3155619230021054, 1.3803011339492102], [1.327598673970202, 1.3663575980615652], [], [1.2023021346999978, 1.6520746948280884], [], [1.7564305662243227, 1.203194614365341], [], [1.2215642713627877, 1.5547441789001912], [], [], [1.3379284901174588, 1.3551750853964044], [1.2028427675028894, 1.7532417709680468], [], [1.6955920206708188, 1.200019430659317], [1.7524533297797698, 1.2027589636856038], [], [], [1.5147039462565588, 1.235602139898225], [1.7251429029147525, 1.2006325657063535], [], [], [1.223046300236598, 1.549949447578482], [], [1.3573902427107232, 1.3358316952147224], [1.3957042892395224, 1.303258118655497], [], [], [1.2006715529000873, 1.7259056348463002], [], [1.2020819705823147, 1.65441890763914], [1.3840283318428774, 1.3124927033951421], [1.2129246593104521, 1.812949601558221], [], [1.2000670051644262, 1.6918146060122805], [], [1.2009076184429093, 1.7301130315921762], [1.7250817611792566, 1.200629491002776], [1.2133392082600603, 1.585277405089254], [1.6728887079692503, 1.2007355632088106], [], [1.3523243606500834, 1.3406649894560414], [1.498506672042866, 1.2423970730111544], [1.2061741856654185, 1.7783330396243342], [], [1.7007975726503546, 1.2000006361225373], [1.5041535990065928, 1.239951972922468], [1.2683145124259931, 1.4477151613394257], [1.397731461514719, 1.301711498230275], [], [1.4410214787196043, 1.2722966851713449], [], [1.5698592016822468, 1.2172336252251843], [], [1.5436454584783978, 1.225075524587783], [1.8541768306493567, 1.224364104707267], [], [1.6890051077636192, 1.2001209022726491], [1.3912091446771586, 1.3067466367988851], [], [], [1.6386707993941565, 1.2037755254392946], [], [], [1.2102950051149577, 1.8009406656637486], [1.2742039524723765, 1.437897489691812], [], [1.6622479842210929, 1.2014272517429085], [1.70463892218529, 1.2000215200621542], [], [1.2484191479938158, 1.4853497400388975], [1.2047828774539853, 1.7689927643832695], [], [], [], [1.673696230827558, 1.2006923676456338], [1.2801557787845375, 1.4284657850067843], [], [], [1.3349311676411628, 1.358349963207736], [1.808091530389938, 1.211823575888838], [1.2000079063466385, 1.6971881884614826], [1.748472272105322, 1.202355107695309], [1.320050145801231, 1.3749798340189732], [1.6804856978401925, 1.2003809531140592], [], [], [], [], [], [], [], [], [], [1.3307765931598723, 1.3628441371689206], [1.2054256836242607, 1.7734591422592867], [], [], [], [], [], [1.560869573824353, 1.219747228522122], [1.5203843185269927, 1.2333757325545667], [], [], [], [1.5429257236995442, 1.2253130803100973], [1.2247756749329262, 1.855440795367703], [], [], [1.445526875865388, 1.2696008491026376], [1.7448953893220422, 1.2020196750697651], [1.595574500733741, 1.2110262633811582], [], [1.2009955187716779, 1.668463866532925], [], [], [1.3726564464313442, 1.3220500060364537], [], [1.770876211935515, 1.2050489291034194], [1.2797372829242821, 1.4291139563651623], [], [1.2478063800060522, 1.486643654800779], [1.7659051135639254, 1.204362515535673], [], [1.2164864220090925, 1.5726633599531123], [], [1.2063955185705146, 1.7797158448034565], [1.4737374927023148, 1.2541241453146794], [], [1.2234989815267958, 1.85148194411876], [1.3835012666985151, 1.3129230673127683], [], [], [1.2180895377139471, 1.8332753028105468], [1.256007407584974, 1.4700639700251728], [1.2000855116885807, 1.6907531423536533], [1.2059167105300088, 1.7766922621032457], [1.636974795201172, 1.203988081231846], [], [], [], [], [1.4646280490849999, 1.2588650493075084], [1.2248867135040233, 1.5442201393151476], [1.2636993357567134, 1.4557834354904093], [1.2280595702467436, 1.865143061508232], [1.2235316126339804, 1.5484154498610605], [1.8630953825372139, 1.2273480178873255], [1.5285850663968321, 1.2303012449049693], [], [], [1.2722215995364456, 1.4411455233208377], [1.210077007395814, 1.7998772312279367], [], [], [1.6194551614653236, 1.2065301133955355], [1.2472497907597635, 1.4878273155353827], [1.2506430861167774, 1.4807322095123265], [], [], [], [], [1.2453285011040935, 1.4919763761210043], [], [], [], [], [1.2491598840835298, 1.4837982657784081], [1.4787100174647132, 1.2516354790691702], [], [], [], [1.2525850904329814, 1.476796284311536], [], [], [], [], [1.4652709206381012, 1.2585226401026715], [1.6613679680842353, 1.201494667922138], [], [1.314018385990181, 1.3821664057303331], [], [1.2259124788767883, 1.5411257657288373], [1.2627352425438427, 1.457513852175412], [1.8239182226518547, 1.215599056467883], [], [], [], [], [1.2000503321435023, 1.70709433648608], [], [], [1.7488727302510785, 1.2023942763212974], [1.7972156830454395, 1.209541937603215], [1.7506089963176301, 1.2025678644360398], [1.3936708463652874, 1.3048260514236285], [1.2328441465417874, 1.5217714709152066], [], [], [], [1.5938790928475584, 1.2113914111836113], [1.2221380535794706, 1.5528675421153337], [1.2115500550730283, 1.806848730927599], [1.2077557239553989, 1.78772441337123], [1.2365103467125431, 1.5124437649784124], [], [], [], [], [1.239400358233109, 1.5054544526230125], [1.41079827957968, 1.2921245718286927], [1.4052021527062686, 1.296150734517219], [], [1.6231305580722926, 1.2059442451527127], [1.2518669350454323, 1.4782416718713245], [], [1.7856628885621637, 1.2073927837280636], [1.2106819237850746, 1.5972000958690895], [1.6359383437003852, 1.2041208774387149], [1.2333359219766846, 1.5204877767876261], [], [], [1.4366101747940476, 1.2749990588504798], [], [1.2266112961654672, 1.5390554906750125], [], [], [], [1.8132997508616593, 1.2130059893030656], [], [1.434242075228919, 1.2764758266387048], [1.460652094746076, 1.2610095897965894], [1.2386506683808185, 1.507239023102355], [], [1.2306265631216393, 1.527696265992302], [], [1.210103664600417, 1.5999920975019504], [], [], [1.36100514235949, 1.3324643058241956], [1.844748107169086, 1.2214104206410603], [1.7085758705698646, 1.2000735509657756], [1.8667137110647212, 1.2286121145563573], [], [1.5987714539279883, 1.2103544328188536], [], [1.2526899336572603, 1.476586248076682], [1.7076866481886135, 1.2000590880517734], [], [], [], [], [1.689733789450917, 1.200105406189503], [1.2000798652793279, 1.7089363807475484], [1.4743721856418306, 1.25380263404189], [1.7997890411158848, 1.2100590369512136], [1.4104465930803238, 1.2923741610972037], [1.8125752075484896, 1.212837991377186], [1.4462449278158651, 1.2691771090798163], [1.2249192505446884, 1.544120939517267], [1.2789291410457015, 1.4303718639691152], [1.7852159875990234, 1.2073152778322398], [], [1.8621006287164996, 1.227005934318711], [1.6624987629591215, 1.2014083261621753], [], [1.8356918448974406, 1.2187643786788753], [1.4586865052539348, 1.2620869980767404], [1.4842063921545043, 1.2489643929654506], [1.3098873082531601, 1.3872507590128553], [1.549723535239068, 1.2231174315002105], [1.7642478424179542, 1.2041449659984909], [1.2249387059663148, 1.8559383432996535], [1.2046195682014267, 1.7678102336750068], [], [1.4349687327476697, 1.2760207229372833], [], [1.3099462552438466, 1.3871772447507988], [], [1.7124157816768364, 1.2001541754047023], [], [], [1.5780229496728588, 1.215106610486913], [1.276306496930357, 1.4345121180607776], [], [], [1.3246586889968412, 1.369668499451793], [], [], [], [1.5286344705731856, 1.2302832179661156], [], [1.200392721905625, 1.6801866793512619], [1.2143052590192176, 1.5812539744513079], [1.7807398130415932, 1.2065619769515035], [1.2000783549057807, 1.6911485161532367], [], [], [1.2006005531603279, 1.675501173574446], [1.5367364600391602, 1.2274060765102293], [1.207314025702631, 1.7852087479702177], [], [1.2434971006543503, 1.4960267103539888], [1.2484932701752414, 1.4851938713096098], [1.4609798265604048, 1.260831061334131], [], [], [], [1.2000598329953367, 1.707734947662996], [], [1.659154619206543, 1.201671137833822], [1.3471956072181284, 1.345699194985652], [1.6143994984872396, 1.207381938880877], [1.2566408003271778, 1.4688450301951637], [1.2234990673919919, 1.548517785784276], [1.654662038197066, 1.2020597734470977], [1.5058540008367303, 1.2392318033881942], [1.2253100023100847, 1.542935025886902], [1.229251576679296, 1.5314891043846979], [], [1.200122894900641, 1.6889148839661297], [], [1.2150010637315483, 1.82155670207138], [], [], [1.2553326791388393, 1.4713715377339087], [], [], [1.6245710537869278, 1.2057222703042494], [1.2035397386238258, 1.640609690400698], [], [1.4070478889899216, 1.2948098463008524], [1.3882585819626887, 1.3090814812776372], [1.206560763875196, 1.619267600973525], [1.7006525235259713, 1.2000004257871333], [], [1.8528804117633881, 1.2239458227270168], [1.6789341622551128, 1.200443966626259], [1.4884771426243455, 1.2469458301619567], [], [1.2190687311838593, 1.8367666431367564], [], [], [1.2492583925413594, 1.4835929684469547], [1.2006214695113255, 1.6750784573717419], [], [1.2013431898083948, 1.66337506792452], [1.8236142927891412, 1.2155214074716607], [1.2026741132998011, 1.751642641468665], [1.2190162038529666, 1.5634182009051385], [1.3651265542413373, 1.3287052716160381], [1.23338105929063, 1.520370480790975], [], [], [], [1.200207031561297, 1.7143871018356625], [], [], [], [], [1.3457156646539963, 1.347179068466112], [1.2536976358614813, 1.474579948175924], [1.764035677819088, 1.2041175220213463], [], [1.36017132801984, 1.3332351247731036], [], [1.2440939461176144, 1.494696151927463], [], [], [], [1.521890638015329, 1.2327986995165645], [1.2673925288209758, 1.4492994298369273], [], [1.6746787107970866, 1.2006415793109098], [], [1.723607382174761, 1.2005576194325767], [1.6771418066532986, 1.2005227702918533], [1.456814265767814, 1.2631239321432763], [1.210490838843353, 1.598113881496467], [1.2002438072870318, 1.7156124259818473], [1.200332439066173, 1.6817701192971475], [1.3883027433481274, 1.3090462684719626], [], [1.2084487556070818, 1.6084720035411373], [1.2023337118679314, 1.6517478947936066], [], [], [1.610855018776854, 1.208011003860122], [1.570997839561414, 1.2169281185970586], [], [1.3925184962148962, 1.3057220208659235], [1.7174960899262355, 1.200306206925388], [1.2000282156720692, 1.70531176768553], [], [1.8454584712324547, 1.2216258439811813], [], [1.406806362394505, 1.2949845794693025], [], [], [], [], [1.203400152773984, 1.7582116116861366], [1.3226682309915505, 1.371944004631901], [1.225790572277373, 1.8585099954544777], [1.2260188283934061, 1.5408087660628242], [1.507898574828919, 1.2383756479048795], [1.2046732381677872, 1.6317988342268674], [1.2774173547533176, 1.4327474828251066], [], [], [1.634082856769688, 1.2043641152737683], [1.225218412364955, 1.8567878950772227], [], [], [], [], [], [1.5812282801339177, 1.2143115416647694], [1.4388173539157503, 1.2736390902246906], [1.2005276089604913, 1.7229636797851766], [1.253019335621883, 1.4759279453566392], [1.2000000002302103, 1.6999848273131137], [1.7141065316458997, 1.20019903384955], [], [1.471758024172726, 1.2551341770033777], [1.8421579152500551, 1.2206346621502988], [], [], [1.2802857353180135, 1.4282649525319573], [1.2032722855189761, 1.7571102238347776], [], [], [], [], [], [1.8387813191462308, 1.219646228852076], [1.2010752043834416, 1.7327726764084872], [1.2223686043024502, 1.552120826875416], [1.259799397525597, 1.462885197465083], [1.6421715983960476, 1.2033553826246255], [1.2316225514801402, 1.5250069552295689], [1.3901141021551897, 1.3076089573946472], [1.2684846038166886, 1.4474243423115367], [1.6562781611016935, 1.2019152674460392], [], [], [], [1.4413240569868675, 1.2721136172927834], [1.2161633929719384, 1.5738963216255248], [], [], [1.2065720583107773, 1.7808014007325188], [1.814267050617692, 1.2132320458954453], [], [], [1.2177450546525739, 1.8320233603872853], [1.5910696219607499, 1.212010069017581], [1.8095927442776532, 1.212158396196375], [], [], [1.361864229985482, 1.3316737844835247], [1.4360116589973573, 1.2753705664762833], [], [1.2078812489060573, 1.6115741280973828], [], [1.2154254290477153, 1.5767624846631136], [], [], [], [], [1.2110737829979363, 1.8046477631297053], [1.6479211704822596, 1.2027196007119705], [], [], [1.3489029028862412, 1.3440072635596452], [], [1.2341252387843844, 1.5184491617692357], [1.2200657714326504, 1.8402253053106428], [1.471117373969569, 1.2554634508823668], [1.3454443273570305, 1.3474517408968079], [1.233655219834444, 1.5196599156805697], [], [], [], [1.836630037052693, 1.2190299042820025], [1.8230481940159178, 1.2153773200216265], [], [1.524618919895168, 1.2317677107019822], [], [], [], [1.4619563214209363, 1.2603010039941558], [], [1.7490894097136902, 1.2024156052949797], [1.2095029578254317, 1.797018820947277], [1.3959173082321938, 1.3030948267315663], [], [], [], [1.8117923214330254, 1.2126577415525972], [], [], [1.3146632039317443, 1.3813849444928072], [1.4067172043238179, 1.2950491366099304], [1.3905788169519047, 1.3072424011160102], [], [], [], [1.2090849308438092, 1.7948809510669679], [1.2009571422374743, 1.6690770939882502], [], [1.3071459681424065, 1.3907012614748762], [], [], [], [], [1.220401488589653, 1.8413692606367424], [1.2224127373566167, 1.551978357795895], [], [], [], [], [], [1.2880716292468322, 1.4166009573611076], [1.7345745632796128, 1.2011968328348104], [1.617161486591328, 1.206909966946967], [1.2942082805672404, 1.4078817355251396], [], [1.227436574245245, 1.5366482058900781], [], [1.724306246093799, 1.200591143049277], [1.2000030751688904, 1.6982463867490667], [], [1.2181194292365394, 1.5666166595084623], [], [], [], [1.6452223767559437, 1.2030096459771755], [1.60740930395783, 1.2086478218157302], [], [], [1.420224064605961, 1.2856023335316782], [1.2143561301213506, 1.8189539055655148], [1.6593431162140657, 1.2016557236198884], [], [1.694175249560776, 1.2000339288688473], [1.3444578965925302, 1.3484465720482985], [], [1.2937648554042733, 1.4084987010401342], [1.5133997011640328, 1.236124662787158], [1.448248873485759, 1.2680030436463579], [], [], [], [1.4832108682247507, 1.249442043301715], [1.2266129074484526, 1.5390507514599934], [1.3450945318362397, 1.3478038775519212], [1.3316756168833168, 1.361862233990767], [1.3265145604717279, 1.367571622059167], [1.2260687809826565, 1.8593398871617985], [1.4980504621977146, 1.2425982245536826], [], [1.3009048882443712, 1.3987972580258237], [1.3957603869069906, 1.3032150987940494], [], [1.5880467359283816, 1.2126946884511616], [1.2068381042695306, 1.6175903852725324], [1.8668288894860112, 1.2286528650422661], [], [1.4154095994171603, 1.2888938046001996], [], [1.4165583723483972, 1.2881009301853061], [1.2579818023112175, 1.46629096527528], [], [1.336048343669523, 1.3571601075512034], [1.6850051739034968, 1.2002248953875996], [1.2026471291315435, 1.7513821159442111], [1.2016377256026347, 1.659564329392412], [], [1.3658726645404298, 1.3280337062330942], [], [1.649501410414847, 1.2025566439785225], [], [], [1.3342746744746448, 1.359052810145951], [1.20000070253132, 1.6991618288799624], [1.279758487146699, 1.4290810621703074], [1.241470302201701, 1.500624684985827], [1.350157186250607, 1.3427745730383858], [1.470913093942916, 1.2555686898145082], [1.2074171179342346, 1.785802705643728], [1.2003114856020654, 1.7176462057900574], [1.2000401928222069, 1.7063396535192306], [], [], [1.6370638917158786, 1.203976768412961], [1.200061373396124, 1.6921661229630383], [1.200207780494508, 1.7144130954959098], [1.642136749582206, 1.2033594415967543], [1.2204691033624053, 1.5584015566118592], [], [], [1.8528425972479485, 1.2239336806005896], [1.5798206853557324, 1.214657922356165], [1.2606890663576689, 1.4612409089012453], [1.2105816110917886, 1.802321261712758], [], [], [], [1.7848673292322135, 1.2072551000477112], [], [], [], [], [], [], [1.614351019971479, 1.207390365278881], [], [], [], [1.2027652448952366, 1.6474871604661674], [], [1.8094840292905456, 1.2121339862930531], [], [], [1.6233323454448834, 1.2059128915413626], [1.3737603176123765, 1.3210967542556245], [], [], [1.829787034862632, 1.2171383991436406], [1.2900936053172343, 1.4136841820678139], [], [1.7986100228264454, 1.209820376394359], [1.571383467053718, 1.2168253033809842], [], [1.217909692535069, 1.567376716039874], [1.7975824515174643, 1.2096147788158356], [], [1.2127073229627943, 1.5879917551877822], [], [1.210557082093069, 1.5977961345606284], [], [], [], [], [1.2502118575484904, 1.4816181625912528], [1.4351474441579364, 1.275909062035126], [1.2006535567210435, 1.6744435999276894], [1.2338603132145103, 1.5191304547373286], [], [], [1.200407511138987, 1.7201827915229422], [1.6633620835107017, 1.20134414364682], [1.8054358039986824, 1.2112431164319508], [], [1.2272085314952947, 1.5373094123522684], [1.8536848860052946, 1.2242049224576408], [1.350548779841202, 1.3423914923697602], [], [], [1.2092180520885696, 1.6044328529029874], [], [], [1.3291152634132886, 1.364672529954664], [], [1.2071936728787076, 1.7845099044445198], [1.2000021495432258, 1.7014661304870944], [], [], [1.340282903318589, 1.3527196948355744], [], [], [], [1.5458766958729693, 1.2243467574745581], [], [1.3042795758081258, 1.3943771182038178], [], [], [1.2031222573704081, 1.6442101364106256], [], [], [1.291839423425217, 1.4112008591942478], [], [1.2766335769515116, 1.433990842572801], [], [], [1.22978760373763, 1.529999110587032], [1.6038794732032082, 1.2093261324175626], [1.2002272065323056, 1.7150716591487902], [1.7008874674780858, 1.200000787599145], [1.2179196194461692, 1.5673406366475637], [1.2703079190088733, 1.4443347588475997], [1.4249044140568925, 1.28248063686265], [1.4938419987363334, 1.2444795520341922], [], [1.2133499367339713, 1.5852319037224616], [1.388778505264796, 1.308667428885883], [], [1.4871419317538215, 1.247571615852293], [1.8529081326492611, 1.223954725924397], [1.7178535105710733, 1.2003188495047181], [1.718237993920106, 1.2003327351348998], [], [], [], [1.824162931772226, 1.2156617231998637], [], [], [1.4262464433321167, 1.2815994858850146], [1.669667423285996, 1.2009209132914012], [1.2379093222539064, 1.5090230235338409], [1.3110189026047006, 1.385844455931224], [], [], [], [1.3310384574612943, 1.3625575899098352], [], [1.220061026743335, 1.559790934853205], [1.2011641410907923, 1.7340996461317857], [], [], [], [1.2000666972624436, 1.6918334331620422], [], [1.290198033381628, 1.4135347348181375], [1.4045308814794306, 1.2966415985743227], [1.533945574435322, 1.2283794663605232], [1.3288072310833516, 1.3650135401184225], [], [1.2107213697865196, 1.5970125152437429], [1.451283407257708, 1.2662488541863377], [], [], [], [1.8405449111636176, 1.2201592681461788], [], [1.2056024530526348, 1.7746395710895218], [1.3186580632714326, 1.3766142747552], [1.8109691065243194, 1.2124696343844885], [1.8022599563060946, 1.2105687981582338], [], [], [], [1.7455683127758213, 1.20208080086146], [1.2574729320412714, 1.4672559471783417], [], [], [1.3785054750816572, 1.3170623151901486], [1.213688988508208, 1.5838036140758665], [], [1.2085405923077883, 1.607980161971341], [1.5098978784625978, 1.2375487232291613], [], [], [1.223126578336138, 1.8503054879590248], [1.202361117665904, 1.7485339344095618], [1.4538856238350713, 1.2647670579506325], [1.2001325672868284, 1.6884869763857246], [1.3451399373622808, 1.3477581286321088], [1.3109190842280585, 1.3859680892296655], [1.5565970926882122, 1.2210056303310792], [], [1.3158298029283033, 1.3799792824176946], [], [1.6418091892706315, 1.203397714920019], [], [], [1.3512266250492382, 1.3417303628194885], [1.2407201975176765, 1.5023587516943944], [], [1.2679441894099404, 1.44834989263788], [], [], [1.2083370539451916, 1.6090739450063583], [1.7696439197191154, 1.2048740317392377], [1.7807814454139788, 1.2065687909375529], [], [1.6671087734095327, 1.2010830056879456], [1.5557357889217776, 1.2212643345206269], [], [], [], [], [], [], [], [], [1.8092511010769214, 1.2120817723086375], [], [1.5659978801449626, 1.2182911336975868], [], [1.670558913102818, 1.2008675302063463], [1.8394542621714534, 1.2198411629864387], [], [1.7658124619013147, 1.2043502044200078], [1.5304472057480425, 1.2296258404617093], [1.2093568470315268, 1.6037228145137417], [1.2231181637236739, 1.5497212116440937], [], [1.6253742974534546, 1.2056003595071751], [1.2009259291660717, 1.669585006637332], [1.3683505185872218, 1.325822740564535], [1.3442911113880185, 1.3486153296422438], [1.2026121522304776, 1.648957577533953], [], [1.316292135784237, 1.379425086853357], [], [], [1.2634020371631336, 1.4563153290691058], [], [1.282746264878718, 1.4245016868883966], [], [], [], [], [1.7767316598426526, 1.2059228275078968], [1.2129876792973864, 1.5867789794964973], [1.2000022100765286, 1.6985133690289], [1.3175192713083463, 1.3779619709110402], [], [], [1.6603069523099623, 1.2015780282079487], [], [1.612903931723367, 1.2076441582648254], [1.5724757120772732, 1.216535879314916], [1.8037941633188317, 1.2108918609745452], [1.3642555452982448, 1.329492697592853], [], [1.4313985272033034, 1.2782734905042779], [1.7819482334744317, 1.2067612271623205], [1.7877975950296767, 1.2077687715036713], [1.729711544831617, 1.200883556568491], [1.7704676855033379, 1.2049906007965074], [], [], [1.467405801565715, 1.2573941495475771], [1.3217719108876038, 1.3729778102232428], [1.3981932400805166, 1.3013614674082503], [], [1.710070869478159, 1.200101432700639], [], [], [1.2051422220609342, 1.7715246783509742], [1.2023323784665365, 1.651761649310683], [], [], [1.5741888838576026, 1.2160872361106765], [1.7906202808044351, 1.2082806036905547], [1.4479356682048496, 1.2681857197397655], [], [], [], [1.4495593712546315, 1.2672419943275173], [1.2599598006085015, 1.4625876521334866], [], [], [], [1.5504313866637711, 1.2228949487747194], [], [], [1.2378360403569044, 1.509200433944374], [], [], [], [1.2709229864038485, 1.443303844198227], [1.805403939086717, 1.2112362435439759], [1.8439304079924566, 1.2211638718150801], [], [], [1.2050899277199139, 1.628838069477283], [1.2196086229586243, 1.8386510903826248], [], [], [], [1.2051797576157512, 1.7717838960129173], [], [], [], [1.8539764459627397, 1.2242991968803463], [1.5763718007623975, 1.2155249559025072], [1.2059423183792273, 1.6231429428646456], [], [], [], [], [1.8021063326219129, 1.2105367257510495], [1.2021473699022478, 1.6537100582766544], [1.2015829110037441, 1.6602456870704758], [1.2111821297797403, 1.805152697318373], [], [], [], [], [1.2012928744637559, 1.7359333123908278], [], [1.5942571933201508, 1.2113094447040458], [1.2043873288167364, 1.7660914530222342], [1.2099306532602305, 1.7991566204852487], [], [1.2251373782596595, 1.8565422961179832], [1.2131512413868244, 1.586077718435725], [1.2016815406002148, 1.6590278994750736], [], [1.8621697271934636, 1.227029620819657], [], [], [], [], [1.283171487247338, 1.4238587481805662], [], [], [1.4374246953706789, 1.2744953473828762], [1.419952207014893, 1.285786005011696], [], [], [1.3865630137742397, 1.310439663638978], [1.2011473118494065, 1.66614744433685], [], [1.2224539787839908, 1.5518453590981407], [], [1.2000288152813101, 1.7053679093686163], [], [1.5773490922266582, 1.2152766203055858], [], [1.2130873639582096, 1.5863510454828775], [], [1.4506671644127351, 1.266602795235117], [], [], [], [], [1.3505173974588511, 1.3424221615912622], [], [1.5584444762618987, 1.2204564319071396], [], [], [1.2002651506528375, 1.6837187117226917], [1.2629925362737975, 1.4570504648129745], [1.211739475740838, 1.8077110043132465], [1.2427351125563173, 1.4977407042652522], [], [], [], [1.7889358144031016, 1.2079731502077786], [], [], [1.6261671421205997, 1.205481335946397], [1.2004901082249795, 1.7221329622714054], [1.7939145368005232, 1.2088991348230558], [1.2524117672422577, 1.4771440512420613], [1.2045235411468869, 1.7671049828431482], [1.4169025042718684, 1.2878643331226227], [], [1.2235309583832614, 1.5484175063510737], [], [], [], [], [], [1.2086751958623627, 1.7927358444136479], [1.7928987923625994, 1.2087059797050541], [], [], [1.789601511719518, 1.2080939428126778], [1.5733613333947276, 1.2163031443967838], [1.210539149784267, 1.5978820480714002], [], [1.8281444270996399, 1.21669988019523], [1.2310877199491053, 1.526445185553753], [1.4021022996407324, 1.2984318736245866], [1.865176640443554, 1.228071321647242], [1.209969327770491, 1.799347573066963], [], [], [1.667070136804694, 1.2010855543182393], [1.3442787998325771, 1.3486277931431565], [1.31797251675594, 1.3774244242875642], [1.4231361932032234, 1.2836510688304854], [], [], [1.2034457682712998, 1.7585994449830398], [1.3945270193845314, 1.3041638494100096], [1.2000378165696963, 1.7061494015646477], [1.7754615231393351, 1.2057272427844201], [1.6472244629261446, 1.2027930584891577], [], [], [1.2047996000065697, 1.6308873105258759], [1.2503033634743135, 1.4814297936646335], [1.3660550726182241, 1.327869934732518], [1.4649440120885764, 1.258696609409145], [], [], [1.2353784213164787, 1.5152656268540357], [1.8625885816537768, 1.2271734428822625], [1.8086450584943403, 1.211946466804346], [1.2212479816003912, 1.8442099333551634], [1.2326630888903807, 1.5222467679210312], [1.2431551799825207, 1.4967936752382032], [], [], [1.2058201552013146, 1.7760676080519637], [1.2359408021831266, 1.5138574177638011], [], [1.440934595575639, 1.2723493058225648], [1.4018324581185655, 1.29863219241152], [1.7862057753005398, 1.2074874983263544], [], [1.6299303760305406, 1.2049340975215739], [1.4969868851987775, 1.243069288383123], [], [1.7676663611380588, 1.2045998954679824], [1.2867491337152952, 1.4185329121994172], [], [1.7092620593978414, 1.200085793104746], [1.3690229208555211, 1.3252278384391531], [], [1.2089362284293301, 1.6058916993523475], [], [], [1.2006543152945839, 1.6744287824677961], [], [], [], [1.2001468509283733, 1.6878826833342493], [1.3171507643651237, 1.3784001511601864], [1.489253089440102, 1.2465843632058347], [1.3762796787299891, 1.3189420600527513], [], [1.6592331707371435, 1.2016647056129246], [1.7920018292753213, 1.2085372207277598], [1.2029560858421617, 1.7542894777894897], [1.2141287942288606, 1.8180219106882234], [], [1.5461985849909339, 1.2242425778390746], [1.2074227043154278, 1.614165229795417], [], [1.5766783670449218, 1.2154468297025671], [1.2175772400520688, 1.8314088303129619], [], [], [1.2080018598211049, 1.6109054992689873], [1.560606805837873, 1.2198234309951395], [1.2881632170166695, 1.4164678780421147], [1.3199217996691646, 1.3751299311520477], [], [], [1.3834173026914274, 1.3129917368261643], [1.3140787716417766, 1.382093086733742], [], [1.215275817168236, 1.5773522663149508], [], [], [], [], [1.251566963815285, 1.4788488931563801], [], [1.24200289314543, 1.4994042619773698], [1.52813227371926, 1.2304667374263154], [1.628660653998158, 1.2051154703246125], [], [1.2218553533844183, 1.8462111381286002], [1.4133832726105693, 1.2903039522028887], [1.5237876549716198, 1.2320799112459488], [1.2126130755580686, 1.5884025722382678], [], [1.2372549884140192, 1.510614007243697], [1.8628435941117067, 1.227261209697383], [], [1.212013513335752, 1.8089458068632454], [], [], [1.8648112005752713, 1.2279435752317975], [1.235655470542608, 1.5145703422777435], [1.206586172690189, 1.7808875455152646], [1.821834950286797, 1.21507088673847], [], [1.7785218483883005, 1.2062041724298547], [1.7692301496131972, 1.2048160075441308], [1.3071092383481406, 1.3907479193139973], [], [1.203001822311161, 1.645293406485387], [], [1.269498783826668, 1.445699581452798], [], [1.203796205299041, 1.6385037064176342], [1.4195352566024548, 1.2860682088665463], [], [1.2867903850243265, 1.4184723564343003], [], [1.2197702893290736, 1.5607899968072758], [], [1.4841431009185846, 1.2489946795003903], [1.8636895853419724, 1.2275534742951608], [1.203327716652252, 1.642409697395009], [1.200013990463741, 1.6962596433314623], [], [1.3679005170414573, 1.3262220800814088], [1.5038902274173682, 1.2400641815453068], [1.227707510580779, 1.535866504216247], [1.2501259484848546, 1.481795193056275], [], [1.73252474602587, 1.2010589805438396], [], [1.2111415648899264, 1.5950360518000102], [1.6671377676644572, 1.2010810950806485], [1.3042695938003697, 1.3943900433410659], [], [1.504950070221637, 1.2396137220838834], [1.6556200879676468, 1.2019734711804997], [1.8516690859943503, 1.2235585152889827], [], [1.4731335880808851, 1.2544311151539569], [1.204759740596968, 1.7688264881162605], [], [1.6435993539672913, 1.2031912167371703], [1.3151551078290298, 1.3807909635209015], [], [1.6431973739176584, 1.2032370166063602], [1.2097273361129903, 1.6018536040135176], [1.5394657973475496, 1.2264719968378406], [1.2133427757859296, 1.8147377275365695], [1.4913591728954696, 1.2456113939972333], [1.2405936433822873, 1.5026530985821185], [], [1.5205154118035096, 1.2333252925217222], [1.2153377675550139, 1.5771076876226902], [], [1.5861474528847226, 1.2131349288402755], [1.3376056611438654, 1.355514378870431], [1.200909140245112, 1.730138243298618], [1.2536783329818577, 1.47461816943208], [1.5961536768166762, 1.2109029327819427], [], [], [], [1.70499326163129, 1.200024933283387], [], [1.611490211257293, 1.2078963348066574], [], [], [1.292585581990908, 1.4101491901023686], [1.4005483812148585, 1.2995893008335586], [], [1.5312569375848235, 1.2293347485879715], [1.3127871464318768, 1.383667570376303], [1.2262560687349424, 1.5401041351706417], [1.5252653929779418, 1.2315260763832772], [], [], [1.570424226956833, 1.2170816642119853], [1.4285667249780902, 1.2800905130734954], [1.2438701600309134, 1.4951938255574908], [], [1.6138700437038462, 1.2074742335385664], [1.213514376564777, 1.5845368535382727], [], [], [1.8013386022934443, 1.210377198564843], [], [1.2286019674619397, 1.866685017080858], [1.5140818549655695, 1.2358508393339953], [], [1.2750021034411914, 1.4366052621623047], [1.2997324166107007, 1.400357109732785], [], [1.6032958226416567, 1.2094408271355572], [], [1.8634755325729575, 1.2274793652654015], [1.6889136182666782, 1.2001229229699935], [1.563214780923694, 1.2190740141744814], [1.2231575782637603, 1.5495961940883207], [], [], [], [1.6710790949507575, 1.2008371195179546], [], [1.217525236450789, 1.8312177676160237], [1.2050375462941774, 1.7707966766275889], [], [], [1.3788321034393616, 1.316788332355583], [], [], [1.2104542564617289, 1.5982897990191676], [], [], [1.494259337225568, 1.2442909045442065], [], [1.7654871550501858, 1.2043071187484806], [], [1.2035525984876216, 1.7594977103055855], [1.3005388904561606, 1.3992828206403818], [1.299735615182239, 1.400352837079242], [], [], [], [1.2194136795221162, 1.8379738691547385], [1.2117935920141019, 1.5920439756127207], [1.3835188560162845, 1.3129086858340027], [1.3179081887417008, 1.3775006236140102], [], [1.595501681453161, 1.21104182037634], [1.2112227674106681, 1.5946585698677191], [], [], [], [1.2436975805557435, 1.495578616555611], [1.3300582051069854, 1.3636325396365832], [1.223287011769227, 1.8508135499618212], [1.4975824511000584, 1.2428051444981694], [1.200278576702476, 1.7166882922282913], [1.5696672613364477, 1.2172854081007514], [], [], [1.4387739700073146, 1.2736656696273914], [1.3304531992666693, 1.3631986311373425], [1.8024170849206762, 1.2106016543587923], [1.3735640599475754, 1.3212658227171863], [1.6470396446150843, 1.2028127105833222], [1.2694453464695419, 1.4457900664347139], [1.2007170578587765, 1.7267683336575814], [1.344802907458262, 1.348097988852158], [], [1.4499515345782088, 1.2670152832486954], [], [1.3930673671560867, 1.3052945922646821], [1.7452030658027267, 1.2020475094529255], [], [1.365335358091908, 1.3285170563046957], [1.2906393172471775, 1.412904490776775], [], [], [], [1.2813278858734751, 1.4266620025447867], [], [1.5827309593814496, 1.213946533689549], [], [], [1.22297131744378, 1.5501879977482544], [], [], [], [1.5528568267176897, 1.2221413529542318], [], [], [1.6141809837532628, 1.2074199593462578], [1.780622856974204, 1.2065428540052165], [1.8580048211478648, 1.2256220109511495], [1.2007985934533647, 1.7282481097042084], [1.8242105423231982, 1.2156739309351838], [], [1.2129569015246888, 1.8130885503822929], [], [1.2615372708182149, 1.459686797868988], [], [1.2187246793376842, 1.8355509709348667], [], [], [1.8601647465683016, 1.2263469054711964], [], [], [1.5911627217901416, 1.2119892963552235], [1.2046169072103958, 1.7677907912493012], [1.5580607230069334, 1.2205698782442997], [1.4237775856002515, 1.283225267340769], [1.4612123466894187, 1.2607045907064067], [1.730543838424202, 1.2009337980444716], [1.2954405823887647, 1.406177472575607], [1.2851733371603462, 1.4208605370118437], [], [], [1.793715583655228, 1.208861130249132], [1.5119480213533194, 1.2367112635439228], [], [1.2331469705394396, 1.5209797528671771], [], [], [], [1.6047145556290434, 1.2091632816393731], [1.5778155325910181, 1.2151588343343942], [1.8392085977076365, 1.2197698819063163], [1.2945358455279394, 1.4074272407788841], [1.2940022337818833, 1.408168175440204], [], [], [], [1.2160672084713786, 1.5742659422299758], [1.7992436793023012, 1.2099482760783897], [1.2062981811471056, 1.620889229169829], [], [1.633630243933763, 1.2044245209055353], [1.2995061969073765, 1.4006595355044578], [1.6868926385504215, 1.200171832450561], [1.2352891019451377, 1.5154904305217654], [1.2024478575865876, 1.7494152363125324], [1.4422218255081973, 1.2715721615538111], [1.7187159118646398, 1.2003504081427914], [1.7726403861951052, 1.2053047662515577], [1.550757289368234, 1.2227929031088463], [], [], [1.7012707630523203, 1.2000016148413428], [1.5222867867797094, 1.2326478695384822], [], [1.516174505099556, 1.2350180783894853], [], [], [1.8637272244724585, 1.2275665168867207], [], [1.5965273101843862, 1.2108237511261184], [], [], [], [], [], [], [], [], [], [1.4132793795664713, 1.2903766537192827], [], [], [], [], [], [], [1.2826719419284158, 1.4246142851449979], [1.6997541012413695, 1.2000000604662031], [1.8652543552759597, 1.228098529285692], [1.2617355711157883, 1.4593253433059565], [], [1.2001066531488027, 1.6896732495959008], [1.4888830322059587, 1.2467565489613228], [1.857836858785335, 1.2255660994313557], [], [1.3074689808735673, 1.390291428882628], [1.2003063389496185, 1.6825001398272283], [], [], [], [1.3233053372238779, 1.3712126355286998], [1.2000039139951957, 1.6980216219076527], [], [], [], [1.2772206648234716, 1.4330587447626488], [], [], [], [], [], [], [1.2220730154853543, 1.553078941357144], [1.8536451213066616, 1.224192080037899], [], [1.8339593361017312, 1.2182792341291653], [], [], [1.581188893332985, 1.214321175124384], [1.593934260866127, 1.2113794325020844], [], [], [], [], [1.2338302480066936, 1.5192079583430198], [1.4399487688938915, 1.2729480626431986], [], [], [1.262976227539188, 1.4570798026015117], [1.4505448547939503, 1.2666731827705229], [1.3330699293247752, 1.3603497044984731], [1.7555353133464977, 1.2030937422697252], [], [], [1.2018858750446757, 1.7433856948773616], [], [], [], [], [1.2385012903800428, 1.5075969308479866], [], [], [1.5620994639300243, 1.2193926320252535], [1.201569967254295, 1.7395916968203615], [], [1.671484632297021, 1.2008137884468724], [1.2134584706579155, 1.8152273414839795], [1.2337732278117377, 1.5193550529493995], [], [], [1.2376491373438547, 1.5096537896328948], [1.608008353189615, 1.2085353146795659], [], [1.2253746876094969, 1.8572603345990883], [1.5143333667921661, 1.235750173599098], [], [1.2203173319922502, 1.841083443440281], [1.2235448569200458, 1.8516261739696032], [1.8545041634909856, 1.2244703337709089], [], [1.4267512079630151, 1.281269659983506], [], [], [1.2007640123117544, 1.6723697883297661], [1.3918089618042575, 1.306276386311628], [], [1.4398935272785671, 1.272981706658351], [1.223691923374106, 1.8520875278941091], [1.3779248347434039, 1.3175505419994213], [], [1.711027098455971, 1.2001216116897608], [1.5077941825896446, 1.2384191037817778], [], [1.274183183147883, 1.4379312332880345], [], [], [1.6663450859027615, 1.2011339390606859], [], [1.2001086258578126, 1.6895781931395917], [], [], [1.2862567898335568, 1.4192571353690953], [1.5554971999209606, 1.2213362967914558], [1.2226256541768006, 1.5512931274289168], [], [1.2009118660863847, 1.6698166505068568], [1.4401725684079894, 1.2728118613628192], [1.8012674593308227, 1.21036247929649], [1.5987471950190364, 1.2103594486937514], [], [], [1.2016760759695944, 1.740905583224525], [], [1.2220525696776725, 1.553145467048906], [], [1.2011357443597517, 1.6663183366725902], [], [], [1.2662307671514323, 1.4513149529345095], [1.2972001530419064, 1.4037698811894097], [], [1.3832518263368527, 1.3131271598043348], [1.8110653802779932, 1.2124915577103255], [1.6757013916477297, 1.2005907713786788], [1.3381620663006173, 1.3549299929924927], [], [1.7965617071609445, 1.2094127634047498], [], [], [1.2000269223622066, 1.7051886064981876], [1.210505761661537, 1.8019577884884128], [1.5827067903346486, 1.2139523655376976], [], [1.2380301829836506, 1.5087308488912003], [], [1.6381109345294562, 1.2038450407632886], [1.2255124625814577, 1.8576755429180045], [1.2089989955514044, 1.794435235111002], [1.2385989800080144, 1.507362779426313], [1.2286884596419805, 1.866929421988309], [1.6657841505350377, 1.2011720981687262], [], [], [], [1.2133748013808296, 1.585126521473174], [1.2004741505030723, 1.6782301657247292], [], [], [], [], [1.2008915190682412, 1.670154996029618], [], [1.2039773526677342, 1.7629407128454286], [], [1.8611089298357224, 1.2266672283401578], [1.6065468542179473, 1.208811126405088], [1.2502752782323476, 1.4814875870093243], [1.6716308785792882, 1.2008054558092436], [], [], [], [1.3552296133407398, 1.3378765673381185], [], [1.2009958657062878, 1.6684583773755537], [1.5827307998530125, 1.2139465721786484], [1.21028995885031, 1.8009161810472873], [], [1.6909493552654498, 1.2000819208811417], [1.8171823733714505, 1.2139256318514275], [1.300504777850091, 1.3993281398610855], [], [], [], [1.2212894756879062, 1.8443476148498488], [1.736534714380925, 1.201336571779016], [1.2054490090473426, 1.6263839871512684], [1.2015258309023915, 1.6609679267467259], [], [], [], [], [1.6887384438878363, 1.200126838734132], [1.712874968258248, 1.2001657922947357], [], [1.3698628687203476, 1.3244877171776648], [], [], [1.4626783971023611, 1.2599108535783967], [1.8070137448812416, 1.2115861811880293], [1.2484597333191734, 1.4852643775108376], [1.3540798786504908, 1.338974696668584], [1.6174924796986125, 1.2068544747301095], [], [1.2051402520780836, 1.7715110473049964], [], [], [1.7359278164891225, 1.2012924784983448], [1.240532019852092, 1.5027966145858502], [1.2178467157026507, 1.8323941480628188], [], [], [1.3915365600654424, 1.306489763508318], [1.305196871540508, 1.3931930741352179], [], [], [], [], [1.3944931394975772, 1.3041899973649564], [1.2204263502519712, 1.5585464229248513], [1.2745496345513627, 1.4373367430727682], [], [1.4149749555271, 1.2891950292131051], [], [], [1.846979723264002, 1.2220910537045393], [1.7279420757329391, 1.200781370135554], [1.7224903997643757, 1.2005060741926499], [1.849281606040195, 1.222805069077573], [], [], [1.5635088885696398, 1.2189904611127707], [1.8341928350081598, 1.2183442276558156], [1.2097469014273217, 1.6017559195682112], [], [1.329105106600341, 1.3646837641120615], [], [1.7714083558228362, 1.2051254232447586], [], [1.6232986701093426, 1.2059181181291865], [1.2148312526379692, 1.820877154926636], [1.701437436822965, 1.2000020662288893], [1.2622103304246628, 1.4584628285064238], [1.2163471360102247, 1.5731934262173768], [1.2280715742585098, 1.8651773621812586], [], [], [1.2000133525832206, 1.7036540942693374], [1.7748651478080701, 1.2056365611782403], [], [1.229621036052726, 1.8695394652459687], [], [1.5939407881395833, 1.2113780156608307], [], [1.2137060024934323, 1.583732429331811], [], [1.8375584000580323, 1.2192945948156249], [], [1.4822642105212727, 1.2498987602993352], [], [1.2867831025012693, 1.418483045587795], [1.223246837839866, 1.850686503610353], [], [1.6176457750766837, 1.206828851576575], [], [], [], [], [], [1.7110566515595225, 1.2001222644923146], [1.2159774876269085, 1.5746117728172198], [], [], [], [1.209010897855195, 1.6055029017639255], [], [], [], [], [], [], [1.2002268088238255, 1.7150584654458156], [], [], [], [], [], [], [1.3724844010130064, 1.3221990836165285], [1.7671140773133553, 1.2045247729438162], [1.4041105741905637, 1.2969498198807472], [1.8269704897226267, 1.2163901420156984], [1.2728106903746432, 1.4401744936658236], [1.2003424492260713, 1.7185022148565736], [1.5322278479276243, 1.2289877867942236], [], [], [1.6049659431006997, 1.209114546936599], [], [1.4399055129786955, 1.272974406128714], [1.6628466892347196, 1.201382279196599], [], [1.494337735295069, 1.244255517996719], [], [], [1.4377718827648163, 1.2742812964746664], [1.2558031173011452, 1.4704588720934308], [1.2328604675441412, 1.5217286977191173], [1.5208425354855684, 1.2331996112804102], [1.2510267315387256, 1.4799477239217906], [1.2069513742843032, 1.783084611570752], [1.7756982909934096, 1.2057634485990771], [1.2145743639704516, 1.5801586386704973], [1.2001908839967013, 1.6861852412253744], [1.2417855844484598, 1.4999011509759228], [1.4747786511798102, 1.2535973297171998], [], [], [], [1.2642783333908967, 1.4547519026630673], [1.7881180606280431, 1.2078260395031524], [1.613228419843617, 1.2075868676840913], [1.3309602762053263, 1.3626430936507288], [], [1.7837435856635093, 1.2070628723049779], [1.3934754166855357, 1.3049776211100261], [], [], [1.3899044187169736, 1.3077746432613746], [1.201385346211514, 1.7371944488786744], [1.2009039296275845, 1.6699481691271094], [], [], [], [1.2046251346787553, 1.632149113432772], [], [1.2395254774342557, 1.5051584898748476], [1.7548155138715809, 1.2030138236942656], [], [], [1.5275163146591493, 1.2306926611577031], [], [1.538597770237844, 1.226767160662107], [], [1.67511763130524, 1.2006195160720254], [], [1.7882038901298278, 1.2078414140076745], [], [], [], [], [1.2643832746146244, 1.4545655513899438], [1.6558036696294924, 1.2019571460388363], [], [], [], [1.4925632975298218, 1.2450604276738517], [1.2679306306322493, 1.448373173023713], [1.2027855340848026, 1.6472953997770103], [1.691848771166498, 1.2000664469466928], [], [1.2953407286194376, 1.4063150087495917], [1.398356198041463, 1.3012381453298236], [1.387688217008101, 1.3095370053328728], [1.605454570519809, 1.2090202022848535], [], [], [], [], [], [], [1.2050626518363439, 1.7709719761083764], [], [], [], [], [1.220278796020334, 1.8409523552563052], [1.4131602916826067, 1.2904600364648247], [], [], [1.2705923112660291, 1.4438573896124482], [1.4826578650185858, 1.249708542872818], [1.2575530522350933, 1.4671036745383945], [], [1.5765619993153375, 1.215476460853579], [1.2239785802902232, 1.5470176220034197], [], [1.2169891231774366, 1.8292303867946638], [1.7363954089692433, 1.2013263850914493], [], [1.5442237255018993, 1.2248855376822418], [], [1.2144260318962228, 1.5807610738896396], [1.3858210050408055, 1.3110378435805992], [1.807548979641959, 1.211703761044616], [], [1.3153679575935664, 1.3805345214984013], [], [1.7348006880656202, 1.201212558187198], [1.5043136555213723, 1.239883868371699], [1.216097108645556, 1.5741509168137915], [], [1.7059326656354286, 1.2000351977604242], [], [], [1.2474919672254499, 1.4873113066603993], [1.561779324923688, 1.2194846048444976], [], [1.8488659435111185, 1.2226752354397015], [], [1.2235340386192028, 1.8515921754097906], [], [1.3170651816810213, 1.378502060785748], [1.5276727357641775, 1.2306352015745141], [], [], [], [], [], [], [1.801043115308888, 1.2103161337672286], [1.7726446985726214, 1.2053053994945033], [], [], [], [1.2285300333031646, 1.5335185580826352], [1.2004876132479154, 1.6779234178090023], [1.2248633644132716, 1.8557086302146557], [1.201684007904611, 1.658997902224542], [], [1.2241182515569586, 1.5465836987188328], [1.550177571742609, 1.2229745918810413], [], [1.2158125286848867, 1.575250280074558], [1.3100010004771958, 1.38710899602064], [1.2791870092291542, 1.4299695817162519], [], [1.206482589811984, 1.6197468639783246], [1.2013689920418804, 1.6630254424952817], [], [1.8285492554734657, 1.2168073997698043], [], [], [], [], [1.2411970220802484, 1.5012543649486414], [1.580768113906731, 1.2144243031836934], [1.7889015910477497, 1.2079669654289678], [1.2232164778856747, 1.5494095851647303], [], [1.2051659553132452, 1.6283113103833893], [1.328036902555001, 1.365869106278509], [1.8397835976815125, 1.219936935581154], [1.5296623634263828, 1.229909487899921], [1.5443159034901075, 1.224855325091506], [], [], [], [], [1.3035718691799836, 1.3952956562591403], [1.3485777291467616, 1.344328258715493], [], [1.363934366339977, 1.3297839956556616], [], [1.2033901787720254, 1.6418735390728179], [1.746422121336787, 1.2021596775565557], [], [], [1.4768951863438997, 1.2525357644196835], [1.762540615525574, 1.2039267479396996], [1.3333943358637337, 1.3599995779073102], [], [1.8384990864740731, 1.2195647774716687], [], [], [1.8230425395348844, 1.2153758843548885], [1.2241716639114606, 1.8535818823143275], [], [], [], [], [], [1.481835151542418, 1.2501065693995073], [1.209882012812761, 1.7989159169978697], [1.2950586565059967, 1.4067040601554945], [], [1.3082185936620851, 1.3893437113981342], [1.804535063726932, 1.211049674862971], [1.5868922555192548, 1.2129613586803625], [1.3383468078373384, 1.35473637811296], [], [1.2072819993081367, 1.7850233602853531], [], [1.2165330719618497, 1.5724863556580941], [1.2283312444603633, 1.8659174042940958], [], [1.6010831885388899, 1.209882193334738], [1.507062726213984, 1.2387243683175753], [], [1.7257154715015108, 1.20066172335234], [1.253121585366519, 1.4757240928350381], [1.5540968493871594, 1.2217612827873021], [], [1.7344575253566026, 1.2011887341425624], [1.2101019277931282, 1.6000006057618814], [], [1.234685347836661, 1.517018376654619], [1.2224629668050753, 1.848183608835085], [1.8064603658539313, 1.2114652617241564], [], [], [1.4668719789700244, 1.2576750902213991], [1.7960566511579494, 1.2093136238203468], [], [1.384173657459049, 1.3123742509104872], [1.3083582876710989, 1.3891676188617308], [1.5597953564880374, 1.2200597350318652], [], [1.2928533655354926, 1.4097731610546247], [1.381249846671449, 1.3147749492140663], [1.4134214355311097, 1.2902772566881964], [], [], [], [1.238757580482015, 1.5069833415552036], [], [1.860979603944481, 1.2266232292202353], [], [], [], [1.4141019528316452, 1.2898021128463468], [], [1.7159353809759963, 1.200254000883299], [1.3517531604456612, 1.3412185362363118], [], [], [1.3653658374053677, 1.3284896001124742], [], [1.6409576886916835, 1.2034982321528231], [], [1.210138635215018, 1.800179056149451], [], [], [], [1.3997062563035518, 1.3002204763913339], [], [1.2400903661777594, 1.5038288280162129], [1.2020228118960632, 1.6550698305356377], [], [], [], [], [], [1.2132312061276547, 1.8142634732189693], [], [], [], [], [1.2215618654753466, 1.5547521035175735], [1.221881124084188, 1.5537046121950513], [1.2087496811554277, 1.7931296098730471], [1.6752080625973924, 1.2006150184078166], [], [], [], [1.832241970534672, 1.217804955200588], [1.4478849206029487, 1.268215346798177], [], [1.2032286573403033, 1.6432705269539534], [1.2199945997788038, 1.8399814836272612], [], [1.4904909818676497, 1.246011044934771], [1.2256090086620466, 1.5420342209926665], [], [], [], [1.6092017134461734, 1.2083134421616866], [1.7713505687689455, 1.2051170882558704], [1.2249657082032483, 1.5439794192513094], [1.3743550205505455, 1.320585520361486], [1.2001901283138365, 1.6862126084751021], [1.2026294995541211, 1.648788816785626], [], [], [1.2086101681133137, 1.6076093450701088], [1.5179185586257578, 1.234332362400952], [], [], [1.3284376752869145, 1.3654234932727527], [], [], [1.669834884920147, 1.200910763658222], [1.3898551713052978, 1.3078135835677964], [], [1.2861903126647682, 1.4193551306944703], [1.5556596768121687, 1.2212872770627121], [1.2261772536643272, 1.5403378408798103], [], [], [1.2000177350791859, 1.6957887336046173], [], [1.2143178567499247, 1.8187975409173658], [], [], [1.2068999327277168, 1.6172212366843417], [1.200358145872635, 1.7189213531273262], [1.3983333707919756, 1.3012554140527193], [1.4848825633143703, 1.2486415078523456], [1.3453945685794377, 1.3475017900654858], [1.2078174429455983, 1.7880700319711007], [1.3546978820481308, 1.3383835632359151], [1.3009261755726016, 1.3987690542841091], [1.6197630798038838, 1.2064799531554549], [1.3978863661507317, 1.301593985684967], [1.249749879066461, 1.4825722451034977], [], [1.577203607182211, 1.2153134560244743], [], [1.3089110077118988, 1.3884724729480915], [], [], [1.4950536864305384, 1.2439331095614503], [1.2028356520042058, 1.6468247136169734], [1.3205288020071262, 1.3744211157125616], [1.2352137398043377, 1.5156803528287606], [], [], [], [1.4803726884791213, 1.2508186958096865], [], [1.2787130485874671, 1.4307096277815816], [], [], [1.491313900219947, 1.245632184504019], [1.8414847833949743, 1.220435555876296], [1.424729891244264, 1.2825956789567154], [1.2389191199229512, 1.5065977714001872], [], [1.6808401679917142, 1.2003672340234135], [1.4751360489493741, 1.253417192988913], [], [1.2106882021035232, 1.597170216185594], [1.4951794895818538, 1.2438765972765156], [], [1.211261705003264, 1.594478063874456], [1.209988212590392, 1.7994406767859163], [], [1.202468963234204, 1.7496272853856851], [1.729993761550716, 1.200900436517884], [], [1.2002603851632028, 1.6838656465028945], [1.8162518315669143, 1.2137022397158939], [1.2044312472006695, 1.6335800387766137], [1.2020954481268042, 1.7457280791631593], [1.4712504898961472, 1.255394937470065], [1.4741924002254843, 1.2538935912990352], [1.376675671721705, 1.3186060058897238], [1.2048745025749865, 1.6303527330067218], [], [], [], [], [1.720937600024093, 1.2004385754431883], [1.2935386141998364, 1.408814248539853], [], [], [1.2692750337712302, 1.4460787455386508], [1.2169419768911007, 1.8290540441447776], [], [1.7219945027303938, 1.2004839923989996], [1.7635807808443695, 1.204058991101542], [], [], [], [1.2717952775833983, 1.4418513689749235], [], [], [1.2149298971972047, 1.8212724015053945], [], [1.2024510869812897, 1.6505522583538963], [1.2286235479690482, 1.866746035847068], [1.4310898927614197, 1.2784702214256563], [], [1.3027936594567793, 1.3963108117955745], [], [], [], [1.2218572493883975, 1.5537826616383303], [], [1.741759519119947, 1.2017469091286328], [1.3548097486777582, 1.3382767765375196], [1.5288129504803185, 1.2302181420310634], [1.4334213249615468, 1.2769919504137743], [], [1.5080655440194999, 1.2383062003800902], [1.2093162457180457, 1.7960700436336254], [], [1.7486983320990794, 1.2023771785269814], [], [1.6290626539677995, 1.2050576872625378], [1.2061732415677753, 1.6216729123717648], [], [1.3198517936360301, 1.3752118518199032], [], [1.243833945407253, 1.4952744992989713], [1.3199830873738871, 1.3750582419600132], [], [1.2026141018500929, 1.7510614171523884], [], [1.2514580968659959, 1.4790697822095726], [1.4446527622628926, 1.270118867383053], [], [1.459981414450739, 1.2613759256596464], [1.8311015105040702, 1.2174936332611235], [1.2083002291764695, 1.6092732929502693], [], [1.223170147681023, 1.549556349627302], [], [], [1.3783176806918522, 1.3172200561098701], [], [], [1.2137595806642185, 1.5835085642454194], [], [1.206421225720527, 1.7798748620078488], [1.7165168230385066, 1.2002728799067288], [1.200162002701127, 1.6872730028580258], [1.438072096000773, 1.274096521373009], [1.2359776880744224, 1.5137654864552705], [], [], [1.2492638171732005, 1.4835816701600208], [], [1.7893893937215863, 1.2080553524124007], [1.2000000113135432, 1.6998936348602172], [], [], [], [], [1.3663868070641745, 1.3275725070578654], [1.3838021310358508, 1.312677256461061], [], [1.2105788994880875, 1.5976917091643674], [], [1.206634292068847, 1.6188194713148991], [1.6098846778401252, 1.2081878115458888], [1.2016878743022303, 1.6589509393217048], [], [1.2185284230213884, 1.5651477825108948], [], [1.4657483897526526, 1.2582691055670603], [1.3616666069441243, 1.3318553067837344], [1.6697037127430518, 1.2009187090478701], [1.203766353887564, 1.7612549464611449], [1.7198974391885384, 1.200396064953709], [1.2685254522813487, 1.4473545672865125], [1.3121780074490696, 1.3844146674925684], [1.2094311771453647, 1.6033447878124645], [], [1.767349250643449, 1.2045566849398754], [1.2265027032645583, 1.8606247489779488], [1.2322965497007363, 1.523213454759237], [], [], [1.2077083004494593, 1.7874578901737295], [], [], [1.2000632869242884, 1.7079550561942582], [], [], [1.2682845315841877, 1.4477664686634313], [1.7860742355269805, 1.2074644926724105], [], [], [1.8128525915709266, 1.2129021735054388], [1.2614680725757368, 1.4598130964653548], [], [1.5857274145080236, 1.2132333452207527], [], [], [1.2322744610945338, 1.5232719030386193], [1.8678245854397773, 1.2290064665815814], [], [], [1.2134538543538411, 1.8152078476357696], [], [], [], [], [1.2499487037591628, 1.4821609980927604], [], [1.26675035660929, 1.4504108445828974], [], [], [], [], [], [], [], [], [], [1.2380593591659028, 1.508660395250268], [], [1.2653136794321624, 1.4529214644871087], [], [1.2168182145120094, 1.5714101008141097], [], [1.226487219203201, 1.5394209029104888], [], [1.203709623042665, 1.7607935994948996], [1.3734529484776345, 1.3213616195602331], [1.3287862740143925, 1.3650367637487921], [1.200025160489974, 1.694984039780477], [1.7869629544748507, 1.2076206294441194], [], [1.20067055000496, 1.7258862969088073], [1.201467711602212, 1.6617174004949398], [], [1.225870512737356, 1.8587489505731054], [1.274280340484362, 1.4377734347898956], [1.448105046376209, 1.2680868926058526], [1.4807306521725552, 1.2506438460382154], [1.8119609175772176, 1.2126964468267571], [], [1.2098620787670522, 1.7988170945203552], [], [], [], [1.32041743830107, 1.3745509581300352], [1.6991261711743122, 1.2000007635773997], [1.533364289502625, 1.2285845356937948], [1.2337199221911281, 1.5194926897919294], [], [1.2003233654819792, 1.6820205418117173], [1.4835875368974036, 1.249261000340699], [1.4759211080041057, 1.253022763262051], [1.2041098657988325, 1.7639763612746775], [], [1.2001109738717581, 1.7105338291498373], [1.308789720415982, 1.3886247968321908], [1.5892480415112928, 1.2124202591463467], [1.4514944768179836, 1.266127893327962], [], [1.8558524330936668, 1.2249105146408898], [], [1.216781886545093, 1.8284533177036724], [1.6229610784286241, 1.2059706440269773], [], [], [], [], [], [], [], [], [1.5615389563389392, 1.219553812182582], [1.6913886282208814, 1.2000741612238053], [], [1.695851485084096, 1.2000172104722078], [], [1.2060434240856321, 1.7775042006019899], [1.6067142330877235, 1.2087793106030769], [], [1.2335123455306465, 1.5200298129475853], [1.4232530598594613, 1.2835733784652463], [], [], [1.549258106741706, 1.2232643482841827], [1.2176876113657642, 1.5681866479830746], [], [1.2316714734392329, 1.5248760689984922], [1.3911188997211685, 1.306817515788739], [1.255994360737191, 1.4700891644510323], [1.386868737594897, 1.3101938783130944], [], [], [], [1.408089375497017, 1.2940588869031884], [], [1.2803908008805187, 1.4281027399654282], [1.20191103468242, 1.656326408106699], [1.2037375699095962, 1.7610213116932687], [1.7030560405008057, 1.2000093394707683], [], [], [1.20014027007307, 1.6881572639404292], [1.253463912116313, 1.475043288125177], [1.7815907204686763, 1.2067019619607207], [1.2536658771995977, 1.4746428372028186], [1.201044558422081, 1.732302744771676], [], [1.2361014439521076, 1.5134574319446616], [1.2595283568575415, 1.4633890712849833], [1.686907695693028, 1.2001714378229935], [1.2326228307210632, 1.5223526481007723], [1.4755671573390172, 1.2532003814514714], [], [], [], [1.2704442636949058, 1.4441057456538182], [], [], [1.2690992915216124, 1.4463770920582613], [], [], [], [], [1.3625435698082518, 1.3310512803623764], [1.2026215504509854, 1.6488660785366664], [1.2205533688974701, 1.558116498758895], [1.2513069134316375, 1.479376986545474], [1.200050762714262, 1.6928753851045175], [1.589889341813344, 1.2122750334935668], [1.3536252412026955, 1.3394108619659917], [1.2000044718794287, 1.7021146771458056], [], [], [], [], [1.215406975157045, 1.5768350688160166], [1.2000094699029198, 1.703077306166257], [], [], [1.224671000970385, 1.544879586509369], [], [], [], [1.310374633873575, 1.3866438542634767], [], [], [], [1.5043730082770774, 1.2398586302999481], [], [], [1.2522362385268933, 1.4774969350515488], [1.2247589824492766, 1.8553897526780738], [], [1.4526261635992521, 1.2654816631436874], [], [1.2115880856156434, 1.5929775636260892], [], [], [], [], [1.2000199567404977, 1.6955327477991384], [], [1.4841980719408325, 1.2489683737852233], [], [1.2231615521491144, 1.85041640419568], [1.250670209955684, 1.4806766319364697], [], [1.2002740197881394, 1.7165512749144927], [1.5451568136564542, 1.2245806191971367], [], [1.200042106314983, 1.7064888012792323], [1.3399342994549603, 1.3530811459562773], [], [1.224964294417812, 1.8560162761446153], [1.206781681373808, 1.6179287494212984], [1.221448735741411, 1.844874730289675], [], [1.4652961104244708, 1.258509247867956], [1.20089226404044, 1.7298574597935281], [], [], [], [1.644562197689837, 1.203082853913231], [1.6415224799080212, 1.2034313948265636], [1.2077451790403182, 1.6123347774659098], [1.4139595278051098, 1.289901416405123], [1.4960878986757857, 1.2434697655866116], [], [], [], [1.5459016697574515, 1.2243386660485651], [1.5213127943174087, 1.2330193981273447], [1.2292618033334273, 1.5314605381547004], [], [], [], [], [], [], [1.5107002599528538, 1.237219697461006], [1.2551334981649573, 1.4717593472997152], [1.3304669283964234, 1.3631835678129316], [], [], [], [1.5891526491401669, 1.212441936988673], [], [1.3878147803340737, 1.309435807296499], [1.4527998131933324, 1.265382849345831], [], [1.741186775499712, 1.201699237885455], [1.2444349972409134, 1.4939404739860023], [], [1.2427036361622972, 1.497811880614079], [], [1.8264316660635798, 1.2162489960564553], [1.2563671688951712, 1.469370619465094], [1.203040092878088, 1.6449468373898415], [1.2557006204223007, 1.470657327767222], [], [1.2161206487771, 1.574060437272058], [1.2040233487392702, 1.6366978562433125], [], [], [1.6684982359309963, 1.2009933478794688], [], [], [], [1.6572856222971737, 1.2018278591315443], [1.2155658424820648, 1.576211684598713], [1.369767735381517, 1.3245713764176363], [1.2060030294828876, 1.6227536853959017], [], [], [1.3433549855801092, 1.3495655072778423], [], [1.2679471520488494, 1.4483448061785729], [], [1.2154482026380182, 1.8233270273430486], [], [], [], [], [], [], [1.7898299051188897, 1.2081355998383994], [1.2000120891095518, 1.7034769186653405], [1.6130975157872542, 1.2076099531492808], [], [], [], [1.208951897212735, 1.6058099753210153], [1.2631664304125998, 1.456737934561243], [], [], [1.4953361734835553, 1.2438062712885603], [1.2088430454128312, 1.7936207560354958], [1.771709922552602, 1.2051690318831088], [1.4016409629374702, 1.298774520994591], [], [], [], [1.3250356778206829, 1.3692406356690634], [], [], [1.4702301283460972, 1.255921396507162], [1.2121675321369068, 1.5903665958815283], [], [1.7829524368165557, 1.2069291194704403], [1.2047162686866226, 1.6314870413987388], [1.2090522241313404, 1.7947115693546276], [1.2077426405788119, 1.6123490325456737], [], [1.237836494799644, 1.5091993331748532], [1.393113204103993, 1.3052589525971707], [1.2011517501123774, 1.7339178947468141], [], [1.2188233303339255, 1.8359007452851728], [1.3371193429792991, 1.3560267034198374], [1.2005477248308696, 1.6766028884607684], [], [1.764461518055968, 1.2041726987247272], [1.3301515772302857, 1.3635298762523562], [1.53110668860055, 1.2293886429711578], [1.5573939544541313, 1.2207677851252385], [1.2014808500773566, 1.7384533114361427], [], [1.2003237091517716, 1.7179890067584787], [1.757238817255766, 1.2032870871427228], [1.8672347928481605, 1.2287967274508453], [1.359461357895908, 1.3338942321761358], [], [1.2652376456987553, 1.4530552788933544], [], [], [], [], [1.2646716618124367, 1.4540544003832259], [1.2022205756587512, 1.74707063524635], [], [], [1.647728094045263, 1.2027398589793676], [1.2166524779370094, 1.5720344854440587], [], [], [], [], [], [1.226553527514358, 1.8607744932845451], [1.5767805407751758, 1.2154208373564317], [], [], [1.214826388539251, 1.5791423699465599], [], [], [], [], [], [], [], [], [], [], [1.2000136950412768, 1.7037006558503491], [], [], [1.7825612602409653, 1.2068634688978888], [1.6612206733011279, 1.2015061045300732], [1.2291342649512391, 1.5318171841209984], [1.5239113490556724, 1.232033348401185], [], [1.4453571199338846, 1.2697012623401807], [], [1.2218399640758972, 1.8461608020129228], [], [1.2572221019765712, 1.4677334870844394], [1.2036200488072102, 1.6399421607627813], [1.7863998916225632, 1.207521514452043], [], [], [], [], [], [], [1.37963001046925, 1.3161210219247903], [], [], [1.2699118597858077, 1.4450015850106177], [], [], [], [], [], [], [], [1.2145880274297758, 1.819896692554398], [1.6581060154558127, 1.201758197198377], [1.2123614706514743, 1.589507173559515], [1.604083848746535, 1.2092861404762216], [], [], [], [1.2777517773742857, 1.43221942100028], [], [], [1.3989529969037362, 1.3007873975852489], [], [], [], [1.4073789603254045, 1.2945706878631507], [1.5102323206344836, 1.237411383767146], [], [1.4915682589382189, 1.2455154465573615], [1.2363442471174606, 1.5128547547520226], [], [1.3031069966460893, 1.3959014240600383], [1.2078485021473415, 1.7882434312647952], [], [], [], [], [1.297456075991182, 1.4034222037245827], [1.4794514052433236, 1.251270329317466], [1.3577899407323777, 1.335456072144864], [1.2695164441548894, 1.445669686928692], [1.203611369964195, 1.7599860648082264], [], [1.3711111261743834, 1.323393960917091], [], [], [1.20893237410386, 1.7940881862761138], [], [], [1.2336663138039672, 1.5196312302009576], [1.7291753019356997, 1.200851924017571], [1.2137491690235933, 1.8164479685299582], [1.5389262334526888, 1.226655261220469], [1.361963386083417, 1.331582780462407], [], [1.2003370505704765, 1.7183558428678574], [], [], [], [], [1.2085015220274586, 1.6081890739036182], [], [], [1.2818206959802279, 1.4259086471821136], [], [1.7195991298109758, 1.200384273555513], [1.4273502312660862, 1.2808793686665576], [1.2059168385016137, 1.6233069134552571], [], [1.5904635281490889, 1.2121457581055028], [1.2055848224965793, 1.774522696235851], [1.2614397101371964, 1.4598648877080789], [1.7928273780606485, 1.2086924813496283], [], [1.2416437195472603, 1.5002263276366745], [1.3798718439401108, 1.3159193265761797], [1.2133590287182086, 1.81480664209842], [1.3873270585114938, 1.3098261520028216], [1.722405590184933, 1.2005022627393944], [1.326289711747063, 1.3678244132180892], [1.620446508154843, 1.2063693263833348], [1.5470723625006388, 1.2239609914210139], [1.538578530202193, 1.2267737231637326], [], [], [1.5293501128208948, 1.2300227494806173], [], [], [], [], [1.3011163007113091, 1.3985173397328308], [], [1.2253415587133327, 1.857160313423305], [], [1.2076621177148579, 1.7871975324592475], [], [1.275632111490924, 1.4355914237352572], [1.2109427536118553, 1.5959663047121486], [1.407766909135056, 1.294290965587995], [1.492580851289858, 1.2450524241757517], [1.3445763628693794, 1.348326802032283], [1.2248647828882655, 1.5442870414506715], [1.3054059141591745, 1.3929242643590294], [], [1.2038777563717238, 1.762150779377619], [1.285967310246857, 1.4196842283855977], [], [], [1.7984071615822628, 1.209779610226867], [1.7900712193482557, 1.2081797325799613], [1.2020578709760579, 1.6546829376161278], [], [], [1.4626150049303095, 1.2599450442095181], [1.2063539427362957, 1.6205420227541643], [1.8350956291261766, 1.2185966649565019], [], [1.3071552161687519, 1.390689515508155], [1.4088607065292227, 1.2935053360776594], [1.248250858696269, 1.4857041453239428], [1.3375557679334833, 1.3555668734838169], [1.2053424199567428, 1.7728963545436165], [1.2094767016976222, 1.796885983622795], [1.2851703317848246, 1.4208650033254742], [1.4544851608221543, 1.2644285779077367], [1.3606496880132641, 1.332792475901562], [1.227419830245431, 1.8633033470408455], [1.4491450371180528, 1.2674820378325347], [1.7963025504959031, 1.209361824999334], [], [], [], [1.3734734053938493, 1.3213439779761709], [1.216427541516083, 1.8271128529922143], [], [], [1.6850818949438193, 1.2002225994089641], [], [], [], [1.8286324905051348, 1.2168295514143623], [1.5564993594033685, 1.2210349009078465], [], [1.6027696576433847, 1.2095448435124618], [1.2215680382736076, 1.554731772232756], [], [], [], [1.754351053025304, 1.2029628152391005], [], [1.7093476656418938, 1.200087386489351], [], [], [1.2762233959168434, 1.434644785557646], [1.3388454312884566, 1.3542148390997972], [1.4710378125751302, 1.255504424398151], [1.2204495565617637, 1.8415322302452373], [1.2739943584721027, 1.4382382889221481], [], [1.22066544219043, 1.8422616662685483], [], [1.600499227036508, 1.210000412061737], [1.4568009654661513, 1.2631313359809335], [1.2157596275938167, 1.8245442159713612], [1.5095885027993463, 1.2376760208102922], [1.5600776196688784, 1.219977367739319], [], [1.2424810692042159, 1.4983160195665444], [1.233029154647866, 1.5212872987414903], [], [1.6617757237773136, 1.2014632363533742], [], [1.6978044124936338, 1.2000048206277365], [1.813945133105599, 1.2131565891977716], [], [1.59076814930037, 1.2120774623029453], [], [1.2961131331545803, 1.4052536704388157], [], [], [1.2193260146607852, 1.562331848933327], [1.422912955054489, 1.2837996041287751], [1.85801514837653, 1.2256254508475994], [1.2077855484092122, 1.6121083983239584], [1.5445026906321002, 1.2247941637781121], [], [], [1.261467010895515, 1.459815034885433], [1.440785574223721, 1.2724396165809162], [], [], [1.336595450042337, 1.3565802377991791], [], [1.2145153726957667, 1.5803978401061682], [1.3639914371096087, 1.3297321973701548], [1.2093269683839603, 1.6038752058794146], [1.3843226288452775, 1.3122529209125573], [1.2417391039841408, 1.5000076221883893], [], [], [], [1.789477851012906, 1.20807143386655], [1.4857801134592679, 1.2482148295810542], [1.2873736870947086, 1.417618120450011], [], [1.7781541288372935, 1.2061458391937112], [1.5089270700314312, 1.2379489904423684], [], [1.2613475234808698, 1.460033325556164], [1.2113040052029374, 1.8057176648877067], [], [], [1.5664129557585094, 1.218175860286326], [1.3815417077520336, 1.3145336381751207], [], [1.229725155440543, 1.5301719382004886], [1.3488328255624167, 1.344076390783747], [1.2004165638736983, 1.720405645009101], [], [1.2300704227807748, 1.5292188755905376], [1.2242028925005604, 1.8536786012923292], [1.352344429166596, 1.340645573189226], [1.2297745537137545, 1.53003521051435], [], [1.370555267302338, 1.3238801147270114], [1.343491110166723, 1.3494270240451434], [], [], [], [1.8024375815195008, 1.2106059441590697], [1.2184541347759617, 1.8345866995123674], [], [], [1.330179993227093, 1.3634986439990366], [], [], [1.2041649077493637, 1.7644015628133596], [1.8646592617667799, 1.227890555575914], [1.216653364352622, 1.5720311373483342], [1.3103968556962577, 1.3866162257731944], [], [], [], [1.3114622002683074, 1.3852963645274252], [1.8069978373021216, 1.211582696034765], [1.206346259165104, 1.779410227047361], [], [1.3696646208620624, 1.324662102513222], [], [1.211291483825704, 1.8056597663196265], [1.273418168537896, 1.4391783347449119], [], [1.7206002264689426, 1.2004245495729116], [], [1.3502005484763302, 1.3427321121150968], [], [], [1.4735729657365841, 1.25420767373734], [], [], [], [], [1.4138332887472276, 1.289989496023855], [1.410970978114153, 1.2920021758541957], [], [], [1.2964329147712161, 1.404815976516439], [], [1.3995677101892057, 1.300324582643562], [1.3752106983659858, 1.3198527791182877], [], [], [], [], [1.2032749328858476, 1.7571332451418695], [], [], [1.3885658088993695, 1.3088366778269005], [], [1.6432783850524002, 1.2032277600371208], [1.2351790781150105, 1.5157677808362813], [1.275330738717039, 1.436075733360147], [1.3618100629566008, 1.3317235189662777], [1.6623525518966773, 1.2014193448886052], [1.2000476193378415, 1.7069005123172227], [], [], [], [], [], [], [1.3237736468510004, 1.3706768590028873], [], [1.2507301562249795, 1.480553862019928], [1.2847099979058143, 1.421550338192679], [1.8226146943441508, 1.2152674585599905], [1.5528307815379288, 1.22214937361424], [], [1.4118785000695144, 1.2913607932689188], [1.2276400095146804, 1.863939133182742], [1.2356570087222696, 1.5145664904844605], [1.4412382602700218, 1.2721654968893754], [1.8126654206694803, 1.2128588469597656], [1.461038052216849, 1.2607993766947927], [1.2010080356394361, 1.6682664293911664], [], [1.2009000973428696, 1.6700118828926693], [], [1.202623831453754, 1.7511561038611851], [1.7871222260863835, 1.2076487862087135], [], [], [], [], [1.2457582215454952, 1.4910397006451022], [1.2180239021520125, 1.833037743152938], [1.2138746076134328, 1.5830294785982124], [], [1.7981748554824366, 1.20973303420381], [], [], [], [], [], [1.4732044743284523, 1.254395029723224], [], [1.2142433942122808, 1.8184926999168909], [1.2028202640349526, 1.7530312185955186], [1.5203587606042692, 1.2333855712599902], [1.7933375459733079, 1.20878914658603], [1.3844909030005563, 1.3121159842032728], [], [1.2131235745415638, 1.5861960179395473], [1.2416205226132822, 1.5002795586058366], [1.4078305685204175, 1.2942451191804372], [], [1.2175209179520765, 1.831201887891116], [1.2542596018119125, 1.473470758127951], [1.2205642521582907, 1.5580797276938172], [1.4267014620409584, 1.2813021266480442], [], [1.3824255774905727, 1.3138051189259445], [], [], [1.8690639137989893, 1.2294499037817888], [1.200640895919183, 1.674692191489507], [], [1.2400928404405713, 1.503823027380943], [1.2138162251180962, 1.8167276190178754], [1.2488134419500647, 1.4845221824988648], [1.5065086379036634, 1.2389565174583808], [], [], [], [1.205244360948612, 1.6277721824581914], [], [1.35063145271733, 1.3423107239941392], [1.2082677521435705, 1.7905505185963226], [1.4891433216515264, 1.2466353992691441], [1.2249685950448745, 1.8560293700120576], [1.4379732387773387, 1.2741573337450056], [], [], [], [], [1.4038478291677636, 1.2971428395679756], [], [1.3850479657917023, 1.3116635271468113], [1.2868175662804153, 1.4184324655334692], [1.2187221630526324, 1.8355420365173218], [1.2381421197936153, 1.5084607129300496], [1.2665820182537462, 1.4507032830159932], [1.6518162735320931, 1.2023270868294458], [], [1.5977612092983282, 1.2105643763722753], [1.3859792718367094, 1.310910058876104], [1.386264370880343, 1.3106801379059976], [1.8022083230616, 1.2105580129403122], [1.2984619725259408, 1.4020617304000011], [], [1.201301590330647, 1.7360540731854017], [1.2076681706244405, 1.6127682982871763], [], [], [1.2575854794511687, 1.4670420810370515], [1.3192257036156967, 1.375946092118859], [], [], [], [], [1.4488093692083193, 1.2676768951322663], [], [1.2001946352390322, 1.7139498156316133], [1.2989321997718715, 1.4014290375469007], [], [1.5438119604632154, 1.2250207411837273], [1.4726120811727592, 1.2546970308077698], [1.7110336466620177, 1.2001217561832305], [1.2104483338792797, 1.8016816905761643], [], [], [1.2670165031340728, 1.4499494222327138], [], [1.5843338290205793, 1.2135626074293224], [1.285946231614529, 1.4197153645206526], [1.3602549231265986, 1.3331576868185913], [1.2324624463784921, 1.522775182455685], [], [1.3999116315731956, 1.300066291574543], [1.7597560234457512, 1.2035836247040688], [], [1.31748330069391, 1.3780046976243685], [1.2665426547663348, 1.4507717314127806], [], [1.2473478136079756, 1.4876182725502964], [1.2819332679059807, 1.4257369738440349], [1.4391083093869608, 1.2734609915036255], [], [1.7678934329937095, 1.2046309640719066], [1.792994982447449, 1.2087241780429259], [1.2040909607434325, 1.6361703455780292], [], [], [1.200610976217101, 1.7247103809190198], [], [1.6831540324717718, 1.2002838672025509], [1.2885853729106862, 1.415855662352809], [1.4828599462735603, 1.249611060229407], [], [], [1.2664780005596645, 1.4508842116580043], [], [], [1.803749106679529, 1.210882301625468], [1.2018655494066313, 1.74315169906322], [1.2004370289249293, 1.6790993318133571], [1.482845043050854, 1.2496182456266522], [1.2346501752588472, 1.5171078443087882], [], [1.581627059308289, 1.2142141964692703], [1.8030572835495486, 1.2107360668234497], [], [1.8559827142804115, 1.2249532729870507], [], [1.2051804544173028, 1.6282113009636392], [], [1.2118422871787429, 1.591823997979593], [], [1.8584983845838627, 1.22578669136737], [], [], [1.2052550160519961, 1.7723007666507724], [1.4716163945861667, 1.2552068696818952], [1.2009853750891881, 1.6686247848593558], [], [1.8037618001538598, 1.2108849942714592], [1.2062294732450696, 1.6213192087726709], [], [1.2480559302433658, 1.4861155503272607], [], [1.2154362393603315, 1.8232800140928853], [], [1.6463440880796514, 1.202887293346875], [1.453700470544081, 1.2648718099343679], [1.7133665842497843, 1.2001786975073057], [], [1.2080042744927613, 1.7891078340136592], [], [1.4103364250668218, 1.292452440374217], [], [1.2000595427133678, 1.6922838372209346], [], [], [1.201544252098287, 1.6607333807955915], [1.5962971321715629, 1.2108724959643369], [1.267347473398223, 1.4493771933261086], [], [], [], [1.3458555048989054, 1.347038703836255], [], [], [1.6970885836973335, 1.2000084764167371], [], [], [], [1.740354163137786, 1.201631119031847], [1.7222369915459053, 1.2004947285493501], [1.225257021635678, 1.5430952375044886], [], [], [1.389821363591702, 1.307840321404802], [], [1.4312785423348637, 1.278349933961437], [], [], [], [1.6489848670955758, 1.2026093525057553], [1.2228544294453794, 1.8494393003868312], [1.4059381732836393, 1.2956144883057292], [], [1.7448679862629857, 1.2020172053085523], [1.7168415748708958, 1.2002837191406828], [1.229448641195936, 1.530939600356414], [1.3420861314453596, 1.3508615422267956], [1.822108289682542, 1.215139643205588], [1.2823835036023223, 1.4250518922841469], [1.6292004832038147, 1.205037952544413], [], [1.554315990394135, 1.22169448116799], [1.2069552596239832, 1.783107665034858], [1.2116136969758535, 1.8071392505966257], [1.4064403940317514, 1.2952497588095016], [1.418915928224482, 1.2864885193926345], [], [], [], [], [1.7854455536995657, 1.2073550392493853], [], [1.2477032742182081, 1.4868623171584372], [1.5951219643341037, 1.2111231263039097], [], [1.8636521433815119, 1.2275405033586084], [], [], [1.3963910506058417, 1.3027323246880318], [1.5409869021064548, 1.2259590368983944], [], [], [1.509548467166899, 1.2376925118046191], [], [], [1.5048080364188947, 1.2396739227967282], [], [], [], [1.6414876416622588, 1.2034354987297664], [], [], [1.218735017566552, 1.835587671575748], [], [1.2015503054966767, 1.6606566136492584], [1.2151971843653364, 1.5776634561845788], [1.8010706403697412, 1.2103218141929841], [1.7005667572389336, 1.200000321213871], [], [1.2002498767905347, 1.7158055165092538], [], [1.212085966538595, 1.8092698309297812], [1.4282793868467825, 1.280276390481022], [1.2014168861831958, 1.6623851277186859], [], [1.2020974023182953, 1.7457493521463479], [], [1.5421240772355271, 1.225579097202425], [], [], [], [], [1.8345781180513507, 1.2184517364357372], [1.4335858734397817, 1.2768882970548368], [1.580179577239329, 1.2145691951581008], [1.285077196377125, 1.4210034641187579], [1.6245567427668302, 1.2057244544405927], [], [1.285629270458543, 1.4201841703918794], [], [1.467838487712939, 1.2571670380238338], [1.5338861957683665, 1.2284003773923322], [1.2001566638200099, 1.6874844386279584], [1.3769870099323527, 1.3183422891548529], [], [1.2144566046669025, 1.8193633580643884], [], [], [], [1.5361778200384872, 1.2275994354865167], [1.804206911197279, 1.2109796326749545], [1.265852851028238, 1.451975297521213], [], [], [], [], [], [], [], [], [1.2209331167386042, 1.556839525838267], [1.681858234364503, 1.2003292320541188], [], [], [], [], [1.3292879016818482, 1.364481684314324], [1.2072711485363485, 1.6150395448734467], [], [1.7571111391478182, 1.2032723907560214], [], [], [], [1.689555668113576, 1.2001090959704845], [], [], [1.2667540374026887, 1.4504044553820539], [1.7684746303852528, 1.2047109682280426], [1.4579611205333252, 1.2624875078051867], [1.2035743114933353, 1.6403213958718532], [], [], [], [], [1.5205933971213348, 1.233295306597912], [1.602731827892241, 1.2095523445923966], [1.3353117075562333, 1.3579437921123931], [1.2781751203498821, 1.43155303892917], [1.8103639420207986, 1.2123322849504699], [1.4319644980872344, 1.2779135518470512], [], [1.6529786759670673, 1.2022159151939569], [1.2003892138211065, 1.680275336917758], [], [1.2964144958546442, 1.4048411599769728], [1.2078770764239888, 1.6115973524661202], [1.8088237619776226, 1.2119862821302687], [], [], [], [1.261857835448068, 1.4591028359615916], [1.3080662349992043, 1.3895359540102896], [], [1.7839629803458321, 1.207100194835253], [1.4248109998418292, 1.282542200705333], [1.4237272337980285, 1.2832586429749133], [], [], [1.6946571166204656, 1.2000285472177508], [1.2208312274506226, 1.8428190723031173], [], [], [], [1.2466622779210044, 1.4890855392813775], [], [], [], [], [], [], [1.2400386300003046, 1.5039501642234723], [], [1.7672695370470064, 1.2045458554159816], [1.2277087145522794, 1.5358630398412965], [1.215311011619808, 1.8227867441664045], [], [1.4504029438639134, 1.2667549082006822], [1.2061701190180407, 1.621692601567004], [], [1.7858748636297266, 1.2074296925345824], [1.5018654253634502, 1.2409328041194911], [1.2115879131154803, 1.5929783508578357], [], [], [], [], [1.3140417724780054, 1.3821380069777447], [], [], [], [], [1.2133338962190474, 1.8147000585469208], [], [1.7804129813870482, 1.2065086095741424], [], [1.24000025317394, 1.5040402262708983], [], [1.7299798559221795, 1.2008996010431514], [1.2864950277901714, 1.4189063537577753], [], [], [1.4720633241546328, 1.2549776726898256], [1.2001473542068102, 1.7121380597110054], [], [1.4202297475292918, 1.285598496826476], [], [], [], [1.3795163280355487, 1.3162159252858685], [1.2196794025188418, 1.8388960893450323], [1.2024697683845167, 1.7496353566386251], [1.203389696182792, 1.6418776622753328], [1.2123804745975635, 1.8105766632083935], [], [1.4456153660179392, 1.2695485416521244], [1.3093257754353653, 1.387952487174114], [], [], [], [], [], [], [], [1.851480381369022, 1.2234984847240298], [1.213148621330507, 1.5860889158702551], [1.204642736331933, 1.6320207286646506], [], [1.7965104105400467, 1.209402669537031], [], [], [], [], [1.5303510066521624, 1.2296605278566708], [1.245429514052926, 1.4917557364395337], [], [1.4281437840997853, 1.2803642080608282], [], [], [1.7389158287503481, 1.2015167422343318], [1.8659716800809376, 1.228350340389065], [], [], [1.4635153737529683, 1.259460533494669], [1.2148067847301904, 1.8207789048474283], [1.2046512545285775, 1.6319586863744697], [], [1.2004668548541795, 1.7216017800360217], [], [1.704728341377456, 1.200022357712049], [], [], [], [], [], [1.6902981239387835, 1.2000941352605543], [], [1.2563613549444508, 1.4693818033777986], [], [], [1.6151699327563176, 1.2072486837243026], [1.3079171965711358, 1.389724194859859], [], [], [], [1.213627297392539, 1.5840621107734216], [1.3278120703361551, 1.3661195647952087], [1.373758220213996, 1.321098560147813], [1.616091755414674, 1.2070908740035247], [], [1.204055795076273, 1.6364441536711831], [1.3539708798447292, 1.3390791665689425], [], [], [1.308881505115875, 1.3885095138538308], [1.265104545022867, 1.453289758542065], [1.2016234255048048, 1.6597409638163665], [1.7468737290515721, 1.2022019952583178], [], [1.2857936361933717, 1.4199409201934508], [], [1.203284598308683, 1.6427827847354175], [], [], [], [], [], [1.731410709862322, 1.2009876080637425], [1.5534848545055184, 1.221948421045667], [1.2038293081246991, 1.7617628085823924], [1.2780749451118, 1.4317105144483118], [], [1.646632050338205, 1.2028562964806895], [1.3767716207972305, 1.3185246864108364], [1.5835999095298168, 1.2137377056170886], [], [1.2002454934886897, 1.6843336915121374], [1.216656516355159, 1.8279807673756854], [], [], [], [1.2371677613914465, 1.5108272775884561], [1.4695731659237525, 1.256261930709571], [], [1.570906889419545, 1.2169524155938025], [1.3844422094097442, 1.312155597181297], [1.2382467256797673, 1.5082086715866851], [1.8288695121315952, 1.216892714976306], [1.7493569897622323, 1.2024420761744308], [1.2302469200373847, 1.5287339967604876], [1.747840792316089, 1.2022940038631553], [], [], [1.5874763347246899, 1.2128260836692815], [1.2144695494798763, 1.8194160023519699], [], [], [1.4309572704953504, 1.2785548556446664], [], [1.3018263943896624, 1.397580126652921], [], [1.2861334788625833, 1.4194389501701772], [1.8194637382022858, 1.2144812925800532], [1.2240215895481266, 1.5468838585135192], [1.2222738850251855, 1.5524271059067067], [], [], [], [], [], [1.355660689821571, 1.3374666367548447], [], [1.2053963876403304, 1.7732616314366914], [], [], [1.7275867373109437, 1.200761608122395], [], [], [1.291911791626609, 1.4110986081954677], [1.2271263978041587, 1.8624517046581204], [], [], [1.2012996827459999, 1.7360276778430088], [], [1.2235011172893864, 1.8514886622012916], [1.2925323193010778, 1.410224070727327], [1.200061631162805, 1.707850309828592], [1.270975890157318, 1.4432154343156613], [], [1.2075407884868354, 1.7865096815150316], [], [], [], [1.2003119943600247, 1.6823393935680593], [], [], [1.3875203234671727, 1.309671354171975], [1.2020211251934325, 1.7449114712115397], [1.3620010087218475, 1.3315482638187852], [], [1.6646938508665654, 1.2012480818749989], [1.204742033606294, 1.768698957223314], [], [1.2730297025216646, 1.4398147485516102], [1.6842376570341975, 1.2002485132145893], [1.26986200517263, 1.4450856900723512], [1.280588806657918, 1.4277974083529497], [1.2583887569176488, 1.465522900940709], [], [], [1.2140858307428812, 1.5821551014461632], [1.440013886344219, 1.272908416488731], [], [1.5811351605595658, 1.2143343228672632], [1.5775912085430563, 1.2152154212703847], [], [], [1.2120128799341239, 1.8089429697126538], [1.237499762624901, 1.5100170259523842], [1.2176589016755082, 1.5682917433600951], [], [], [1.6806284678071908, 1.2003753971825417], [], [], [], [], [1.3203529937105691, 1.3746261371660702], [], [1.727278909667864, 1.2007446934810482], [], [1.7224621938715723, 1.2005048049815934], [], [], [1.419135638729871, 1.2863392566748417], [1.4408556950693223, 1.272397112706198], [], [1.4035662626304424, 1.2973499790772187], [], [], [1.3709713926958873, 1.323516035433757], [], [], [1.8278514661006022, 1.2166222981808876], [1.5684446188506396, 1.217617183462505], [], [], [1.3440596579081014, 1.3488497858871473], [], [], [], [], [1.3420925944668323, 1.3508549168833726], [1.5029427431101134, 1.240469329089958], [], [1.3902415236193089, 1.3075083614771994], [], [], [], [1.2159242040420641, 1.5748176379529013], [1.4844431049514002, 1.2488512163409868], [], [], [1.6393540155903028, 1.2036915630628684], [1.217803321331247, 1.8322360127984176], [], [1.2468456627870734, 1.488691820638402], [1.6063511498109018, 1.2088484013481582], [], [1.3278253920506615, 1.36610471522084], [], [1.2666612072957313, 1.4505656584637816], [1.2024037531648273, 1.7489691243085868], [], [1.2012138337505427, 1.7348189654953845], [1.512057397475421, 1.2366668820855904], [1.3646788931839033, 1.3291095103354253], [1.2156083472192698, 1.823954534876109], [], [], [], [1.8486490730308602, 1.222607652881756], [1.722003054624754, 1.2004843690261735], [1.4078047509613225, 1.2942637107193573], [1.2454520852325546, 1.4917064735029744], [], [], [], [], [1.2881402416502141, 1.4165012531737466], [], [], [1.2070778441742172, 1.7838316664278047], [], [], [1.2630813401448275, 1.4568907968209346], [], [], [1.3205414377365094, 1.3744063889986098], [1.2516795200227155, 1.4786208066846902], [1.203234559016059, 1.7567811292951316], [1.437187652716116, 1.2746417155912733], [1.2301611925319442, 1.5289693156272968], [1.2041466862385657, 1.7642611175735725], [], [1.2051708593536512, 1.7717225317957748], [], [], [1.6768564223462386, 1.200535912388704], [1.2747595346666696, 1.436997059630329], [1.200011691684209, 1.703419290498538], [1.6688021217095992, 1.200974256786108], [1.360683627224637, 1.3327611143049107], [1.2005151190147259, 1.677309612891655], [], [1.4601930527021256, 1.2612601818529865], [], [], [1.2123751284106108, 1.5894469149800345], [], [1.2862936466626034, 1.4192028254980595], [], [], [], [], [], [1.7863594058539811, 1.2075144133880187], [1.2235792144209316, 1.5482659067044475], [], [], [], [1.2208335022539618, 1.84282670421807], [], [1.209251480294963, 1.6042613431924444], [], [1.2755541902446306, 1.4357165260915683], [], [1.2148325099477415, 1.8208822013217483], [1.5976351569064495, 1.2105907245480192], [], [], [], [], [1.4779995779958872, 1.251986816455145], [], [1.2756434535482593, 1.4355732209409349], [], [], [1.8050550164533605, 1.2111611272433582], [], [], [1.258643494311786, 1.4650437596345025], [1.2056654587868643, 1.775055721724587], [1.3752586669054474, 1.3198118011037523], [1.2811800884170728, 1.426888517887532], [1.3679467255724471, 1.3261810291839908], [], [1.2364968298351937, 1.5124771713972542], [], [1.8495824713627027, 1.2228992933760985], [], [1.2412822587363723, 1.5010577122630897], [1.342586617225307, 1.3503492116217228], [], [], [1.3637450404596927, 1.3299559456165437], [], [], [], [], [1.4113077248016577, 1.2917638303128878], [1.2062056903698872, 1.6214686064244346], [], [1.2008211118055199, 1.6713567183981537], [], [1.2238945766626748, 1.8527207447231262], [1.6355676920091335, 1.204168902057394], [], [1.2193690426862274, 1.8378182965779453], [], [1.209073894121977, 1.7948238291118865], [], [1.2388367127238584, 1.5067943518717348], [1.6415342349664028, 1.2034300106540505], [], [1.5791118919759306, 1.2148339816739417], [1.511969812136425, 1.2367024191170553], [], [1.2139293239222047, 1.817197687081593], [], [1.6434810491093845, 1.2032046616661702], [], [1.2086654248736437, 1.7926840616578865], [1.205502545943495, 1.773974779023899], [1.2749061238245463, 1.4367601921476767], [1.6759438316974864, 1.2005790345143676], [], [1.2183372196495998, 1.565832321235246], [], [1.2124035779668811, 1.5893215051579548], [1.5369268681154136, 1.2273403405648495], [], [1.2413654483956758, 1.5008660047237026], [1.5666477673788042, 1.2181108197365886], [], [], [1.2008339452165429, 1.728866065750613], [], [1.5653197028628023, 1.218480304075694], [1.8653449640849435, 1.2281302691931293], [], [1.6167146873930318, 1.2069852368296061], [], [], [], [1.4108673862364893, 1.2920755809487736], [1.2026836638772105, 1.751734532233361], [], [], [1.5068380819043536, 1.2388183943416533], [1.53417931702546, 1.2282972322554624], [1.5974103182786537, 1.2106378057059242], [1.2030916466264374, 1.7555165592195219], [1.2000855001621882, 1.7092462344719541], [1.5408635813249942, 1.2260004216760385], [1.2265215332150718, 1.8606802461131848], [1.5185390650234418, 1.2340902135848257], [], [], [1.2968320610530177, 1.404271048077395], [], [], [1.555681658024731, 1.2212806498902418], [1.2070197074865923, 1.6165108917678785], [1.4203548848209617, 1.2855140417860909], [], [1.218265125834556, 1.833908592005158], [1.5612789360812525, 1.219628824318891], [], [], [], [], [], [], [1.2247908378630727, 1.8554871448741652], [1.327375534912761, 1.3666068266768963], [1.7106864968279298, 1.2001142142593504], [1.2537775409850136, 1.4744218160578932], [], [1.2003204782573427, 1.6821009622876213], [1.2088996351244103, 1.6060828470455863], [1.2094144555252586, 1.796570303677795], [], [1.7836090455772915, 1.207040034589365], [1.2208557591445797, 1.5570986478192632], [1.5874350419772743, 1.2128356229922574], [1.7473209071750928, 1.202244305161532], [1.2003061921319722, 1.6825043325834497], [1.2297921223785808, 1.5299866128131066], [1.2030856345917367, 1.7554627212720673], [1.6272413742149507, 1.2053221428304364], [], [1.8476095416154281, 1.2222852072375368], [], [1.205199604975227, 1.6280794251738175], [1.2967019916651215, 1.4044484537798518], [1.5845677513585437, 1.2135070442713718], [1.2200649347174064, 1.559777558457312], [], [], [], [], [1.2470785874904866, 1.4881930263414649], [1.2037433930878292, 1.7610686506811737], [1.2014564207334968, 1.7381352798881002], [1.8372473863853103, 1.2192057041411561], [], [1.5659172864405246, 1.21831356057646], [1.246782657078081, 1.4888269901838882], [1.2369232892791955, 1.5114265130300648], [], [], [1.2043442422260293, 1.6342324564430823], [1.7529061694807988, 1.2028069416907865], [], [], [1.208332954992821, 1.609096111997843], [1.5931220519302438, 1.2115564472568008], [1.2021934258415048, 1.6532173672760653], [1.2069404653361984, 1.6169801513063566], [1.3755498074404429, 1.3195633133515297], [], [], [1.2982754525094198, 1.4023132721408484], [], [], [], [], [1.3126492093510276, 1.3838364901137135], [1.362020287828514, 1.3315305790700136], [1.8171715735776701, 1.213923028373764], [1.8656996340210112, 1.2282546965943348], [], [1.2038540189279958, 1.7619609995569665], [], [1.7926093755993753, 1.208651342170253], [1.6914982684630104, 1.2000722846641998], [1.45527034901634, 1.2639869291759522], [1.2954092997047049, 1.4062205500131728], [1.4434233305558206, 1.2708515260461337], [1.5366177749631589, 1.227447094451837], [1.2005441489459692, 1.6766793471812282], [1.719663521325971, 1.2003868036880299], [1.610459079962046, 1.208082909791948], [1.3726498711487263, 1.3220557010073382], [], [], [], [1.6783065313215877, 1.200470828262554], [], [], [1.7410388177081708, 1.201687030631235], [], [], [], [], [], [1.4427362504175902, 1.2712630606644686], [], [1.5424038426602937, 1.2254860895698014], [1.2274125770398514, 1.8632823556293994], [1.2259445443059693, 1.858969886855105], [], [1.2322190948921479, 1.5234185037539927], [1.7112783638935387, 1.2001272176764521], [], [], [1.47127037168236, 1.2553847088440677], [1.5395332029261706, 1.2264491505267183], [1.5709928803435407, 1.2169294429610267], [], [1.2021816127310996, 1.6533432395360423], [1.2305950298702593, 1.527782190184937], [1.5556759568306218, 1.2212823686522047], [1.222589621287062, 1.848591151476691], [], [1.563596440264587, 1.2189656260811421], [1.5432277341186453, 1.2252132513955072], [], [1.277041157918923, 1.433343258278673], [1.3155497228623874, 1.3803158051939182], [1.351573700012349, 1.3413928145213547], [], [], [1.2919373573854145, 1.411062498622278], [1.200183068541424, 1.7135290438440185], [1.3618665529932237, 1.3316716518983156], [], [1.203174111481016, 1.75624976886461], [], [1.5607883440994508, 1.2197707684225927], [], [1.2013688748515414, 1.6630270229331963], [1.5504861941869035, 1.2228777705123313], [], [1.3006199340628197, 1.399175195617094], [], [], [], [], [1.2082811578025316, 1.6093767125514573], [1.21285015340448, 1.5873721750100742], [], [], [1.5213388696595833, 1.2330094213953726], [1.374025069166322, 1.3208689613498006], [1.2006573653330912, 1.7256307082210005], [], [1.8374606379579563, 1.2192666300201414], [], [], [], [], [1.8366154373548573, 1.2190257571591374], [1.2026010945568957, 1.7509345547148674], [], [1.2017947375824543, 1.7423263097784867], [1.4452672977398708, 1.2697544301224561], [1.5021108920592583, 1.2408269378998615], [], [], [1.2800461293784395, 1.4286353992320118], [], [], [], [], [1.6298373554004897, 1.2049472721994121], [1.2970291840637729, 1.4040024974705168], [], [1.8421971693156627, 1.2206463048660074], [], [1.8576070307058554, 1.2254897009841792], [1.2011600344358846, 1.7340395175640342], [1.7409781090454999, 1.2016820346615475], [1.772463694555056, 1.2052788533209524], [], [], [1.3640679523449717, 1.3296627761643451], [1.214310853206499, 1.8187689045457647], [1.2491339627915725, 1.4838523271187753], [1.2137537000074816, 1.8164668868974603], [1.2057997096703335, 1.775934662954893], [1.7857221026488255, 1.2074030845432908], [], [], [1.2064619414888802, 1.6198739443060215], [1.5637241942084907, 1.21892941811427], [], [1.2014452655090313, 1.6620108342202724], [1.2296648690556526, 1.53033897147676], [1.3990732182466212, 1.3006967668255687], [], [1.2201467333643583, 1.8405021085219142], [1.6895234316615348, 1.2001097705337207], [], [], [], [1.4531721548645273, 1.265171281001612], [], [], [1.7251071529089768, 1.2006307669941956], [1.247271709136061, 1.4877805507230386], [1.6890280138419884, 1.200120398976165], [1.2170036348319355, 1.5707153867065462], [], [], [], [1.2526863603276972, 1.476593402597154], [], [], [1.8207466510334631, 1.2147987569428504], [1.3493650402402189, 1.3435520725347714], [1.571210378979789, 1.2168714109913692], [], [1.2235009977244564, 1.5485117138838396], [], [], [], [1.35842988181494, 1.3348563921372247], [], [], [1.4922142116686687, 1.245219760579324], [], [], [1.7086643489387905, 1.2000750765790258], [], [], [], [1.6504626412151704, 1.2024600015228695], [1.2201031930769102, 1.8403533209618592], [1.4153311444336278, 1.2889481265454055], [1.8099682176572272, 1.2122428974322437], [], [], [], [], [1.866863150640137, 1.2286649928570477], [], [], [1.856576848484066, 1.2251487701197377], [], [], [], [1.219281281583434, 1.8375118677203326], [1.2033331662637803, 1.757637281914038], [1.201047921862958, 1.6676453446513935], [], [], [1.244171846727855, 1.4945232502580743], [1.2128824815623291, 1.587232437150014], [], [], [], [], [], [1.5862059188323154, 1.2131212603828316], [], [1.559656364073833, 1.2201003606429532], [], [], [], [1.2155163548629233, 1.8235944885287818], [1.5089956203165558, 1.2379206486524823], [1.776855324186646, 1.2059420487997734], [1.3169016594526104, 1.3786969320566074], [1.222794923767346, 1.8492491715815766], [1.2078750721358507, 1.6116085107337486], [], [], [1.6903060809511854, 1.2000939808989344], [1.3440739359251743, 1.3488353136885727], [], [1.8060877759609535, 1.2113842165958424], [1.7576269906840272, 1.2033319720933275], [], [1.764821501155866, 1.2042196323089223], [], [], [], [1.2097930492655549, 1.7984740851779657], [1.227152727964836, 1.537471672226336], [], [1.5687459732725362, 1.2175350992374407], [], [1.2022766107565577, 1.6523405014711554], [1.3504718071298032, 1.3424667254801386], [1.252517632619769, 1.4769315556072893], [1.4404353171691504, 1.2726521610831283], [], [1.5373890181776533, 1.2271811461132578], [], [1.5280222279898235, 1.2305070331363677], [], [], [1.6784371169255643, 1.2004651743136239], [], [1.2140116442286288, 1.5824614188675092], [1.36879908968432, 1.3254256322089497], [1.200133893887061, 1.7115704779282417], [], [], [], [1.522563256333666, 1.232542834050982], [1.2770274746942931, 1.4333649632240482], [1.5568326468466671, 1.2209351724546365], [], [1.2368751532002715, 1.5115447632016343], [], [1.56031086107406, 1.2199094413903462], [], [1.4403330424427934, 1.2727142979773558], [], [], [], [], [], [], [1.226642765888775, 1.53896295794268], [1.2685194680334222, 1.447364787620888], [], [], [1.4856285592967944, 1.2482867221225038], [1.6326650589472138, 1.2045547399425263], [], [], [], [1.6304469051406778, 1.2048612649009471], [], [], [], [], [1.2737873316281698, 1.4385755150729673], [], [], [1.3463814795646178, 1.34651175124894], [], [1.6883599167815273, 1.200135509900266], [], [1.3844893339833313, 1.3121172604643019], [1.5053436444105688, 1.239447176505625], [1.2140122498200734, 1.5824589149486306], [], [1.3243242186629618, 1.3700489319356493], [1.3299566769223405, 1.3637442356692704], [1.499905053857558, 1.2417838801086836], [], [], [1.2454624963162566, 1.4916837554463143], [], [1.5911233759682841, 1.2119980730166566], [1.2323671031911312, 1.523026912152876], [1.3327944385558619, 1.3606475642573117], [], [1.376558710264994, 1.3187051900503286], [1.4434533246451546, 1.2708335947859202], [1.6520601215006583, 1.20230353823895], [], [], [], [], [1.228183639899754, 1.865497197383385], [1.5834741771671204, 1.2137678202616362], [], [1.3347302698750974, 1.3585647583296638], [], [], [], [], [1.267049555718451, 1.4498921976498749], [1.2085959347726531, 1.792314921210157], [], [1.643869236042629, 1.2031606523859428], [], [], [1.557616315711658, 1.2207016728085964], [], [], [1.4197351353760934, 1.2859328488549915], [], [], [1.46459467648747, 1.2588828572114192], [], [1.588805230369784, 1.212521053575764], [1.3996624510568818, 1.3002533843860087], [1.7818624816002604, 1.2067469877372798], [1.2013971624849407, 1.6626474843962105], [1.229485879278373, 1.8691640097702644], [1.3347349234746302, 1.3585597799454263], [], [], [1.221434823470638, 1.8448287672163948], [], [1.2454024438562543, 1.4918148373487343], [1.8363889097831636, 1.2189614721374595], [], [1.2004110753891568, 1.720270826479976], [1.233280262284188, 1.5206325379939722], [], [1.6675102021647548, 1.2010567035858433], [], [1.344277747295525, 1.3486288587108304], [], [], [1.203045021605636, 1.6449023643968514], [1.5741358753778483, 1.2161010207356298], [1.2008033419173723, 1.7283319000269326], [], [], [], [1.212861515286684, 1.8126769573214254], [], [1.2089938380576222, 1.605591584407875], [], [1.6048220807527258, 1.209142420158597], [], [], [], [], [], [1.5597853237987658, 1.2200626659887948], [1.6292620908792896, 1.2050291440769163], [1.8588275326404695, 1.225896830979437], [1.4656603155958612, 1.258315822885437], [1.5615904994679164, 1.2195389608277698], [1.4708341415214083, 1.2556093955676266], [], [1.2283034930363004, 1.5341615083334252], [1.5426863700761793, 1.2253923495768413], [], [1.2266788813998266, 1.5388568379139818], [], [], [1.570616724826982, 1.2170300546560862], [], [1.5929728148712576, 1.2115891262027247], [1.8562124817178345, 1.2250287792344094], [], [], [1.2086409891993002, 1.6074455700414194], [1.2010304988010976, 1.6679151613169307], [1.2017539592984936, 1.7418435529714287], [], [1.804110590776426, 1.2109591173652416], [], [1.732985923886718, 1.2010892576569034], [], [1.663358664352998, 1.2013443948755778], [], [1.6720918049630131, 1.2007794749313911], [], [1.7674335938331935, 1.2045681576414977], [1.2097625152883318, 1.7983219638919854], [1.7347917484771362, 1.2012119345474437], [1.2508327447540428, 1.4803439579369302], [], [], [], [], [], [1.642138177228019, 1.2033592752648008], [1.5301049566454115, 1.2297493495554286], [], [1.200218629339301, 1.714784503390813], [], [], [1.3675882229886323, 1.3264997851350755], [], [], [], [], [1.8601902475876708, 1.2263555293494912], [], [], [], [1.2002709920747634, 1.7164596062546766], [1.3454248118128493, 1.3474713686492306], [1.6015180263322057, 1.2097946339925523], [1.2000011132383932, 1.7010551005420609], [1.2484945637155112, 1.4851911524039259], [1.2246453654329303, 1.5449581624347557], [1.6400747208161304, 1.2036040281038378], [], [1.7531820382069008, 1.2028363742064794], [], [1.2466506508731756, 1.489110532158942], [], [1.2162027517548442, 1.8262545943338897], [], [], [], [1.2021882077917718, 1.653272924995975], [], [1.812036605961209, 1.2127138428759823], [], [1.2015677819622792, 1.7395641759929121], [1.569922852641632, 1.2172164711435265], [1.3947661601786658, 1.3039794159037637], [1.230708749134061, 1.5274725475158162], [], [], [], [1.2299757567521734, 1.5294795884379002], [], [1.634928453735649, 1.204252388944973], [], [], [1.2141948020294697, 1.8182933202882303], [], [1.619980094148386, 1.206444719745094], [], [], [], [], [], [], [], [], [1.2094127314618002, 1.6034384551271665], [1.3881281137654926, 1.309185559918098], [1.2798025516177107, 1.429012722857671], [], [], [1.747213932606019, 1.2022341468442472], [1.2017964432753478, 1.7423463819813019], [1.685956926863883, 1.20019724680941], [1.2020465909088887, 1.7451929460706017], [], [1.7165785392467894, 1.2002749235465138], [], [1.285552127298416, 1.4202984433129988], [1.566836386035011, 1.2180586634083113], [], [], [], [], [1.2009629209791308, 1.6689839757170777], [1.2753563172150661, 1.4360345805397068], [], [1.4515964555706207, 1.266069499671985], [1.264294428108598, 1.454723310070471], [1.2058052882066126, 1.775970960474715], [], [1.208970853278708, 1.794288796100915], [], [1.3227799505817044, 1.3718155483316452], [1.450090861476314, 1.2669348519190802], [], [], [], [], [], [1.3218715709357258, 1.3728625806585493], [1.5315772136786805, 1.2292200460429914], [1.3291319075425063, 1.3646541218429247], [1.2181510123340784, 1.8334973898071663], [], [], [1.200051721201664, 1.7071915593984395], [1.340731675508577, 1.3522554514918665], [1.7128131878306252, 1.2001642047455814], [], [1.2483445303295861, 1.4855067909774347], [1.2197007046093462, 1.561030266434588], [], [], [], [1.3097695730912944, 1.3873976744893772], [], [], [1.2140854593775392, 1.8178433672790408], [1.8487062834759225, 1.222625470668178], [], [], [1.764425038614886, 1.2041679574700013], [], [1.2141277847908674, 1.581982245031647], [1.235258028219503, 1.5155687128885782], [1.27151170479874, 1.442322331438058], [1.2024293635233698, 1.7492286676261009], [1.25407747579194, 1.4738294837873156], [1.3345644003544543, 1.358742293110177], [1.3981612649790123, 1.301385677576771], [], [], [1.214334455302184, 1.8188653805503252], [], [], [1.350591967901706, 1.3423492945551516], [], [1.2088927991477991, 1.6061185999725387], [1.2027869940832283, 1.6472816279916724], [1.351106089505724, 1.3418477429639564], [1.4041118322852815, 1.2969488962843214], [1.632995179053232, 1.2045099860038635], [], [1.374704680379553, 1.3202856928781437], [1.2000557952239135, 1.692530588322598], [], [], [], [], [1.2150329867203897, 1.5783159992823448], [], [], [], [], [], [], [1.48834610648752, 1.2470070316649409], [1.3206306157851728, 1.374302486468713], [], [], [1.2022335040817955, 1.7472071556155646], [1.2000465743422728, 1.6931756192146414], [], [], [1.688667310506662, 1.2001284463496171], [1.6165934659981946, 1.2070057301694006], [], [1.2153811211202257, 1.8230631635921601], [1.8396172773432182, 1.21988853807968], [1.206448270698645, 1.7800418047250435], [], [], [1.486179784086501, 1.2480255369307856], [], [], [1.2008237736917562, 1.7286896338188722], [1.2023354948257592, 1.7482704908787767], [1.7395592447008577, 1.2015673905544526], [], [1.8556053329275515, 1.2248295249444618], [], [1.2927155501283933, 1.409966593488297], [1.7495425913567844, 1.2024605225294633], [1.208490474332542, 1.608248236103329], [], [], [], [1.2894448833352512, 1.4146151787841643], [1.589688523617132, 1.212320414433583], [1.2552360862614285, 1.4715595021981684], [], [], [], [], [], [], [1.2669528764356286, 1.450059629566122], [], [1.2158215953331442, 1.5752150952468271], [], [], [], [], [1.3299483969547794, 1.3637533478476513], [1.6946215940299392, 1.200028928087613], [1.5497978321324948, 1.2230940252335878], [1.2000825964228092, 1.6909121179232862], [], [], [], [1.6810512752803812, 1.2003591831810574], [], [1.2135292439892775, 1.5844742299469237], [1.6449034993756317, 1.2030448957713091], [], [], [1.5793733208199072, 1.2147689166283935], [], [], [], [], [1.2000387184993355, 1.706222298627782], [], [1.6420874474007965, 1.2033651882404492], [1.7522828674672075, 1.2027410113739456], [1.3048282931058908, 1.3936679545486692], [1.202713322537304, 1.7520188467587705], [], [], [], [], [1.2217036419170477, 1.8457140825197909], [], [], [], [1.2785461576384871, 1.4309708960749468], [1.8084163264180917, 1.2118956052584593], [1.6081088358185451, 1.208516517118452], [], [], [1.2238688246222909, 1.852640439705345], [], [], [], [], [1.7674090973936663, 1.2045648240298523], [], [], [], [], [], [1.600608504333969, 1.209978234575984], [1.229641866074522, 1.8695972459981063], [], [1.2398152895200683, 1.504474983082723], [1.7865762166370314, 1.2075524812603704], [], [], [], [], [1.2044452009624758, 1.7665239892886702], [1.5103115354966556, 1.237378895385907], [], [1.8105205676048675, 1.2123677572839364], [], [1.2127700465085935, 1.5877192250616252], [1.667201869850088, 1.2010768770054154], [1.2242277199673135, 1.8537554472287046], [1.2736031344181056, 1.438876058121941], [1.2109339957888319, 1.5960074833224924], [1.2245321170448669, 1.8546941895423477], [], [], [], [], [1.2136285215688312, 1.8159430246659067], [1.584262101125535, 1.2135796686361433], [], [], [], [], [], [1.8264610233844027, 1.2162566697466832], [], [], [], [], [1.8483119601828994, 1.2225028141792813], [1.2004041478188792, 1.7200993652491738], [1.5369869512665066, 1.227319615445477], [1.4797038585485867, 1.2511463378097278], [], [], [], [], [1.2598361565867244, 1.46281696740354], [1.2006195265372817, 1.6751174212720774], [], [1.2258196959338896, 1.5414029028141711], [1.2015589923920835, 1.6605467119899353], [], [], [], [1.2663638580135541, 1.451082952847518], [], [1.2255359563884445, 1.8577462244231917], [], [1.2620634033138125, 1.4587293277604598], [1.2957621713722665, 1.4057351908461782], [1.294504380209763, 1.407470852168657], [1.5684493664101393, 1.2176158887337745], [1.5456083513253915, 1.2244337913396954], [], [1.3041929001666044, 1.3944893787092234], [], [], [], [], [], [1.668343274893265, 1.2010031545635618], [], [], [1.3202999647231641, 1.3746880217225783], [], [1.2564209293667665, 1.469267236621764], [], [], [], [1.2276408981218891, 1.5360583064839683], [1.8125449778379654, 1.2128310067713137], [1.5667273771555974, 1.218088796560846], [1.2259268484903414, 1.858917107378974], [], [], [1.3624457202244757, 1.3311408016529518], [], [], [], [], [], [1.843131020859434, 1.2209243161381114], [], [], [1.2821843974821951, 1.4253545516621773], [], [1.310447035670697, 1.3865538515434386], [1.5719107917323965, 1.216685242595078], [], [1.402054826511046, 1.2984670952529083], [1.3985278093389097, 1.3011083878319785], [1.3402837654601596, 1.352718801821235], [], [], [], [1.2873957551495128, 1.4175858765370273], [], [], [1.2590801521579216, 1.4642253453423832], [1.2501371123030216, 1.4817721780502406], [1.2067321573820098, 1.7817730728234777], [], [], [1.204269994741047, 1.6347944642997358], [1.2345187369778272, 1.517442628811426], [], [1.6666285047829787, 1.2011148996943481], [], [], [], [1.2375543398101925, 1.5098842158798669], [1.2151097492889307, 1.8219895272773703], [1.4837155052761775, 1.249199581475282], [1.4942884690042562, 1.244277753433753], [], [1.3096295402846219, 1.3875725617337613], [1.3411887533136446, 1.3517838469407495], [], [], [1.8534184188503058, 1.2241189342309655], [], [1.3215948429960245, 1.3731827159515633], [1.2040435485517205, 1.6365397898929532], [1.7341674028348828, 1.2011687774572257], [], [1.3400457911001706, 1.352965466422579], [], [1.586958147885011, 1.2129460608203513], [], [], [1.2063077876563266, 1.6208293016880022], [1.4928899028399099, 1.2449116485182925], [], [1.2645029901140532, 1.454353191796841], [], [1.8157407276988229, 1.2135803417297497], [1.2709026975103108, 1.44333776086835], [1.3900655602500303, 1.3076472976302158], [], [1.5581940462812038, 1.2205304269404547], [1.802720097177794, 1.2106651640892663], [1.7586045211924966, 1.2034463673521276], [], [], [], [], [1.5945677526448878, 1.2112423491978355], [], [], [1.4941968131353476, 1.2443191376891576], [], [1.20287941997571, 1.6464170837270549], [], [1.42705542436598, 1.2810712964811735], [], [], [1.2409913476241707, 1.501729838240533], [], [], [1.6012418602519616, 1.209850196538337], [1.2357449185648792, 1.5143465072731748], [1.44866868205677, 1.2677586685416131], [], [], [1.8077294632043128, 1.211743548165812], [], [1.2563513850158068, 1.469400983474328], [], [], [], [], [], [1.2806685690059934, 1.4276745495174594], [1.2000049601401366, 1.6977728683169493], [1.2834536693920278, 1.4234332730478338], [], [1.2001390019416576, 1.6882109109716747], [], [], [1.313855165275665, 1.3823647270599249], [], [1.549049267143488, 1.223330432846734], [], [1.2023435037347499, 1.74835299085884], [1.4855094734349223, 1.248343256428252], [], [], [], [], [1.4197281164949533, 1.2859375997309903], [], [], [1.208530400049393, 1.7919653865559773], [1.5562712914090304, 1.221103290545057], [1.515287250488881, 1.2353698243031963], [], [1.223956406986924, 1.8529133661626769], [1.5506224604951346, 1.2228350906746468], [], [1.697373077198628, 1.200006900771025], [1.2148717358680399, 1.578960471992364], [1.2024708961684574, 1.7496466599136542], [1.8596776399575699, 1.226182470461908], [1.5524488305116542, 1.2222671746858695], [], [1.2022786521145765, 1.7476808122740928], [1.7325242480482532, 1.201058948082145], [], [1.8240435646071376, 1.2156311384083873], [1.6359202331678193, 1.2041232174393186], [1.5319494996109144, 1.2290870257478799], [1.435008263911667, 1.2759960143997566], [1.57155866208515, 1.216778702130542], [], [1.2096579244578307, 1.7977990232722065], [], [], [], [1.2143907197543944, 1.8190950332270195], [1.6127389434578094, 1.2076733726364774], [], [], [], [1.246791803513808, 1.4888073613078967], [], [1.7976477785216634, 1.2096277828528779], [1.2048548202522045, 1.630492799131865], [], [], [], [], [1.2000125160433832, 1.7035377799157132], [], [], [1.7090337492115697, 1.2000816152858724], [1.2094998915233899, 1.7970033173888076], [], [], [1.5915993614242518, 1.2118921209851554], [1.2013602968584807, 1.6631428914463244], [], [], [], [], [1.2000141960142094, 1.6962322669040084], [], [], [1.8697661218307753, 1.2297027919724184], [1.2034997509703673, 1.6409449179704847], [], [1.6650730457755847, 1.20122138391005], [], [], [1.2178679701984583, 1.5675284715893816], [1.2134103289580387, 1.5849761240642801], [1.22898209991234, 1.8677561855700444], [1.4156443581224991, 1.2887313907767401], [], [1.4035138650333596, 1.297388559809159], [1.77270961441905, 1.2053149365798144], [1.213371935627366, 1.5851386620096055], [1.504740721945095, 1.2397024719450718], [], [1.2100124707799234, 1.6004398613459956], [], [], [1.3596628967274116, 1.333706871295647], [1.589782685032406, 1.212299124994291], [1.363501009532283, 1.330177840828585], [], [], [1.6140545556222068, 1.2074420028151978], [], [1.3462493141965954, 1.346644014776004], [], [], [], [1.3527806190253764, 1.3402240954766436], [], [1.53584543115491, 1.227714834525493], [], [1.2072081211615697, 1.7845941141622146], [], [], [], [], [], [], [1.7268014695510314, 1.200718835494563], [1.2239483826608328, 1.5471116170902346], [1.202048501617455, 1.6547860059430906], [], [1.2022762980574575, 1.7476562327991958], [1.6902761504969028, 1.200094562191167], [1.6189013501520173, 1.2066208263487055], [1.223236935855153, 1.549344828607789], [], [1.2015972801373735, 1.6600659439383332], [], [], [1.8104880578073175, 1.2123603901630151], [1.211765596601866, 1.592170656412699], [], [], [], [], [1.2261028758772283, 1.540558738878023], [1.2097331003728267, 1.6018248140823803], [1.208830919090495, 1.606442883977155], [], [1.2279526840831552, 1.5351627119377944], [], [1.8091263342953625, 1.2120538521893458], [1.2141765260746096, 1.5817817603621778], [], [1.563202912372664, 1.219077389992237], [1.6731741431642226, 1.2007201452040885], [], [], [], [1.203499162164719, 1.640949868511035], [1.5079198515831789, 1.2383667943224057], [1.2005850748968148, 1.7241812444712794], [1.2304783853375583, 1.5281004556004478], [1.7563203759594752, 1.2031821105759342], [], [1.3145089776751313, 1.3815715595193676], [1.2023724535864717, 1.7486500262122409], [], [], [1.382964245243298, 1.3133627925226954], [1.7849519575069939, 1.207269683380726], [1.382323848998635, 1.313888794406381], [1.6129739832656285, 1.207631771525265], [], [1.2232017816459022, 1.5494561227603119], [1.2382460766112002, 1.5082102342796926], [], [], [1.4874851044463813, 1.247410319198687], [1.205232329284712, 1.6278546466155408], [], [1.327232399755173, 1.366766874084054], [1.4983089767515887, 1.2424841738901167], [1.2190502389182023, 1.836701599534759], [], [1.5082794537776523, 1.238217332334566], [1.743575326999249, 1.2019024283567439], [1.8295307148224438, 1.2170695765251616], [1.6566196029875435, 1.2018854136295127], [], [1.5572652709035597, 1.2208060965436163], [], [], [1.3168842737482116, 1.3787176626414628], [], [1.202018363318208, 1.74488083697664], [1.8070467266005112, 1.2115934088035714], [1.5872089189601701, 1.2128879266145556], [1.2081941968129475, 1.6098498366527363], [], [1.25327562637974, 1.475417422729219], [1.731137554528936, 1.2009704891512352], [1.7022428637841571, 1.20000503046326], [], [1.2081665365239078, 1.6100008655313198], [], [1.5659663667185297, 1.2182999012358744], [], [], [], [1.2857169543510403, 1.4200543658353966], [], [], [], [], [], [1.5328235484581088, 1.2287760255994378], [1.205165918085367, 1.7716884326492248], [], [], [1.360471433742042, 1.3329572876424114], [1.2018100873816981, 1.7425065990802462], [1.6364006406659193, 1.2040613732604664], [], [1.312699336271748, 1.3837750865670835], [], [], [], [], [1.818437412110778, 1.2142299109532353], [], [1.2128052545936299, 1.587566552803793], [], [1.8190055840907182, 1.2143687912054797], [1.3714583920039456, 1.3230909767392576], [], [], [], [], [], [], [1.202341904830317, 1.6516634681417597], [], [], [1.565300387845002, 1.2184857068733128], [], [], [1.6580350625995874, 1.2017641682606723], [], [], [], [1.227597362036024, 1.5361837991996006], [], [1.330286077556113, 1.3633820926463427], [1.4085694099816346, 1.2937141262589267], [1.4876523765204106, 1.2473318137945073], [], [], [], [], [], [], [1.2564442563656604, 1.4692223964744673], [1.6040610274941733, 1.209290601725903], [], [1.651831035518757, 1.2023256578235073], [], [], [], [], [], [], [], [], [], [], [1.8329735189642786, 1.218006179236438], [1.3357027664465022, 1.3575273359445044], [1.214326988939201, 1.8188348699967192], [], [], [1.3275781412533323, 1.366380517463867], [1.5817670400585149, 1.214180108287572], [], [1.5900922635167456, 1.2122292654728786], [], [1.4314600769048138, 1.2782342952490904], [1.400526346897112, 1.2996057803898622], [1.2053072344614548, 1.7726571932008524], [1.2273304095930444, 1.8630443445953304], [1.32553647187057, 1.3686737769193937], [], [1.5415741168026957, 1.2257624650735097], [1.7646595476249305, 1.2041984843700664], [1.7486061498344667, 1.202368166011991], [1.4484540114798552, 1.2678835623822866], [1.5850319258284595, 1.213397141478508], [], [1.2001773520630659, 1.713316178480014], [], [], [], [1.216385116080189, 1.5730486547876397], [1.6999426010624556, 1.200000003294638], [], [1.2833918921776883, 1.4235263403202518], [1.8479777786538225, 1.22239914465667], [1.855617863897015, 1.2248336286771442], [], [1.2039102978741234, 1.637590005250288], [1.2567481131848217, 1.468639318736341], [1.5143112895647568, 1.235759003515527], [1.3728497592141684, 1.321882663775155], [1.8177453316701322, 1.2140616943789153], [], [], [1.2011746794665823, 1.7342534610621045], [1.3914608636279469, 1.306549111925278], [], [], [1.2002335647144802, 1.7152810392972562], [1.2071785785806886, 1.61557816283538], [], [], [1.3433401691153495, 1.3495805869628046], [], [], [1.569177876798381, 1.2174178079528624], [1.6482017399659208, 1.2026902974428892], [1.8156640174114056, 1.2135620953541406], [], [], [], [1.7706321939441978, 1.2050140474936393], [], [1.235273257412683, 1.5155303419958128], [1.6691374075117138, 1.2009534086030624], [1.6629195863831416, 1.2013768527976236], [1.2758948555569798, 1.435170193412892], [1.201216082153026, 1.7348511591948255], [1.2703282664121631, 1.4443005644206015], [], [], [], [], [], [1.4078553053950231, 1.2942273081956293], [], [], [], [], [1.5927713712304448, 1.2116333127943708], [1.205668323367198, 1.775074586095449], [], [1.2056116413245026, 1.7747004070012187], [], [1.8085082119899725, 1.2119160236898376], [], [1.3335091543639273, 1.3598758167007872], [1.5448347403305531, 1.2246856385593707], [1.8612052216055395, 1.2267000142329296], [], [1.8292913880088653, 1.2170054482846198], [], [1.706393941317778, 1.2000408841570893], [], [1.2081727569146752, 1.6099668785441228], [], [], [], [], [], [], [1.234177809859541, 1.518314317645153], [1.3480265609873556, 1.3448736869371514], [1.2118865638171803, 1.59162438734752], [1.392697288129171, 1.3055826534280797], [1.2005917329745364, 1.6756816360208304], [1.6825903864068443, 1.2003031865675577], [], [1.2043995763554893, 1.633816768865659], [], [], [], [1.706672659323251, 1.2000445263650414], [1.201828593627712, 1.7427229431694111], [], [1.3293990758970953, 1.3643588895053629], [1.2894551012506983, 1.4146004798341003], [1.4553187172757711, 1.263959784097354], [1.863428792665807, 1.2274631974884955], [1.2049862742894621, 1.6295627132963488], [], [], [1.4953764681760058, 1.2437881958740271], [1.3149210992683367, 1.3810732996262405], [1.2560724805405608, 1.469938361592835], [], [], [], [1.7980172074311496, 1.209701491897641], [], [], [], [], [1.2870488171693304, 1.4180934186671923], [], [], [1.328894273573058, 1.364917115010134], [1.395155527464711, 1.303679615002355], [], [], [], [1.225120363731656, 1.5435093259722958], [], [], [1.7489840899733178, 1.2024052261835079], [], [], [1.2131293023466685, 1.5861715160139684], [1.250657884594617, 1.4807018848165459], [1.2735874452245666, 1.4389016791898346], [1.80713751579914, 1.2116133164096414], [], [1.2013185526970247, 1.6637120665260476], [], [1.243849349516824, 1.4952401795669488], [1.5559487919795427, 1.221200198968455], [1.5960071351743794, 1.2109340698174118], [], [1.2139950758162454, 1.5825299456493573], [], [], [1.261032322883848, 1.4606104044716024], [], [], [], [1.5437088252294053, 1.2250546676839245], [1.2073304080543723, 1.7853034182909964], [], [], [], [1.638162390197916, 1.2038386250281414], [], [], [1.7131446894937101, 1.2001728127261244], [1.2066843994387049, 1.6185155337328099], [], [1.3295980949299124, 1.3641392718395766], [1.434284731408773, 1.2764490632314784], [1.2446487494514327, 1.493468552942038], [], [], [], [], [], [1.3167172494846011, 1.3789169372929326], [1.2413708719669017, 1.5008535139160122], [1.206386332744471, 1.7796589448746838], [], [1.401839948265798, 1.2986266282501318], [1.4120309045085244, 1.2912533791677032], [1.3856596400837873, 1.3111682393016926], [], [], [1.7033222820390062, 1.200011037679777], [], [1.6836398389609795, 1.2002677265467265], [], [1.4900248589461274, 1.2462264439839994], [], [], [1.381032811085151, 1.3149546359248574], [1.6361179804702228, 1.2040977035939466]]\n","[1.77592443]\n","[1.51333587]\n","[1.6673937]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:46: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n"],"name":"stderr"},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-185-32a490f5a7ab>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdisplay_points\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m    \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdisplay_points\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m    \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdisplay_points\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m    \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdisplay_points\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 0 is out of bounds for axis 0 with size 0"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 720x720 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"pzBJpDjRIWoP","executionInfo":{"elapsed":2005,"status":"ok","timestamp":1619800589808,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"c16e9452-8893-4bf1-d436-80606941a7fa"},"source":["#optimal clustering using points inside only\n","from numpy.linalg import multi_dot\n","np.random.seed(0)\n","outside=0\n","inside=0\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","#Impose the constraint that v₁, ..., vₙ are all outside of the ellipsoid.\n","#points, labels_true = make_blobs(n_samples=100000, centers=centers, cluster_std=stds, random_state=0)\n","def random_point_arc(x,y,r,theta):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  alpha = np.random.uniform(theta-np.pi/2 ,theta+ np.pi/2)\n","  # vector on that angle\n","  pt = r*np.array([np.cos(alpha),np.sin(alpha)])+[x,y]\n","  ax.scatter(pt[0],pt[1],c='green',alpha=0.7)\n","  return pt \n","\n","def random_point_arcv2(x2,y2,r2,theta2):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  # vector on that angle\n","  alpha2 = np.random.uniform(theta2-np.pi/2 ,theta2+ np.pi/2)\n","  pt = r2*np.array([np.cos(alpha2),np.sin(alpha2)])+[x2,y2]\n","  ax.scatter(pt[0],pt[1],c='green',alpha=0.7)\n","  return pt \n","\n","def GetRandom(dims, Npts):\n","  if dims==2:\n","    np.random.seed(0)\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    print(\"d: \",d)\n","    #form clusters 2d \n","  return points\n","\n","x = y = 0.7\n","x2 = y2 = 0.75\n","r =0.5\n","r2 = 0.5\n","niter =100\n","points = []\n","pointsv2 = []\n","pointsf=[]\n","\n","fig = plt.figure(figsize = (10, 10)) \n","plt.grid(True)\n","ax = fig.add_subplot(111)\n","points = np.array([random_point_arc(x,y,r,np.pi/3) for i in range(niter)])\n","pointsv2 = np.array([random_point_arcv2(x2,y2,r2,-2*np.pi/3) for i in range(niter)])\n","\n","#ax.scatter(points[:,0], points[:,1])\n","\n","#print(points)\n","print((points[0]- [x,y]))\n","x_,y_=(points[0]- [x,y])**2\n","print((points[0]- [x,y])**2)\n","x0,y0=(pointsv2[0]- [x2,y2])**2\n","\n","for i in range(niter):\n","    x_,y_=(points[i]- [x,y])**2     \n","    x0,y0=(points[i]- [x2,y2])**2\n","    xu,yu=(pointsv2[i]- [x,y])**2     \n","    xw,yw=(pointsv2[i]- [x2,y2])**2\n","    if (x_+y_)<r2**2 and (xu+yu)<r**2 :\n","          #print('okie')\n","          inside =inside+1\n","          #result_t = np.hstack((result_t, points[i]))\n","          result_t.append(points[i])\n","          #np.array(label_t.append('0'))\n","print(result_t)\n","print(inside)\n","result_t =np.array(result_t)\n","ax.scatter(result_t[:,0],result_t[:,1],c='blue',alpha=0.7)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:50: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n"],"name":"stderr"},{"output_type":"stream","text":["[0.18092268 0.46611907]\n","[0.03273302 0.21726698]\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","okie\n","[array([1.04570695, 1.06122943]), array([0.7326063, 1.1989357]), array([0.37514898, 1.08009448]), array([0.29828295, 0.99769685]), array([0.90971744, 1.15389271]), array([0.8524486 , 1.17619263]), array([1.18447179, 0.57635906]), array([0.45097122, 1.13357199]), array([0.52843066, 1.16964238]), array([0.40187224, 1.10139736]), array([0.28474433, 0.97850085]), array([1.19423294, 0.62427812]), array([1.19865953, 0.66341216]), array([0.9197133 , 1.14913925]), array([1.1765425 , 0.85135138]), array([0.53423173, 1.17172119]), array([1.00709398, 1.09457988]), array([1.1470074 , 0.47598129]), array([0.77671377, 1.19407995]), array([0.77780245, 1.19390969]), array([1.17230454, 0.53590119]), array([0.69984284, 1.19999998]), array([1.02837006, 1.07705849]), array([1.19992919, 0.69158541]), array([0.72129095, 1.19954649]), array([1.18159891, 0.83439677]), array([1.18515503, 0.82093221]), array([1.19985383, 0.68791063]), array([1.19220181, 0.61203765]), array([0.71623459, 1.19973637]), array([0.46697049, 1.14237682]), array([1.18776288, 0.59005743]), array([0.99136498, 1.10633293]), array([0.79649909, 1.19059956]), array([1.15920512, 0.89781471]), array([1.19434027, 0.62498202]), array([1.05621309, 1.05087353]), array([1.17429057, 0.54173295]), array([0.65950928, 1.1983578 ]), array([0.33270066, 1.03925093]), array([0.82457882, 1.18423147])]\n","41\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7f68ba9ac090>"]},"metadata":{"tags":[]},"execution_count":313},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"9kMpE_E6kGcz","executionInfo":{"status":"error","timestamp":1633426616124,"user_tz":-120,"elapsed":67188,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"b6e808a2-251b-4757-febd-0390d2289fbb"},"source":["from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","\n","def plot_in_hull(p, hull):\n","    \"\"\"\n","    plot relative to `in_hull` for 2d data\n","    \"\"\"\n","    import matplotlib.pyplot as plt\n","    from matplotlib.collections import PolyCollection, LineCollection\n","\n","    from scipy.spatial import Delaunay\n","    if not isinstance(hull,Delaunay):\n","        hull = Delaunay(hull)\n","\n","    # plot triangulation\n","    poly = PolyCollection(hull.points[hull.vertices], facecolors='w', edgecolors='b')\n","    plt.clf()\n","    plt.title('in hull')\n","    plt.gca().add_collection(poly)\n","    plt.plot(hull.points[:,0], hull.points[:,1], 'o', hold=1)\n","\n","    # plot the convex hull\n","    edges = set()\n","    edge_points = []\n","\n","    def add_edge(i, j):\n","        \"\"\"Add a line between the i-th and j-th points, if not in the list already\"\"\"\n","        if (i, j) in edges or (j, i) in edges:\n","            # already added\n","            return\n","        edges.add( (i, j) )\n","        edge_points.append(hull.points[ [i, j] ])\n","\n","    for ia, ib in hull.convex_hull:\n","        add_edge(ia, ib)\n","\n","    lines = LineCollection(edge_points, color='g')\n","    plt.gca().add_collection(lines)\n","    plt.show()    \n","\n","    # plot tested points `p` - black are inside hull, red outside\n","    inside = in_hull(p,hull)\n","    plt.plot(p[ inside,0],p[ inside,1],'.k')\n","    plt.plot(p[-inside,0],p[-inside,1],'.r')\n","\n","def in_hull(p, hull):\n","    \"\"\"\n","    Test if points in `p` are in `hull`\n","\n","    `p` should be a `NxK` coordinates of `N` points in `K` dimensions\n","    `hull` is either a scipy.spatial.Delaunay object or the `MxK` array of the \n","    coordinates of `M` points in `K`dimensions for which Delaunay triangulation\n","    will be computed\n","    \"\"\"\n","    from scipy.spatial import Delaunay\n","    if not isinstance(hull,Delaunay):\n","        hull = Delaunay(hull)\n","    return hull.find_simplex(p)>=0\n","\n","def random_point_arc(x,y,r,theta):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  alpha = np.random.uniform(theta-np.pi/2 ,theta+ np.pi/2)\n","  # vector on that angle\n","  pt = r*np.array([np.cos(alpha),np.sin(alpha)])+[x,y]\n","  ax.scatter(pt[0],pt[1],c='green',alpha=0.7)\n","  return pt \n","\n","def random_point_arcv2(x2,y2,r2,theta2):\n","  # random angle\n","  #aoa_est -+ aoa_confidence\n","  # vector on that angle\n","  alpha2 = np.random.uniform(theta2-np.pi/2 ,theta2+ np.pi/2)\n","  pt = r2*np.array([np.cos(alpha2),np.sin(alpha2)])+[x2,y2]\n","  ax.scatter(pt[0],pt[1],c='green',alpha=0.7)\n","  return pt \n","\n","def GetRandom(dims, Npts):\n","  if dims==2:\n","    np.random.seed(0)\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    print(\"d: \",d)\n","    #form clusters 2d \n","  return points\n","\n","#create points forming the bound of 2 circles intersecting area\n","x = y = 0.5\n","x2 = y2 = 1\n","r =0.7\n","r2 = 0.5\n","niter =10\n","points1 = []\n","points2 = []\n","pointsv1 = []\n","pointsv2 = []\n","pointsf1=[]\n","pointsf2=[]\n","pointsf3=[]\n","pointsf4=[]\n","\n","fig = plt.figure(figsize = (10, 10)) \n","plt.grid(True)\n","ax = fig.add_subplot(111)\n","points1 = np.array([random_point_arc(x,y,r-0.1,np.pi/3) for i in range(niter)])\n","points2 = np.array([random_point_arc(x,y,r+0.1,np.pi/3) for i in range(niter)])\n","pointsv1 = np.array([random_point_arcv2(x2,y2,r2-0.1,-2*np.pi/3) for i in range(niter)])\n","pointsv2 = np.array([random_point_arcv2(x2,y2,r2+0.1,-2*np.pi/3) for i in range(niter)])\n","print(len(pointsf1))\n","\n","for i in range(0,len(pointsv1)):\n","    np.array(pointsf1.append(pointsv1[i]))  \n","for i in range(0,len(pointsv2)):\n","    np.array(pointsf1.append(pointsv2[i]))  \n","for i in range(0,len(points1)):\n","    np.array(pointsf2.append(points1[i]))  \n","for i in range(0,len(points2)):\n","    np.array(pointsf2.append(points2[i]))  \n","\n","print((pointsf1))\n","\n","tested = np.random.rand(20,2)\n","cloud  = np.random.rand(50,2)\n","pointsf1 = np.array(pointsf1)\n","pointsf2 = np.array(pointsf2)\n","pointsf3 = np.array(pointsf3)\n","pointsf4 = np.array(pointsf4)\n","\n","dim = pointsf1.shape[1]\n","print((pointsf1))\n","print(dim)\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","A, b, hull = GetHull(pointsf1)\n","for simplex in hull.simplices:\n","    plt.plot(pointsf1[simplex, 0], pointsf1[simplex, 1], 'k-')\n","\n","A2, b2, hull2 = GetHull(pointsf2)\n","for simplex in hull2.simplices:\n","    plt.plot(pointsf2[simplex, 0], pointsf2[simplex, 1], 'k-')\n","\n","#A3, b3, hull3 = GetHull(pointsf3)\n","#for simplex in hull3.simplices:\n","    #plt.plot(pointsf3[simplex, 0], pointsf3[simplex, 1], 'k-')\n","#\n","#A4, b4, hull4 = GetHull(pointsf4)\n","#for simplex in hull4.simplices:\n","    #plt.plot(pointsf4[simplex, 0], pointsf4[simplex, 1], 'k-')\n","\n","import alphashape\n","import matplotlib.pyplot as plt\n","from descartes import PolygonPatch\n","\n","#from:https://stackoverflow.com/questions/57260352/python-concave-hull-polygon-of-a-set-of-lines\n","alpha = 0.95 * alphashape.optimizealpha(pointsf1)\n","hull = alphashape.alphashape(pointsf1, alpha)\n","hull_pts = hull.exterior.coords.xy\n","\n","alpha2 = 0.95 * alphashape.optimizealpha(pointsf2)\n","hull2 = alphashape.alphashape(pointsf2, alpha2)\n","hull_pts2 = hull2.exterior.coords.xy\n","\n","#alpha3 = 0.95 * alphashape.optimizealpha(pointsf3)\n","#hull3 = alphashape.alphashape(pointsf3, alpha3)\n","##hull_pts3 = hull3.exterior.coords.xy\n","\n","#alpha4 = 0.95 * alphashape.optimizealpha(pointsf4)\n","#hull4 = alphashape.alphashape(pointsf4, alpha4)\n","#hull_pts4 = hull4.exterior.coords.xy\n","\n","fig, ax = plt.subplots()\n","#ax.scatter(hull_pts[0], hull_pts[1], color='red')\n","#ax.add_patch(PolygonPatch(hull, fill=False, color='green'))\n","print(hull_pts)\n","from shapely.geometry import Polygon\n","p1 = hull\n","p2 = hull2\n","#p3 = hull3\n","#p4 = hull4\n","pdiff1 = p1.intersects(p2)\n","#pdiff2 = p3-p4\n","#pdiff1 = p1-p2\n","#print(pdiff1.intersects(pdiff2))\n"," \n","#mingowski difference\n","\n","#print(pdiff1)\n","#pdiff_pts1 = pdiff1.exterior.coords.xy\n","#pdiff_pts2 = pdiff2.exterior.coords.xy\n","#if intersect true\n","#take the mingowski difference\n","#ax.scatter(pdiff_pts1[0], pdiff_pts1[1], color='red')\n","#ax.scatter(pdiff_pts2[0], pdiff_pts2[1], color='red')\n","ax.add_patch(PolygonPatch(pdiff1, fill=False, color='green'))\n","#ax.add_patch(PolygonPatch(pdiff2, fill=False, color='green'))"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:107: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n"]},{"output_type":"stream","name":"stdout","text":["0\n","[array([1.12188293, 0.61902159]), array([0.60002224, 1.00421814]), array([0.70999289, 0.72450793]), array([1.10997765, 0.61541592]), array([1.30594816, 0.74232633]), array([1.23055595, 0.67313007]), array([1.34391397, 0.79573747]), array([1.14559725, 0.62743934]), array([0.6063805 , 0.92884037]), array([1.26857647, 0.70357685]), array([0.44385711, 0.77482209]), array([1.33125714, 0.49973137]), array([0.40363666, 1.06596032]), array([0.86403096, 0.41560936]), array([1.06074946, 0.40308334]), array([0.59818426, 0.55441711]), array([0.41254645, 1.12205871]), array([1.03715548, 0.40115155]), array([1.49097789, 0.65512217]), array([0.65415425, 0.50970344])]\n","[[1.12188293 0.61902159]\n"," [0.60002224 1.00421814]\n"," [0.70999289 0.72450793]\n"," [1.10997765 0.61541592]\n"," [1.30594816 0.74232633]\n"," [1.23055595 0.67313007]\n"," [1.34391397 0.79573747]\n"," [1.14559725 0.62743934]\n"," [0.6063805  0.92884037]\n"," [1.26857647 0.70357685]\n"," [0.44385711 0.77482209]\n"," [1.33125714 0.49973137]\n"," [0.40363666 1.06596032]\n"," [0.86403096 0.41560936]\n"," [1.06074946 0.40308334]\n"," [0.59818426 0.55441711]\n"," [0.41254645 1.12205871]\n"," [1.03715548 0.40115155]\n"," [1.49097789 0.65512217]\n"," [0.65415425 0.50970344]]\n","2\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:maximum allowed iterations reached while optimizing the alpha parameter\n"]},{"output_type":"stream","name":"stdout","text":["(array('d', [1.0371554844943687, 0.8640309601149301, 0.6541542503711053, 0.598184262171722, 0.4438571139728035, 0.4036366578602637, 0.4125464520946651, 1.3439139711742654, 1.4909778864706675, 1.3312571435782814, 1.060749456389853, 1.0371554844943687]), array('d', [0.40115154673992126, 0.41560935993743686, 0.5097034392700395, 0.554417108908436, 0.7748220918443804, 1.06596032255776, 1.1220587115016147, 0.7957374717890074, 0.655122173811078, 0.4997313673351508, 0.40308333617804126, 0.40115154673992126]))\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-091218bec36b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[0;31m#ax.scatter(pdiff_pts1[0], pdiff_pts1[1], color='red')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m \u001b[0;31m#ax.scatter(pdiff_pts2[0], pdiff_pts2[1], color='red')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_patch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPolygonPatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpdiff1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m \u001b[0;31m#ax.add_patch(PolygonPatch(pdiff2, fill=False, color='green'))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/descartes/patch.py\u001b[0m in \u001b[0;36mPolygonPatch\u001b[0;34m(polygon, **kwargs)\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m     \"\"\"\n\u001b[0;32m---> 87\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mPathPatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPolygonPath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpolygon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/descartes/patch.py\u001b[0m in \u001b[0;36mPolygonPath\u001b[0;34m(polygon)\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# GeoJSON\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m         \u001b[0mpolygon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpolygon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__geo_interface__'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpolygon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m         \u001b[0mptype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpolygon\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"type\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mptype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Polygon'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m             \u001b[0mpolygon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mPolygon\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpolygon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'bool' object is not subscriptable"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":316},"id":"LH6XsoRWyryY","executionInfo":{"status":"error","timestamp":1633426262169,"user_tz":-120,"elapsed":481,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"58e1355c-e426-4715-8ef4-c6af9c75b225"},"source":["ax.add_patch(PolygonPatch(pdiff1, fill=False, color='green'))"],"execution_count":5,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-138bf30d9ee8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_patch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPolygonPatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpdiff1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/descartes/patch.py\u001b[0m in \u001b[0;36mPolygonPatch\u001b[0;34m(polygon, **kwargs)\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m     \"\"\"\n\u001b[0;32m---> 87\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mPathPatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPolygonPath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpolygon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/descartes/patch.py\u001b[0m in \u001b[0;36mPolygonPath\u001b[0;34m(polygon)\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# GeoJSON\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m         \u001b[0mpolygon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpolygon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__geo_interface__'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpolygon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m         \u001b[0mptype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpolygon\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"type\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mptype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Polygon'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m             \u001b[0mpolygon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mPolygon\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpolygon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'bool' object is not subscriptable"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AnT3s93tyZ-v","executionInfo":{"status":"ok","timestamp":1633424887622,"user_tz":-120,"elapsed":6432,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"1afd2083-bb73-402a-9e8d-0c96a9677345"},"source":["pip install alphashape"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting alphashape\n","  Downloading alphashape-1.3.1-py2.py3-none-any.whl (13 kB)\n","Requirement already satisfied: Click>=6.0 in /usr/local/lib/python3.7/dist-packages (from alphashape) (7.1.2)\n","Requirement already satisfied: networkx>=2.5 in /usr/local/lib/python3.7/dist-packages (from alphashape) (2.6.3)\n","Requirement already satisfied: shapely>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from alphashape) (1.7.1)\n","Requirement already satisfied: numpy>=1.8.0 in /usr/local/lib/python3.7/dist-packages (from alphashape) (1.19.5)\n","Collecting click-log>=0.3.2\n","  Downloading click_log-0.3.2-py2.py3-none-any.whl (4.6 kB)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from alphashape) (1.4.1)\n","Collecting trimesh>=3.9.8\n","  Downloading trimesh-3.9.32-py3-none-any.whl (637 kB)\n","\u001b[K     |████████████████████████████████| 637 kB 2.8 MB/s \n","\u001b[?25hCollecting rtree>=0.9.7\n","  Downloading Rtree-0.9.7-cp37-cp37m-manylinux2010_x86_64.whl (994 kB)\n","\u001b[K     |████████████████████████████████| 994 kB 34.1 MB/s \n","\u001b[?25hRequirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from trimesh>=3.9.8->alphashape) (57.4.0)\n","Installing collected packages: trimesh, rtree, click-log, alphashape\n","Successfully installed alphashape-1.3.1 click-log-0.3.2 rtree-0.9.7 trimesh-3.9.32\n"]}]},{"cell_type":"code","metadata":{"id":"3H0xitlXlgvC"},"source":["\n","\n","\n","def in_hull(p, hull):\n","    \"\"\"\n","    Test if points in `p` are in `hull`\n","\n","    `p` should be a `NxK` coordinates of `N` points in `K` dimensions\n","    `hull` is either a scipy.spatial.Delaunay object or the `MxK` array of the \n","    coordinates of `M` points in `K`dimensions for which Delaunay triangulation\n","    will be computed\n","    \"\"\"\n","    from scipy.spatial import Delaunay\n","    if not isinstance(hull,Delaunay):\n","        hull = Delaunay(hull)\n","    return hull.find_simplex(p)>=0"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":700},"id":"T1EPVLmSjPhf","executionInfo":{"elapsed":898,"status":"ok","timestamp":1619684873653,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"771d5000-9ea8-4820-dadd-c2d72198e482"},"source":["#from: https://stackoverflow.com/questions/55816902/finding-the-intersection-of-two-circles\n","import matplotlib.pyplot as plt\n","import math\n","\n","def get_intersections(x0, y0, r0, x1, y1, r1):\n","    # circle 1: (x0, y0), radius r0\n","    # circle 2: (x1, y1), radius r1\n","\n","    d=math.sqrt((x1-x0)**2 + (y1-y0)**2)\n","\n","    # non intersecting\n","    if d > r0 + r1 :\n","        return {}\n","    # One circle within other\n","    if d < abs(r0-r1):\n","        return {}\n","    # coincident circles\n","    if d == 0 and r0 == r1:\n","        return {}\n","    else:\n","        a=(r0**2-r1**2+d**2)/(2*d)\n","        h=math.sqrt(r0**2-a**2)\n","        x2=x0+a*(x1-x0)/d   \n","        y2=y0+a*(y1-y0)/d   \n","        x3=x2+h*(y1-y0)/d     \n","        y3=y2-h*(x1-x0)/d \n","        x4=x2-h*(y1-y0)/d\n","        y4=y2+h*(x1-x0)/d\n","        #area of intersection \n","        \n","        return x3, y3, x4, y4\n","\n","# intersection circles\n","x0, y0 = 4, 4\n","r0 = 5\n","x1, y1 = 2, 2\n","r1 = 5\n","\n","# intersecting with (x1, y1) but not with (x0, y0)\n","x2, y2 = 4,4\n","r2 = 2.5\n","\n","circle1 = plt.Circle((x0, y0), r0, color='b', fill=False)\n","circle2 = plt.Circle((x1, y1), r1, color='b', fill=False)\n","circle3 = plt.Circle((x2, y2), r2, color='b', fill=False)\n","\n","fig = plt.figure(figsize = (10, 10)) \n","plt.grid(True)\n","ax = fig.add_subplot(111)\n","\n","ax.set_xlim((-10, 10))\n","ax.set_ylim((-10, 10))\n","ax.add_artist(circle1)\n","ax.add_artist(circle2)\n","ax.add_artist(circle3)\n","\n","intersections1 = get_intersections(x0, y0, r0, x1, y1, r1)\n","print(intersections1)\n","if len(intersections1) > 0:\n","    print(intersections3)\n","    i_x3, i_y3, i_x4, i_y4 = intersections1 \n","    #plt.plot([i_x3, i_x4], [i_y3, i_y4], 'o', color='r')\n","    ax.scatter([i_x3, i_x4],[i_y3, i_y4] ,marker ='X',s=300,alpha=1)\n","\n","intersections2 = get_intersections(x0, y0, r0, x2, y2, r2)\n","print(intersections2)\n","if len(intersections2) > 0:\n","    i_x3, i_y3, i_x4, i_y4 = intersections2 \n","    plt.plot([i_x3, i_x4], [i_y3, i_y4], 'o', color='r')\n","    ax.scatter([i_x3, i_x4],[i_y3, i_y4] ,marker ='X',s=300,alpha=1)\n","\n","intersections3 = get_intersections(x1, y1, r1, x2, y2, r2)\n","\n","if len(intersections3) > 0:\n","    print(intersections3)\n","    i_x3, i_y3, i_x4, i_y4 = intersections3 \n","    #plt.plot([i_x3, i_x4], [i_y3, i_y4], 'o', color='r')\n","    ax.scatter([i_x3, i_x4],[i_y3, i_y4] ,marker ='X',s=300,alpha=1)\n","plt.gca().set_aspect('equal', adjustable='box')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:47: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n"],"name":"stderr"},{"output_type":"stream","text":["(-0.3911649915626336, 6.391164991562634, 6.391164991562634, -0.3911649915626336)\n","(6.492373496843069, 4.195126503156931, 4.195126503156931, 6.492373496843069)\n","{}\n","(6.492373496843069, 4.195126503156931, 4.195126503156931, 6.492373496843069)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"Xvj-CN4I8tWK","executionInfo":{"elapsed":1498,"status":"ok","timestamp":1617909994265,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"b572d3e4-b01b-4ea8-df2b-a10278077645"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from mpl_toolkits.mplot3d import Axes3D\n","\n","\n","dades01 = [54,43,24,104,32,63,57,14,32,12]\n","dades02 = [35,23,14,54,24,33,43,55,23,11]\n","dades03 = [12,65,24,32,13,54,23,32,12,43]\n","\n","df_3d = pd.DataFrame([dades01, dades02, dades03]).transpose()\n","colors = ['r','b','g','y','b','p']\n","\n","\n","fig = plt.figure()\n","ax = fig.add_subplot(111, projection='3d')\n","z= list(df_3d)\n","for n, i in enumerate(df_3d):\n","    print('n',n)\n","    xs = np.arange(len(df_3d[i]))\n","    ys = [i for i in df_3d[i]]\n","    zs = z[n]\n","\n","    cs = colors[n]\n","    #print ' xs:', xs,'ys:', ys, 'zs',zs, ' cs: ',cs\n","    ax.bar(xs, ys, zs, zdir='y', color=cs, alpha=0.8)\n","\n","\n","ax.set_xlabel('X')\n","ax.set_ylabel('Y')\n","ax.set_zlabel('Z')\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["n 0\n","n 1\n","n 2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}