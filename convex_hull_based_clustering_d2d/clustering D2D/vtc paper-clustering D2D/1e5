{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1e5","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMWpUBNG9ph4o2pXuXHp+Iq"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o2Tlfxt5khm3","executionInfo":{"status":"ok","timestamp":1629127602582,"user_tz":-120,"elapsed":5949,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"1cf2ed77-0581-4bef-922a-c3468151806e"},"source":["pip install ortools\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Collecting ortools\n","  Downloading ortools-9.0.9048-cp37-cp37m-manylinux1_x86_64.whl (14.4 MB)\n","\u001b[K     |████████████████████████████████| 14.4 MB 92 kB/s \n","\u001b[?25hRequirement already satisfied: protobuf>=3.15.8 in /usr/local/lib/python3.7/dist-packages (from ortools) (3.17.3)\n","Requirement already satisfied: absl-py>=0.11 in /usr/local/lib/python3.7/dist-packages (from ortools) (0.12.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from absl-py>=0.11->ortools) (1.15.0)\n","Installing collected packages: ortools\n","Successfully installed ortools-9.0.9048\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4yqNq7BBkcQA","executionInfo":{"status":"ok","timestamp":1629130289853,"user_tz":-120,"elapsed":183,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"60d8ed1c-b1f0-418e-baf0-49457e9dc16d"},"source":["#EKF\n","from ortools.sat.python import cp_model\n","\n","def SimpleSatProgram():\n","    \"\"\"Minimal CP-SAT example to showcase calling the solver.\"\"\"\n","    # Creates the model.\n","    model = cp_model.CpModel()\n","\n","    # Creates the variables.\n","    num_vals = 3\n","    x = model.NewIntVar(0, num_vals - 1, 'x')\n","    y = model.NewIntVar(0, num_vals - 1, 'y')\n","    z = model.NewIntVar(0, num_vals - 1, 'z')\n","\n","    # Creates the constraints.\n","    model.Add(x != y)\n","\n","    # Creates a solver and solves the model.\n","    solver = cp_model.CpSolver()\n","    status = solver.Solve(model)\n","\n","    if status == cp_model.OPTIMAL:\n","        print('x = %i' % solver.Value(x))\n","        print('y = %i' % solver.Value(y))\n","        print('z = %i' % solver.Value(z))\n","\n","SimpleSatProgram()"],"execution_count":11,"outputs":[{"output_type":"stream","text":["x = 1\n","y = 0\n","z = 0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cp_bCbjqktIp","executionInfo":{"status":"ok","timestamp":1629139157575,"user_tz":-120,"elapsed":585,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"cc24bb9c-b08b-4c27-f336-b283be47351b"},"source":["import numpy as np\n"," \n","# Author: Addison Sears-Collins\n","# https://automaticaddison.com\n","# Description: Extended Kalman Filter example (two-wheeled mobile robot)\n"," \n","# Supress scientific notation when printing NumPy arrays\n","np.set_printoptions(precision=3,suppress=True)\n"," \n","# A matrix\n","# 3x3 matrix -> number of states x number of states matrix\n","# Expresses how the state of the system [x,y,yaw] changes \n","# from k-1 to k when no control command is executed.\n","# Typically a robot on wheels only drives when the wheels are told to turn.\n","# For this case, A is the identity matrix.\n","# A is sometimes F in the literature.\n","A_k_minus_1 = np.array([[1.0,  0,   0],\n","                                                [  0,1.0,   0],\n","                                                [  0,  0, 1.0]])\n"," \n","# Noise applied to the forward kinematics (calculation\n","# of the estimated state at time k from the state\n","# transition model of the mobile robot). This is a vector\n","# with the number of elements equal to the number of states\n","process_noise_v_k_minus_1 = np.array([0.01,0.01,0.003])#noise for kinematics\n","     \n","# State model noise covariance matrix Q_k\n","# When Q is large, the Kalman Filter tracks large changes in \n","# the sensor measurements more closely than for smaller Q.\n","# Q is a square matrix that has the same number of rows as states.\n","Q_k = np.array([[1.0,   0,   0],\n","                                [  0, 1.0,   0],\n","                                [  0,   0, 1.0]])\n","                 \n","\n","# Measurement matrix H_k\n","# Used to convert the predicted state estimate at time k\n","# into predicted sensor measurements at time k.\n","# In this case, H will be the identity matrix since the \n","# estimated state maps directly to state measurements from the \n","# odometry data [x, y, yaw]\n","# H has the same number of rows as sensor measurements\n","# and same number of columns as states.\n","H_k = np.array([[1.0,  0,   0],\n","                                [  0,1.0,   0],\n","                                [  0,  0, 1.0]])\n","                         \n","# Sensor measurement noise covariance matrix R_k\n","# Has the same number of rows and columns as sensor measurements.\n","# If we are sure about the measurements, R will be near zero.\n","R_k = np.array([[1.0,   0,    0],\n","                                [  0, 1.0,    0],\n","                                [  0,    0, 1.0]])  \n","                 \n","# Sensor noise. This is a vector with the\n","# number of elements equal to the number of sensor measurements.\n","sensor_noise_w_k = np.array([0.07,0.07,0.04])\n"," \n","def getB(yaw, deltak):\n","    \"\"\"\n","    Calculates and returns the B matrix\n","    3x2 matix -> number of states x number of control inputs\n","    The control inputs are the forward speed and the\n","    rotation rate around the z axis from the x-axis in the \n","    counterclockwise direction.\n","    [v,yaw_rate]\n","    Expresses how the state of the system [x,y,yaw] changes\n","    from k-1 to k due to the control commands (i.e. control input).\n","    :param yaw: The yaw angle (rotation angle around the z axis) in rad \n","    :param deltak: The change in time from time step k-1 to k in sec\n","    \"\"\"\n","    B = np.array([  [np.cos(yaw)*deltak, 0],\n","                                    [np.sin(yaw)*deltak, 0],\n","                                    [0, deltak]])\n","    return B\n"," \n","def ekf(z_k_observation_vector, state_estimate_k_minus_1, \n","        control_vector_k_minus_1, P_k_minus_1, dk):\n","    \"\"\"\n","    Extended Kalman Filter. Fuses noisy sensor measurement to \n","    create an optimal estimate of the state of the robotic system.\n","         \n","    INPUT\n","        :param z_k_observation_vector The observation from the Odometry\n","            3x1 NumPy Array [x,y,yaw] in the global reference frame\n","            in [meters,meters,radians].\n","        :param state_estimate_k_minus_1 The state estimate at time k-1\n","            3x1 NumPy Array [x,y,yaw] in the global reference frame\n","            in [meters,meters,radians].\n","        :param control_vector_k_minus_1 The control vector applied at time k-1\n","            3x1 NumPy Array [v,v,yaw rate] in the global reference frame\n","            in [meters per second,meters per second,radians per second].\n","        :param P_k_minus_1 The state covariance matrix estimate at time k-1\n","            3x3 NumPy Array\n","        :param dk Time interval in seconds\n","             \n","    OUTPUT\n","        :return state_estimate_k near-optimal state estimate at time k  \n","            3x1 NumPy Array ---> [meters,meters,radians]\n","        :return P_k state covariance_estimate for time k\n","            3x3 NumPy Array                 \n","    \"\"\"\n","    ######################### Predict #############################\n","    # Predict the state estimate at time k based on the state \n","    # estimate at time k-1 and the control input applied at time k-1.\n","    state_estimate_k = process_noise_v_k_minus_1\n","             \n","    print(f'State Estimate Before EKF={state_estimate_k}')\n","             \n","    # Predict the state covariance estimate based on the previous\n","    # covariance and some noise\n","    P_k = Q_k\n","         \n","    ################### Update (Correct) ##########################\n","    # Calculate the difference between the actual sensor measurements\n","    # at time k minus what the measurement model predicted \n","    # the sensor measurements would be for the current timestep k.\n","    measurement_residual_y_k = z_k_observation_vector - sensor_noise_w_k\n"," \n","    print(f'Observation={z_k_observation_vector}')\n","             \n","    # Calculate the measurement residual covariance\n","    S_k = H_k @ P_k @ H_k.T + R_k\n","    print(P_k)   \n","    # Calculate the near-optimal Kalman gain\n","    # We use pseudoinverse since some of the matrices might be\n","    # non-square or singular.\n","    K_k = P_k @ H_k.T @ np.linalg.pinv(S_k)\n","         \n","    # Calculate an updated state estimate for time k\n","    state_estimate_k = state_estimate_k + (K_k @ measurement_residual_y_k)\n","     \n","    # Update the state covariance estimate for time k\n","    P_k = P_k - (K_k @ H_k @ P_k)\n","     \n","    # Print the best (near-optimal) estimate of the current state of the robot\n","    print(f'State Estimate After EKF={state_estimate_k}')\n"," \n","    # Return the updated state and covariance estimates\n","    return state_estimate_k, P_k\n","     \n","def main():\n"," \n","    # We start at time k=1\n","    k = 1\n","     \n","    # Time interval in seconds\n","    dk = 1\n"," \n","    # Create a list of sensor observations at successive timesteps\n","    # Each list within z_k is an observation vector.\n","    z_k = np.array([[4.721,0.143,0.006], # k=1\n","                    [4.721,0.143,0.006], # k=2\n","                    [4.721,0.143,0.006],# k=3\n","                    [4.721,0.143,0.006], # k=4\n","                    [4.721,0.143,0.006]])# k=5\n","                     \n","    # The estimated state vector at time k-1 in the global reference frame.\n","    # [x_k_minus_1, y_k_minus_1, yaw_k_minus_1]\n","    # [meters, meters, radians]\n","    state_estimate_k_minus_1 = np.array([0.0,0.0,0.0])\n","     \n","    # The control input vector at time k-1 in the global reference frame.\n","    # [v, yaw_rate]\n","    # [meters/second, radians/second]\n","    # In the literature, this is commonly u.\n","    # Because there is no angular velocity and the robot begins at the \n","    # origin with a 0 radians yaw angle, this robot is traveling along \n","    # the positive x-axis in the global reference frame.\n","    control_vector_k_minus_1 = np.array([0,0.0])\n","     \n","    # State covariance matrix P_k_minus_1\n","    # This matrix has the same number of rows (and columns) as the \n","    # number of states (i.e. 3x3 matrix). P is sometimes referred\n","    # to as Sigma in the literature. It represents an estimate of \n","    # the accuracy of the state estimate at time k made using the\n","    # state transition matrix. We start off with guessed values.\n","    P_k_minus_1 = np.array([[0.0,  0,   0],\n","                            [  0,0.0,   0],\n","                            [  0,  0, 0.0]])\n","                             \n","    # Start at k=1 and go through each of the 5 sensor observations, \n","    # one at a time. \n","    # We stop right after timestep k=5 (i.e. the last sensor observation)\n","    for k, obs_vector_z_k in enumerate(z_k,start=1):\n","     \n","        # Print the current timestep\n","        print(f'Timestep k={k}')  \n","         \n","        # Run the Extended Kalman Filter and store the \n","        # near-optimal state and covariance estimates\n","        optimal_state_estimate_k, covariance_estimate_k = ekf(\n","            obs_vector_z_k, # Most recent sensor measurement\n","            state_estimate_k_minus_1, # Our most recent estimate of the state\n","            control_vector_k_minus_1, # Our most recent control input\n","            P_k_minus_1, # Our most recent state covariance matrix\n","            dk) # Time interval\n","         \n","        # Get ready for the next timestep by updating the variable values\n","        state_estimate_k_minus_1 = optimal_state_estimate_k\n","        P_k_minus_1 = covariance_estimate_k\n","         \n","        # Print a blank line\n","        print()\n"," \n","# Program starts running here with the main method  \n","main()"],"execution_count":50,"outputs":[{"output_type":"stream","text":["Timestep k=1\n","State Estimate Before EKF=[0.01  0.01  0.003]\n","Observation=[4.721 0.143 0.006]\n","[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","State Estimate After EKF=[ 2.335  0.046 -0.014]\n","\n","Timestep k=2\n","State Estimate Before EKF=[0.01  0.01  0.003]\n","Observation=[4.721 0.143 0.006]\n","[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","State Estimate After EKF=[ 2.335  0.046 -0.014]\n","\n","Timestep k=3\n","State Estimate Before EKF=[0.01  0.01  0.003]\n","Observation=[4.721 0.143 0.006]\n","[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","State Estimate After EKF=[ 2.335  0.046 -0.014]\n","\n","Timestep k=4\n","State Estimate Before EKF=[0.01  0.01  0.003]\n","Observation=[4.721 0.143 0.006]\n","[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","State Estimate After EKF=[ 2.335  0.046 -0.014]\n","\n","Timestep k=5\n","State Estimate Before EKF=[0.01  0.01  0.003]\n","Observation=[4.721 0.143 0.006]\n","[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","State Estimate After EKF=[ 2.335  0.046 -0.014]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_eKe7uF-QK7H","executionInfo":{"status":"ok","timestamp":1628716899839,"user_tz":-120,"elapsed":335320,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"}},"outputId":"7b91ed95-cb03-435c-c58c-fac13d5c87fa"},"source":["#gaussian mixture model \n","from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","from sklearn.mixture import GaussianMixture\n","\n","rand_iter = 10\n","Npts=1000\n","rand_initializations=3\n","maxk=15\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","    stds=[0.12, 0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    sscore = []\n","    ellipse_points = []\n","    for j in range(rand_iter):\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, maxk))\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters)\n","\n","        #select points inside ellipse \n","        sum2 =0\n","        sscore2 = []\n","        for j in range(rand_iter):\n","          outside=0\n","          inside=0\n","          for i in range(Npts):\n","            P = (points[i] - d).T         \n","            Q = (np.linalg.inv(B)).T\n","            R = np.linalg.inv(B)\n","            S = (points[i] - d)\n","            \n","            if multi_dot([P,Q,R,S])> 1:\n","                    inside =inside+1\n","                    np.array(ellipse_points.append(points[i]))\n","                    np.array(label_t.append(labels_true[i]))\n","            elif multi_dot([P,Q,R,S])<= 1:\n","                    outside =outside+1\n","\n","        gmm.fit(ellipse_points)\n","        y_cluster_kmeans = gmm.predict(ellipse_points)\n","        score = metrics.silhouette_score(ellipse_points, y_cluster_kmeans)\n","        np.array(sscore.append(score))\n","        #print(\"sscore array : \",sscore)\n","    avg = np.max(sscore)\n","    #print(\"avg: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","stds=[0.12, 0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v1, ..., v? are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    sscore2 = []\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, maxk))\n","\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters2)\n","        gmm.fit(result_t)\n","        ellipsoid_labels=gmm.predict(result_t)\n","        score2 = metrics.silhouette_score(result_t, ellipsoid_labels)\n","        np.array(sscore2.append(score2))\n","    avg2 = np.max(sscore2)\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["avg_rand_sscore_wt:  0.7072474689312016\n","avg_rand_sscore:  0.7106751200249283 in pts: [232, 232, 232] out pts: [768, 768, 768]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bLwqYj8hYJx0","executionInfo":{"elapsed":3087253,"status":"ok","timestamp":1628714343019,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"80b7588f-e042-4358-d887-aa9ba02dc6e8"},"source":["#gaussian mixture model \n","from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","from sklearn.mixture import GaussianMixture\n","\n","rand_iter = 10\n","Npts=100000\n","rand_initializations=1\n","maxk=15\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","    stds=[0.8, 0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    sscore = []\n","    ellipse_points = []\n","    for j in range(rand_iter):\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, maxk))\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters)\n","\n","        #select points inside ellipse \n","        sum2 =0\n","        sscore2 = []\n","        for j in range(rand_iter):\n","          outside=0\n","          inside=0\n","          for i in range(Npts):\n","            P = (points[i] - d).T         \n","            Q = (np.linalg.inv(B)).T\n","            R = np.linalg.inv(B)\n","            S = (points[i] - d)\n","            \n","            if multi_dot([P,Q,R,S])> 1:\n","                    inside =inside+1\n","                    np.array(ellipse_points.append(points[i]))\n","                    np.array(label_t.append(labels_true[i]))\n","            elif multi_dot([P,Q,R,S])<= 1:\n","                    outside =outside+1\n","\n","        gmm.fit(ellipse_points)\n","        y_cluster_kmeans = gmm.predict(ellipse_points)\n","        score = metrics.silhouette_score(ellipse_points, y_cluster_kmeans)\n","        np.array(sscore.append(score))\n","        #print(\"sscore array : \",sscore)\n","    avg = np.max(sscore)\n","    #print(\"avg: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5],[0,2],[0,1.5],[1.5,2.5],[2,2.5]]\n","stds=[0.8, 0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v1, ..., v? are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    sscore2 = []\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, maxk))\n","\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters2)\n","        gmm.fit(result_t)\n","        ellipsoid_labels=gmm.predict(result_t)\n","        score2 = metrics.silhouette_score(result_t, ellipsoid_labels)\n","        np.array(sscore2.append(score2))\n","    avg2 = np.max(sscore2)\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["avg_rand_sscore_wt:  0.6940328600476162\n","avg_rand_sscore:  0.6900847109174354 in pts: [48] out pts: [99952]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eUzbsnbXq7Qf","executionInfo":{"elapsed":412302,"status":"ok","timestamp":1628622987746,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"ae707785-efd4-446f-f879-883628a897e9"},"source":["from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","\n","rand_iter = 10\n","Npts=10000\n","rand_initializations=3\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1]]\n","    stds = [1, 1,1]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    for j in range(rand_iter):\n","      if points.shape[1]==2:\n","        kmeans_model = KMeans(n_clusters=13,init='k-means++', n_init=10)\n","        kmeans = kmeans_model.fit(points)\n","        centers = np.array(kmeans.cluster_centers_)\n","        # Centroid coordinates\n","        centroids = kmeans.cluster_centers_\n","        display_points = np.array([random_point_ellipse([[1,0],[0,1]],[0,0]) for i in range(Npts)])\n","        display_points = display_points@B+d\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, 15))\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters,init='k-means++', n_init=10)\n","        km.fit(points)\n","        y_cluster_kmeans = km.predict(points)\n","        score = metrics.silhouette_score(points, y_cluster_kmeans)\n","        sum = sum+ score\n","    avg = sum/rand_iter\n","    #print(\"sscore without ellipse: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1]]\n","stds = [1, 1,1]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v₁, ..., vₙ are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        #print(\"inside no: \",inside)   \n","        #print(\"inside points: \",np.array(result_t).shape)\n","        #print(\"outside no: \",outside)  \n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, 15))\n","        #n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, 15))\n","        #print(\"new cluster count: \",n_clusters2)\n","\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters2,init='k-means++', n_init=10)\n","        km.fit(np.array(result_t))\n","        ellipsoid_labels=km.predict(np.array(result_t))\n","        score2 = metrics.silhouette_score(np.array(result_t), ellipsoid_labels)\n","        #print(\"silhouette_score ellipsoid\",score)\n","        sum2 = sum2+ score2\n","    avg2 = sum2/rand_iter\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["avg_rand_sscore_wt:  0.3174060120274245\n","avg_rand_sscore:  0.7273185773092358 in pts: [29, 29, 29] out pts: [9971, 9971, 9971]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GpBPQZnzCHCJ","executionInfo":{"elapsed":14445,"status":"ok","timestamp":1628702312296,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"6b7c623b-6379-4785-82db-2830efa5a76e"},"source":["#after paper acceptance \n","from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","\n","rand_iter = 5\n","Npts=100\n","rand_initializations=3\n","\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5]]\n","    stds = [0.6, 0.6,0.6,0.6,0.6,0.6,0.6,0.6]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg,inside,outside=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg,inside,outside\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    for j in range(rand_iter):\n","      if points.shape[1]==2:\n","        for j in range(rand_iter):\n","          outside=0\n","          inside=0\n","          for i in range(Npts):\n","            P = (points[i] - d).T         \n","            Q = (np.linalg.inv(B)).T\n","            R = np.linalg.inv(B)\n","            S = (points[i] - d)\n","            \n","            if multi_dot([P,Q,R,S])> 1:\n","                    inside =inside+1\n","                    np.array(result_t.append(points[i]))\n","                    np.array(label_t.append(labels_true[i]))\n","            elif multi_dot([P,Q,R,S])<= 1:\n","                    outside =outside+1\n","        kmeans_model = KMeans(n_clusters=3,init='k-means++', n_init=10)\n","        kmeans = kmeans_model.fit(np.array(result_t))\n","        centers = np.array(kmeans.cluster_centers_)\n","        # Centroid coordinates\n","        centroids = kmeans.cluster_centers_\n","        display_points = np.array([random_point_ellipse([[1,0],[0,1]],[0,0]) for i in range(Npts)])\n","        display_points = display_points@B+d\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, 15))\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters,init='k-means++', n_init=10)\n","        km.fit(np.array(result_t))\n","        y_cluster_kmeans = km.predict(np.array(result_t))\n","        score = metrics.silhouette_score(np.array(result_t), y_cluster_kmeans)\n","        sum = sum+ score\n","    avg = sum/rand_iter\n","    #print(\"sscore without ellipse: \",avg)\n","    return B,d,avg,inside,outside\n","\n","#optimal clustering using points inside only\n","\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5]]\n","stds = [0.6, 0.6,0.6,0.6,0.6,0.6,0.6,0.6]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v₁, ..., vₙ are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    for j in range(rand_iter):\n","        if points.shape[1]==2:\n","            for j in range(rand_iter):\n","              outside=0\n","              inside=0\n","              for i in range(Npts):\n","                P = (points[i] - d).T         \n","                Q = (np.linalg.inv(B)).T\n","                R = np.linalg.inv(B)\n","                S = (points[i] - d)\n","                \n","                if multi_dot([P,Q,R,S])> 1:\n","                        inside =inside+1\n","                        np.array(result_t.append(points[i]))\n","                        np.array(label_t.append(labels_true[i]))\n","                elif multi_dot([P,Q,R,S])<= 1:\n","                        outside =outside+1\n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, 15))\n","\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters2 ,init='k-means++', n_init=10)\n","        km.fit(np.array(result_t))\n","        ellipsoid_labels=km.predict(np.array(result_t))\n","        score2 = metrics.silhouette_score(np.array(result_t), ellipsoid_labels)\n","        sum2 = sum2+ score2\n","        avg2 = sum2/rand_iter\n","    return avg2\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without,in_pts,out_pts = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  result_t=[]\n","  rand_init_avg = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["avg_rand_sscore_wt:  0.8731551797092335\n","avg_rand_sscore:  0.9497947931800411 in pts: [15, 15, 15] out pts: [85, 85, 85]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TykkrDgGrNPP","executionInfo":{"elapsed":3051,"status":"ok","timestamp":1628702166209,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"47c2c030-36f0-452c-923e-bf8393e87f39"},"source":["pip install gapstat_rs"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting gapstat_rs\n","  Downloading gapstat_rs-2.0.1-cp37-cp37m-manylinux1_x86_64.whl (814 kB)\n","\u001b[K     |████████████████████████████████| 814 kB 5.1 MB/s \n","\u001b[?25hInstalling collected packages: gapstat-rs\n","Successfully installed gapstat-rs-2.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tYkUJPwnrVmO","executionInfo":{"elapsed":4675,"status":"ok","timestamp":1628702163162,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"b4a53d8d-fefd-4ab2-c83f-0fe33610be9c"},"source":["pip install gap-stat"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting gap-stat\n","  Downloading gap_stat-2.0.1-py3-none-any.whl (6.9 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.19.5)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.1.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.4.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->gap-stat) (2.8.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->gap-stat) (2018.9)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->gap-stat) (1.15.0)\n","Installing collected packages: gap-stat\n","Successfully installed gap-stat-2.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6uoMbYeBrXdn","executionInfo":{"elapsed":9769,"status":"ok","timestamp":1628702175967,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gidb-UoEaBfPXVB3yDjFnnms0HVKP_UDo_wlfkfyXk=s64","userId":"17960567830629365520"},"user_tz":-120},"outputId":"ba293847-a62e-4d4c-f62c-dea8deac8d9a"},"source":["pip install SimpleITK "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting SimpleITK\n","  Downloading SimpleITK-2.1.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (48.4 MB)\n","\u001b[K     |████████████████████████████████| 48.4 MB 30 kB/s \n","\u001b[?25hInstalling collected packages: SimpleITK\n","Successfully installed SimpleITK-2.1.0\n"],"name":"stdout"}]}]}