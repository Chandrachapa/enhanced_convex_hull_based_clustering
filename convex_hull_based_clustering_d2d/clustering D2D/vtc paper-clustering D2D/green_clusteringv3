{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"green_clusteringv3","provenance":[],"authorship_tag":"ABX9TyPolYLqYuwz3heU67l3I7MB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":361},"id":"ZSTd3VbOJWq5","executionInfo":{"status":"error","timestamp":1620926331716,"user_tz":-120,"elapsed":4396092,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"}},"outputId":"0a5f1169-f7d0-4173-89d9-2ba7844e8de6"},"source":["#k-means\n","from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","\n","rand_iter = 10\n","Npts=10000\n","rand_initializations=2\n","maxk =10\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers =[[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5]]\n","    stds=[0.12, 0.12,0.12,0.12,0.12,0.12,0.12,0.12]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    sscore = []\n","    ellipse_points = []\n","    for j in range(rand_iter):\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2,maxk))\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters,init='k-means++', n_init=10)\n","        sum2 =0\n","        sscore2 = []\n","        for j in range(rand_iter):\n","            outside=0\n","            inside=0\n","            for i in range(Npts):\n","              P = (points[i] - d).T         \n","              Q = (np.linalg.inv(B)).T\n","              R = np.linalg.inv(B)\n","              S = (points[i] - d)\n","              \n","              if multi_dot([P,Q,R,S])> 1:\n","                      inside =inside+1\n","                      np.array(ellipse_points.append(points[i]))\n","                      np.array(label_t.append(labels_true[i]))\n","              elif multi_dot([P,Q,R,S])<= 1:\n","                      outside =outside+1\n","        km.fit(ellipse_points)\n","        y_cluster_kmeans = km.predict(ellipse_points)\n","        score = metrics.silhouette_score(ellipse_points, y_cluster_kmeans)\n","\n","        np.array(sscore.append(score))\n","        #print(\"sscore array : \",sscore)\n","    avg = np.max(sscore)\n","    #print(\"avg: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","sum2 =0\n","centers =[[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5]]\n","stds=[0.12, 0.12,0.12,0.12,0.12,0.12,0.12,0.12]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v1, ..., v? are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    sscore2 = []\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, maxk))\n","        #print(\"new cluster count: \",n_clusters2)\n","\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters2,init='k-means++', n_init=10)\n","        km.fit(np.array(result_t))\n","        ellipsoid_labels=km.predict(np.array(result_t))\n","        score2 = metrics.silhouette_score(np.array(result_t), ellipsoid_labels)\n","        #print(\"silhouette_score ellipsoid\",score)\n","        np.array(sscore2.append(score2))\n","    avg2 = np.max(sscore2)\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":22,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-87083ca6157e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    159\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrand_initializations\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m   \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 161\u001b[0;31m   \u001b[0mB\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msscore_without\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFindMaximumVolumeInscribedEllipsoid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGetRandom\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNptss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNpts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrand_iter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    162\u001b[0m   \u001b[0mrand_init_sum_wt\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0mrand_init_sum_wt\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0msscore_without\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-87083ca6157e>\u001b[0m in \u001b[0;36mFindMaximumVolumeInscribedEllipsoid\u001b[0;34m(points, rand_iter)\u001b[0m\n\u001b[1;32m     68\u001b[0m   \u001b[0;31m#print(f\"Optimal value: {optval}\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m   \u001b[0msum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m   \u001b[0mB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mavg\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mPlot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhull\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mavg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-22-87083ca6157e>\u001b[0m in \u001b[0;36mPlot\u001b[0;34m(points, hull, B, d)\u001b[0m\n\u001b[1;32m    100\u001b[0m         \u001b[0mkm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mellipse_points\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m         \u001b[0my_cluster_kmeans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mellipse_points\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m         \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msilhouette_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mellipse_points\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_cluster_kmeans\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m         \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msscore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/cluster/_unsupervised.py\u001b[0m in \u001b[0;36msilhouette_score\u001b[0;34m(X, labels, metric, sample_size, random_state, **kwds)\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msilhouette_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/cluster/_unsupervised.py\u001b[0m in \u001b[0;36msilhouette_samples\u001b[0;34m(X, labels, metric, **kwds)\u001b[0m\n\u001b[1;32m    232\u001b[0m                                     labels=labels, label_freqs=label_freqs)\n\u001b[1;32m    233\u001b[0m     results = zip(*pairwise_distances_chunked(X, reduce_func=reduce_func,\n\u001b[0;32m--> 234\u001b[0;31m                                               **kwds))\n\u001b[0m\u001b[1;32m    235\u001b[0m     \u001b[0mintra_clust_dists\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minter_clust_dists\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m     \u001b[0mintra_clust_dists\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintra_clust_dists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mpairwise_distances_chunked\u001b[0;34m(X, Y, reduce_func, metric, n_jobs, working_memory, **kwds)\u001b[0m\n\u001b[1;32m   1593\u001b[0m             \u001b[0mX_chunk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msl\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1594\u001b[0m         D_chunk = pairwise_distances(X_chunk, Y, metric=metric,\n\u001b[0;32m-> 1595\u001b[0;31m                                      n_jobs=n_jobs, **kwds)\n\u001b[0m\u001b[1;32m   1596\u001b[0m         if ((X is Y or Y is None)\n\u001b[1;32m   1597\u001b[0m                 \u001b[0;32mand\u001b[0m \u001b[0mPAIRWISE_DISTANCE_FUNCTIONS\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mpairwise_distances\u001b[0;34m(X, Y, metric, n_jobs, force_all_finite, **kwds)\u001b[0m\n\u001b[1;32m   1750\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpartial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcdist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1751\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1752\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_parallel_pairwise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1753\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1754\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36m_parallel_pairwise\u001b[0;34m(X, Y, func, n_jobs, **kwds)\u001b[0m\n\u001b[1;32m   1346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1347\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0meffective_n_jobs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1348\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1349\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1350\u001b[0m     \u001b[0;31m# enforce a threading backend to prevent data communication overhead\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36meuclidean_distances\u001b[0;34m(X, Y, Y_norm_squared, squared, X_norm_squared)\u001b[0m\n\u001b[1;32m    311\u001b[0m         \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfill_diagonal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistances\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 313\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mdistances\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0msquared\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistances\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdistances\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"7whRED9hlOVm"},"source":["from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","\n","rand_iter = 10\n","Npts=1000\n","rand_initializations=3\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5]]\n","    stds=[1,1,1,1,1,1,1,1]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    sscore = []\n","    for j in range(rand_iter):\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, 13))\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters,init='k-means++', n_init=10)\n","        km.fit(points)\n","        y_cluster_kmeans = km.predict(points)\n","        #fig = plt.figure(figsize = (10, 10)) \n","        #plt.grid(True)\n","        #ax = fig.add_subplot(111)\n","        #ax.scatter(points[:,0], points[:,1],s=50,alpha=0.5)\n","        #ax.scatter(points[:,0], points[:,1],c=y_cluster_kmeans.labels_.astype(float),s=50,cmap='viridis',alpha=0.5)\n","        #ax.scatter(centers[:,0], centers[:,1], c = 'r', marker ='X',s=300,alpha=1) \n","        # Centroid coordinates\n","        #centroids = kmeans.cluster_centers_\n","        #print(\"centroids 2d: \",centroids)\n","        #for simplex in hull.simplices:\n","        #   plt.plot(points[simplex, 0], points[simplex, 1], 'k-')\n","        #display_points = np.array([random_point_ellipse([[1,0],[0,1]],[0,0]) for i in range(100000)])\n","        #display_points = display_points@B+d\n","        #ax.scatter(display_points[:,0], display_points[:,1],c='green',alpha=0.7)\n","        #ax.set_xticklabels([0,1,2,3,4,5,6],fontsize=15)\n","        #ax.set_yticklabels([0,1,2,3,4,5,6,7],fontsize=15)\n","        #ax.set_xlabel('X-coordinates (km)',fontsize=15)\n","        #ax.set_ylabel('Y-coordinates (km)',fontsize=15)\n","        score = metrics.silhouette_score(points, y_cluster_kmeans)\n","        np.array(sscore.append(score))\n","        #print(\"sscore array : \",sscore)\n","    avg = np.max(sscore)\n","    #print(\"avg: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1],[1,2],[2,2],[2.5,2.5],[0,2.5],[1,2.5]]\n","stds=[1, 1,1,1,1,1,1,1]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v1, ..., v? are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    sscore2 = []\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        #print(\"inside no: \",inside)   \n","        #print(\"inside points: \",np.array(result_t).shape)\n","        #print(\"outside no: \",outside)  \n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, 13))\n","        #print(\"new cluster count: \",n_clusters2)\n","\n","        optimalK.gap_df.head()\n","        km = KMeans(n_clusters2,init='k-means++', n_init=10)\n","        km.fit(np.array(result_t))\n","        ellipsoid_labels=km.predict(np.array(result_t))\n","        score2 = metrics.silhouette_score(np.array(result_t), ellipsoid_labels)\n","        #print(\"silhouette_score ellipsoid\",score)\n","        np.array(sscore2.append(score2))\n","    avg2 = np.max(sscore2)\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ePd92MklY_m","executionInfo":{"status":"ok","timestamp":1620892227251,"user_tz":-120,"elapsed":4854,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"}},"outputId":"ad2c86b9-a0cc-441e-e405-70bacc6b35a2"},"source":["pip install gapstat_rs"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting gapstat_rs\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b5/e1/63fca4894933743479e6ff59d88f9223cfe3d236eaa9df7ca594a3265a2c/gapstat_rs-2.0.1-cp37-cp37m-manylinux1_x86_64.whl (814kB)\n","\r\u001b[K     |▍                               | 10kB 14.3MB/s eta 0:00:01\r\u001b[K     |▉                               | 20kB 18.7MB/s eta 0:00:01\r\u001b[K     |█▏                              | 30kB 21.4MB/s eta 0:00:01\r\u001b[K     |█▋                              | 40kB 23.5MB/s eta 0:00:01\r\u001b[K     |██                              | 51kB 25.0MB/s eta 0:00:01\r\u001b[K     |██▍                             | 61kB 26.3MB/s eta 0:00:01\r\u001b[K     |██▉                             | 71kB 26.8MB/s eta 0:00:01\r\u001b[K     |███▏                            | 81kB 27.3MB/s eta 0:00:01\r\u001b[K     |███▋                            | 92kB 28.7MB/s eta 0:00:01\r\u001b[K     |████                            | 102kB 29.4MB/s eta 0:00:01\r\u001b[K     |████▍                           | 112kB 29.4MB/s eta 0:00:01\r\u001b[K     |████▉                           | 122kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 133kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 143kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████                          | 153kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 163kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 174kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 184kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 194kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████                        | 204kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████▌                       | 215kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 225kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████▎                      | 235kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████▋                      | 245kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████                      | 256kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████▌                     | 266kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████▉                     | 276kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████▎                    | 286kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████▊                    | 296kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████                    | 307kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 317kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 327kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 337kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████▊                  | 348kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 358kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 368kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 378kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████▎                | 389kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 399kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████                | 409kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 419kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 430kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 440kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 450kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 460kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████▌             | 471kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 481kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 491kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 501kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 512kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 522kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 532kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 542kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████▊          | 552kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 563kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 573kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 583kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 593kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 604kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 614kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 624kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 634kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 645kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 655kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 665kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 675kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 686kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▍    | 696kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▊    | 706kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 716kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 727kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 737kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 747kB 29.4MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 757kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 768kB 29.4MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 778kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 788kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 798kB 29.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 808kB 29.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 819kB 29.4MB/s \n","\u001b[?25hInstalling collected packages: gapstat-rs\n","Successfully installed gapstat-rs-2.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ahmXIgz2lafm","executionInfo":{"status":"ok","timestamp":1620892236135,"user_tz":-120,"elapsed":13731,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"}},"outputId":"7a58e701-a361-4992-e009-94db9c80a9a4"},"source":["pip install SimpleITK "],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting SimpleITK\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9c/6b/85df5eb3a8059b23a53a9f224476e75473f9bcc0a8583ed1a9c34619f372/SimpleITK-2.0.2-cp37-cp37m-manylinux2010_x86_64.whl (47.4MB)\n","\u001b[K     |████████████████████████████████| 47.4MB 84kB/s \n","\u001b[?25hInstalling collected packages: SimpleITK\n","Successfully installed SimpleITK-2.0.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HA9cPSAgldoF","executionInfo":{"status":"ok","timestamp":1620892239127,"user_tz":-120,"elapsed":16717,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"}},"outputId":"de3d1599-0c6c-48f4-fdb6-bf983062b0ea"},"source":["pip install gap-stat"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Collecting gap-stat\n","  Downloading https://files.pythonhosted.org/packages/59/00/33eb7ecd5eb19dacf84013942ca4480606b3c322bf4ac6555edf79e99c76/gap_stat-2.0.1-py3-none-any.whl\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.19.5)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.1.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from gap-stat) (1.4.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->gap-stat) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->gap-stat) (2.8.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->gap-stat) (1.15.0)\n","Installing collected packages: gap-stat\n","Successfully installed gap-stat-2.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tHZel0mbbiBL","executionInfo":{"status":"ok","timestamp":1617820140703,"user_tz":-120,"elapsed":2022533,"user":{"displayName":"Vishaka Basnayake","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhxyykJL5Wlp9mP3b9sG0-adMlMnIoSnIaU6_w1jQ=s64","userId":"17960567830629365520"}},"outputId":"b8273b30-ce3f-44fe-b349-7b5e381fed7e"},"source":["#gaussian mixture model \n","from mpl_toolkits.mplot3d import axes3d\n","from scipy.spatial import ConvexHull\n","import cvxpy as cp\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import sklearn.datasets\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.datasets import make_blobs\n","from collections import Counter\n","import math\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import pairwise_distances_argmin_min\n","from sklearn.decomposition import PCA\n","from gap_statistic import OptimalK\n","from numpy import linalg as LA\n","from numpy.linalg import multi_dot\n","from sklearn.metrics.cluster import adjusted_rand_score\n","from sklearn import metrics\n","from sklearn.mixture import GaussianMixture\n","\n","rand_iter = 3\n","Npts=100000\n","rand_initializations=3\n","#https://stackoverflow.com/questions/61859098/maximum-volume-inscribed-ellipsoid-in-a-polytope-set-of-points?fbclid=IwAR2DcaQSvqd368lstBayY-atAbQxCVa_EecgS7HE-mrpK6EanO9qbsX2Drg\n","#From: https://stackoverflow.com/a/61786434/752843\n","\n","def random_point_ellipse(W,d):\n","  # random angle\n","  alpha = 2 * np.pi * np.random.random()\n","  # vector on that angle\n","  pt = np.array([np.cos(alpha),np.sin(alpha)])\n","  # Ellipsoidize it\n","  return W@pt+d\n","\n","def GetRandom(dims, Nptss):\n","  if dims==2:\n","    W = sklearn.datasets.make_spd_matrix(2)\n","    d = np.array([2,3])\n","    #form clusters 2d \n","    centers = [[0, 1], [1.5, 1.5], [1,1]]\n","    stds=[0.12, 0.12,0.12]\n","    points, labels_true = make_blobs(n_samples=Npts, centers=centers, cluster_std=stds, random_state=0)\n","  else:\n","    raise Exception(\"dims must be 2 or 3!\")\n","  return points\n","\n","def GetHull(points):\n","  dim  = points.shape[1]\n","  hull = ConvexHull(points)\n","  A    = hull.equations[:,0:dim]\n","  b    = hull.equations[:,dim]\n","  return A, -b, hull #Negative moves b to the RHS of the inequality\n","\n","def FindMaximumVolumeInscribedEllipsoid(points,rand_iter):\n","  \"\"\"Find the inscribed ellipsoid of maximum volume. Return its matrix-offset form.\"\"\"\n","  dim = points.shape[1]\n","  A,b,hull = GetHull(points)\n","\n","  B = cp.Variable((dim,dim), PSD=True) #Ellipsoid\n","  d = cp.Variable(dim)                 #Center\n","\n","  constraints = [cp.norm(B@A[i],2)+A[i]@d<=b[i] for i in range(len(A))]\n","  prob = cp.Problem(cp.Minimize(-cp.log_det(B)), constraints)\n","  optval = prob.solve()\n","  if optval==np.inf:\n","    raise Exception(\"No solution possible!\")\n","  #print(f\"Optimal value: {optval}\") \n","  sum=0\n","  B.value,d.value,avg=Plot(points, hull, B.value, d.value)\n","  return B.value, d.value,avg\n","\n","def Plot(points, hull, B, d):\n","    sum=0\n","    sscore = []\n","    for j in range(rand_iter):\n","        #optimal clustering\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters = optimalK(points, cluster_array=range(2, 13))\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters)\n","        gmm.fit(points)\n","        y_cluster_kmeans = gmm.predict(points)\n","        #fig = plt.figure(figsize = (10, 10)) \n","        #plt.grid(True)\n","        #ax = fig.add_subplot(111)\n","        #ax.scatter(points[:,0], points[:,1],s=50,alpha=0.5)\n","        #ax.scatter(points[:,0], points[:,1],c=y_cluster_kmeans.labels_.astype(float),s=50,cmap='viridis',alpha=0.5)\n","        #ax.scatter(centers[:,0], centers[:,1], c = 'r', marker ='X',s=300,alpha=1) \n","        # Centroid coordinates\n","        #centroids = kmeans.cluster_centers_\n","        #print(\"centroids 2d: \",centroids)\n","        #for simplex in hull.simplices:\n","        #   plt.plot(points[simplex, 0], points[simplex, 1], 'k-')\n","        #display_points = np.array([random_point_ellipse([[1,0],[0,1]],[0,0]) for i in range(100000)])\n","        #display_points = display_points@B+d\n","        #ax.scatter(display_points[:,0], display_points[:,1],c='green',alpha=0.7)\n","        #ax.set_xticklabels([0,1,2,3,4,5,6],fontsize=15)\n","        #ax.set_yticklabels([0,1,2,3,4,5,6,7],fontsize=15)\n","        #ax.set_xlabel('X-coordinates (km)',fontsize=15)\n","        #ax.set_ylabel('Y-coordinates (km)',fontsize=15)\n","        score = metrics.silhouette_score(points, y_cluster_kmeans)\n","        np.array(sscore.append(score))\n","        #print(\"sscore array : \",sscore)\n","    avg = np.max(sscore)\n","    #print(\"avg: \",avg)\n","    return B,d,avg\n","\n","#optimal clustering using points inside only\n","sum2 =0\n","centers = [[0, 1], [1.5, 1.5], [1,1]]\n","stds=[0.12, 0.12,0.12]\n","points, labels_true = make_blobs(n_samples=Npts,centers=centers, cluster_std=stds, random_state=0)\n","#print(\"labels_true: \",labels_true)\n","result_t = []\n","label_t = []\n","\n","def WithEllipsoid(Npts,rand_iter,B,d):\n","# Impose the constraint that v1, ..., v? are all outside of the ellipsoid.\n","    #take the total sum of no rand iterations\n","    sum2 =0\n","    sscore2 = []\n","    for j in range(rand_iter):\n","        outside=0\n","        inside=0\n","        for i in range(Npts):\n","          P = (points[i] - d).T         \n","          Q = (np.linalg.inv(B)).T\n","          R = np.linalg.inv(B)\n","          S = (points[i] - d)\n","          \n","          if multi_dot([P,Q,R,S])> 1:\n","                  inside =inside+1\n","                  np.array(result_t.append(points[i]))\n","                  np.array(label_t.append(labels_true[i]))\n","          elif multi_dot([P,Q,R,S])<= 1:\n","                  outside =outside+1\n","\n","        #print(\"inside no: \",inside)   \n","        #print(\"inside points: \",np.array(result_t).shape)\n","        #print(\"outside no: \",outside)  \n","\n","        optimalK = OptimalK(parallel_backend='rust')\n","        n_clusters2 = optimalK(np.array(result_t), cluster_array=range(2, 13))\n","        #print(\"new cluster count: \",n_clusters2)\n","\n","        optimalK.gap_df.head()\n","        gmm = GaussianMixture(n_components=n_clusters2)\n","        gmm.fit(np.array(result_t))\n","        ellipsoid_labels=gmm.predict(np.array(result_t))\n","        score2 = metrics.silhouette_score(np.array(result_t), ellipsoid_labels)\n","        #print(\"silhouette_score ellipsoid\",score)\n","        np.array(sscore2.append(score2))\n","    avg2 = np.max(sscore2)\n","    return avg2,inside,outside\n","\n","rand_init_sum = 0\n","rand_init_sum_wt=0\n","in_pts_sum=[]\n","out_pts_sum=[]\n","\n","for j in range(rand_initializations):\n","  np.random.seed(j)\n","  B,d,sscore_without = FindMaximumVolumeInscribedEllipsoid(GetRandom(dims=2, Nptss=Npts),rand_iter)\n","  rand_init_sum_wt =  rand_init_sum_wt + sscore_without\n","  \n","  rand_init_avg,in_pts,out_pts = WithEllipsoid(Npts,rand_iter,B,d)\n","  rand_init_sum =  rand_init_sum + rand_init_avg \n","  #append inside points to an array\n","  np.array(in_pts_sum.append(in_pts))\n","  np.array(out_pts_sum.append(out_pts))\n","\n","avg_rand_sscore_wt = rand_init_sum_wt/rand_initializations \n","\n","avg_rand_sscore = rand_init_sum/rand_initializations \n","\n","print(\"avg_rand_sscore_wt: \",avg_rand_sscore_wt)   \n","\n","print(\"avg_rand_sscore: \",avg_rand_sscore,\"in pts:\",in_pts_sum,\"out pts:\",out_pts_sum)    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["avg_rand_sscore_wt:  0.6540723957128286\n","avg_rand_sscore:  0.14995210846190557 in pts: [438, 438, 438] out pts: [99562, 99562, 99562]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ayk10vK_AhyF"},"source":[""],"execution_count":null,"outputs":[]}]}